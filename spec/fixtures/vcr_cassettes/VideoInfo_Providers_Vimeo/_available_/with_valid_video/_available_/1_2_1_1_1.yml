---
http_interactions:
- request:
    method: head
    uri: https://vimeo.com/98605382
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - VideoInfo/2.8.0
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '171694'
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Tue, 27 Oct 2020 18:32:00 GMT
      Set-Cookie:
      - vuid=1802576841.1036939760; expires=Fri, 25-Oct-2030 18:22:00 GMT; Max-Age=315360000;
        path=/; domain=.vimeo.com; secure; SameSite=None
      X-Ua-Compatible:
      - IE=edge
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - sameorigin
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Security-Policy-Report-Only:
      - 'default-src https: data: blob: wss: ''unsafe-inline'' ''unsafe-eval''; report-uri
        /_csp'
      X-Bapp-Server:
      - pweb-v4874-qqxbn
      Via:
      - 1.1 varnish
      - 1.1 varnish, 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-a-14
      X-Vimeo-Dc:
      - ge
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 27 Oct 2020 18:22:00 GMT
      Age:
      - '0'
      X-Served-By:
      - cache-bwi5121-BWI, cache-cwb20524-CWB
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1603822920.133493,VS0,VE388
      Vary:
      - User-Agent,Accept-Encoding
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Tue, 27 Oct 2020 18:22:00 GMT
- request:
    method: get
    uri: https://vimeo.com/98605382
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '40745'
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Tue, 27 Oct 2020 18:32:01 GMT
      Set-Cookie:
      - vuid=1454548141.1503048180; expires=Fri, 25-Oct-2030 18:22:00 GMT; Max-Age=315359999;
        path=/; domain=.vimeo.com; secure; SameSite=None
      X-Ua-Compatible:
      - IE=edge
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - sameorigin
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Security-Policy-Report-Only:
      - 'default-src https: data: blob: wss: ''unsafe-inline'' ''unsafe-eval''; report-uri
        /_csp'
      X-Bapp-Server:
      - pweb-v4874-gskcx
      Via:
      - 1.1 varnish
      - 1.1 varnish, 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-a-17
      X-Vimeo-Dc:
      - ge
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 27 Oct 2020 18:22:01 GMT
      Age:
      - '0'
      X-Served-By:
      - cache-bwi5128-BWI, cache-cwb20526-CWB
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1603822921.769926,VS0,VE793
      Vary:
      - User-Agent,Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Tue, 27 Oct 2020 18:22:01 GMT
recorded_with: VCR 3.0.3
