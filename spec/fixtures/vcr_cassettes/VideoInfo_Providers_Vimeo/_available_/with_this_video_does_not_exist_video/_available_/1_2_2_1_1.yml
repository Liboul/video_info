---
http_interactions:
- request:
    method: head
    uri: https://vimeo.com/59312311
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - VideoInfo/3.0.0
      Accept:
      - "*/*"
  response:
    status:
      code: 451
      message: Unavailable For Legal Reasons
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '164775'
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Sun, 13 Dec 2020 01:08:11 GMT
      X-Frame-Options:
      - sameorigin
      X-Bapp-Server:
      - pweb-v6468-8qpcw
      Accept-Ranges:
      - bytes
      Age:
      - '0'
      Via:
      - 1.1 varnish, 1.1 varnish, 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-a-12
      X-Vimeo-Dc:
      - ge
      Date:
      - Sun, 13 Dec 2020 13:08:11 GMT
      X-Served-By:
      - cache-bwi5129-BWI, cache-gru17135-GRU
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1607864891.069240,VS0,VE448
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Sun, 13 Dec 2020 13:08:11 GMT
- request:
    method: get
    uri: https://vimeo.com/59312311
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 451
      message: Unavailable For Legal Reasons
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '164907'
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Sun, 13 Dec 2020 01:08:11 GMT
      X-Frame-Options:
      - sameorigin
      X-Bapp-Server:
      - pweb-v6468-bmnct
      Accept-Ranges:
      - bytes
      Age:
      - '0'
      Via:
      - 1.1 varnish, 1.1 varnish, 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-a-12
      X-Vimeo-Dc:
      - ge
      Date:
      - Sun, 13 Dec 2020 13:08:12 GMT
      X-Served-By:
      - cache-bwi5128-BWI, cache-gru17139-GRU
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1607864892.772091,VS0,VE233
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICAgIDxoZWFkPgogICAgICAgIAo8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CjxtZXRhIHByb3BlcnR5PSJmYjphcHBfaWQiIGNvbnRlbnQ9IjE5ODg0MDI4OTYzIj4KPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgo8bGluayByZWw9InByZWNvbm5lY3QiIGhyZWY9Ii8vcGxheWVyLnZpbWVvLmNvbSI+CjxsaW5rIHJlbD0icHJlY29ubmVjdCIgaHJlZj0iLy9pLnZpbWVvY2RuLmNvbSI+CjxsaW5rIHJlbD0icHJlY29ubmVjdCIgaHJlZj0iLy9mLnZpbWVvY2RuLmNvbSI+CjxsaW5rIHJlbD0ic2VhcmNoIiB0eXBlPSJhcHBsaWNhdGlvbi9vcGVuc2VhcmNoZGVzY3JpcHRpb24reG1sIiBocmVmPSIvc2VhcmNoL29wZW5zZWFyY2gueG1sIiB0aXRsZT0iVmltZW8iPgo8bGluayByZWw9ImxvZ28iIHR5cGU9ImltYWdlL3N2ZyIgaHJlZj0iaHR0cHM6Ly9mLnZpbWVvY2RuLmNvbS9sb2dvLnN2ZyI+CgoKICAgICAgICAgICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTEuMCxtYXhpbXVtLXNjYWxlPTUuMCx1c2VyLXNjYWxhYmxlPXllcyI+CiAgICAKCiAgICAgICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlNvcnJ5LCB0aGlzIHZpZGVvIGlzIHVuYXZhaWxhYmxlIj4KICAgICAgICA8bWV0YSBuYW1lPSJyb2JvdHMiIGNvbnRlbnQ9Im5vaW5kZXgiPgoKCgoKICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgaHJlZj0iaHR0cHM6Ly9pLnZpbWVvY2RuLmNvbS9mYXZpY29uL21haW4tdG91Y2hfMTgwIj4KCjxsaW5rIHJlbD0ibWFzay1pY29uIiBocmVmPSJodHRwczovL2YudmltZW9jZG4uY29tL3N2Zy9sZWdhY3lfdmlld19zdXBwb3J0L2lyaXNfaWNvbl92XzY0LnN2Zz84NTk4NzAyOGMzOWEwMzBiNDc4M2ExMDBmMjBmOGM3ODQ4NmYzODY1IiBjb2xvcj0iIzE3MjcyZSI+CgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJodHRwczovL2YudmltZW9jZG4uY29tL2ltYWdlc192Ni9mYXZpY29uLmljbz84NTk4NzAyOGMzOWEwMzBiNDc4M2ExMDBmMjBmOGM3ODQ4NmYzODY1IiBkYXRhLXBsYXk9Imh0dHBzOi8vaS52aW1lb2Nkbi5jb20vZmF2aWNvbi9wbGF5XzMyIiBkYXRhLXBhdXNlPSJodHRwczovL2kudmltZW9jZG4uY29tL2Zhdmljb24vcGF1c2VfMzIiPgoKPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlSW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vaS52aW1lb2Nkbi5jb20vZmF2aWNvbi9tYWluLXRvdWNoXzE0NCI+CjxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUNvbG9yIiBjb250ZW50PSIjMDBhZGVmIj4KICAgICAgICA8dGl0bGU+VmltZVVoT2g8L3RpdGxlPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIC8vIEZpcnN0IElucHV0IERlbGF5IHRyYWNraW5nLiBIaWdoIHByaW9yaXR5IGxvYWRpbmcgdG8gbm90IG1pc3MgZXZlbnQKICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZUxhYnMvZmlyc3QtaW5wdXQtZGVsYXkvYmxvYi9tYXN0ZXIvZGlzdC9maXJzdC1pbnB1dC1kZWxheS5taW4uanMKICAgICAgICAgICAgIWZ1bmN0aW9uKG4sZSl7dmFyIHQsbyxpLGM9W10sZj17cGFzc2l2ZTohMCxjYXB0dXJlOiEwfSxyPW5ldyBEYXRlLGE9InBvaW50ZXJ1cCIsdT0icG9pbnRlcmNhbmNlbCI7ZnVuY3Rpb24gcChuLGMpe3R8fCh0PWMsbz1uLGk9bmV3IERhdGUsdyhlKSxzKCkpfWZ1bmN0aW9uIHMoKXtvPj0wJiZvPGktciYmKGMuZm9yRWFjaChmdW5jdGlvbihuKXtuKG8sdCl9KSxjPVtdKX1mdW5jdGlvbiBsKHQpe2lmKHQuY2FuY2VsYWJsZSl7dmFyIG89KHQudGltZVN0YW1wPjFlMTI/bmV3IERhdGU6cGVyZm9ybWFuY2Uubm93KCkpLXQudGltZVN0YW1wOyJwb2ludGVyZG93biI9PXQudHlwZT9mdW5jdGlvbih0LG8pe2Z1bmN0aW9uIGkoKXtwKHQsbykscigpfWZ1bmN0aW9uIGMoKXtyKCl9ZnVuY3Rpb24gcigpe2UoYSxpLGYpLGUodSxjLGYpfW4oYSxpLGYpLG4odSxjLGYpfShvLHQpOnAobyx0KX19ZnVuY3Rpb24gdyhuKXtbImNsaWNrIiwibW91c2Vkb3duIiwia2V5ZG93biIsInRvdWNoc3RhcnQiLCJwb2ludGVyZG93biJdLmZvckVhY2goZnVuY3Rpb24oZSl7bihlLGwsZil9KX13KG4pLHNlbGYucGVyZk1ldHJpY3M9c2VsZi5wZXJmTWV0cmljc3x8e30sc2VsZi5wZXJmTWV0cmljcy5vbkZpcnN0SW5wdXREZWxheT1mdW5jdGlvbihuKXtjLnB1c2gobikscygpfX0oYWRkRXZlbnRMaXN0ZW5lcixyZW1vdmVFdmVudExpc3RlbmVyKTsKICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8c2NyaXB0PgogICAgICAgICAgLy8gQ3JlYXRlIFBlcmZvcm1hbmNlT2JzZXJ2ZXIgZm9yIHRyYWNraW5nIFRUSQogICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZUxhYnMvdHRpLXBvbHlmaWxsCiAgICAgICAgICAhZnVuY3Rpb24oKXtpZignUGVyZm9ybWFuY2VMb25nVGFza1RpbWluZycgaW4gd2luZG93KXt2YXIgZz13aW5kb3cuX190dGk9e2U6W119OwogICAgICAgICAgZy5vPW5ldyBQZXJmb3JtYW5jZU9ic2VydmVyKGZ1bmN0aW9uKGwpe2cuZT1nLmUuY29uY2F0KGwuZ2V0RW50cmllcygpKX0pOwogICAgICAgICAgZy5vLm9ic2VydmUoe2VudHJ5VHlwZXM6Wydsb25ndGFzayddfSl9fSgpOwogICAgICAgIDwvc2NyaXB0PgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAvLyBOZXcgUmVsaWMgQWdlbnQKICAgICAgICAgIDt3aW5kb3cuTlJFVU18fChOUkVVTT17fSk7TlJFVU0uaW5pdD17ZGlzdHJpYnV0ZWRfdHJhY2luZzp7ZW5hYmxlZDp0cnVlfSxwcml2YWN5Ontjb29raWVzX2VuYWJsZWQ6dHJ1ZX19OwogICAgICAgICAgd2luZG93Lk5SRVVNfHwoTlJFVU09e30pLF9fbnJfcmVxdWlyZT1mdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcihuKXtpZighZVtuXSl7dmFyIG89ZVtuXT17ZXhwb3J0czp7fX07dFtuXVswXS5jYWxsKG8uZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbz10W25dWzFdW2VdO3JldHVybiByKG98fGUpfSxvLG8uZXhwb3J0cyl9cmV0dXJuIGVbbl0uZXhwb3J0c31pZigiZnVuY3Rpb24iPT10eXBlb2YgX19ucl9yZXF1aXJlKXJldHVybiBfX25yX3JlcXVpcmU7Zm9yKHZhciBvPTA7bzxuLmxlbmd0aDtvKyspcihuW29dKTtyZXR1cm4gcn0oezE6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe3RyeXtzLmNvbnNvbGUmJmNvbnNvbGUubG9nKHQpfWNhdGNoKGUpe319dmFyIG8saT10KCJlZSIpLGE9dCgyNSkscz17fTt0cnl7bz1sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiX19ucl9mbGFncyIpLnNwbGl0KCIsIiksY29uc29sZSYmImZ1bmN0aW9uIj09dHlwZW9mIGNvbnNvbGUubG9nJiYocy5jb25zb2xlPSEwLG8uaW5kZXhPZigiZGV2IikhPT0tMSYmKHMuZGV2PSEwKSxvLmluZGV4T2YoIm5yX2RldiIpIT09LTEmJihzLm5yRGV2PSEwKSl9Y2F0Y2goYyl7fXMubnJEZXYmJmkub24oImludGVybmFsLWVycm9yIixmdW5jdGlvbih0KXtyKHQuc3RhY2spfSkscy5kZXYmJmkub24oImZuLWVyciIsZnVuY3Rpb24odCxlLG4pe3Iobi5zdGFjayl9KSxzLmRldiYmKHIoIk5SIEFHRU5UIElOIERFVkVMT1BNRU5UIE1PREUiKSxyKCJmbGFnczogIithKHMsZnVuY3Rpb24odCxlKXtyZXR1cm4gdH0pLmpvaW4oIiwgIikpKX0se31dLDI6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSxuLHIscyl7dHJ5e2w/bC09MTpvKHN8fG5ldyBVbmNhdWdodEV4Y2VwdGlvbih0LGUsbiksITApfWNhdGNoKGYpe3RyeXtpKCJpZXJyIixbZixjLm5vdygpLCEwXSl9Y2F0Y2goZCl7fX1yZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgdSYmdS5hcHBseSh0aGlzLGEoYXJndW1lbnRzKSl9ZnVuY3Rpb24gVW5jYXVnaHRFeGNlcHRpb24odCxlLG4pe3RoaXMubWVzc2FnZT10fHwiVW5jYXVnaHQgZXJyb3Igd2l0aCBubyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIix0aGlzLnNvdXJjZVVSTD1lLHRoaXMubGluZT1ufWZ1bmN0aW9uIG8odCxlKXt2YXIgbj1lP251bGw6Yy5ub3coKTtpKCJlcnIiLFt0LG5dKX12YXIgaT10KCJoYW5kbGUiKSxhPXQoMjYpLHM9dCgiZWUiKSxjPXQoImxvYWRlciIpLGY9dCgiZ29zIiksdT13aW5kb3cub25lcnJvcixkPSExLHA9Im5yQHNlZW5FcnJvciIsbD0wO2MuZmVhdHVyZXMuZXJyPSEwLHQoMSksd2luZG93Lm9uZXJyb3I9cjt0cnl7dGhyb3cgbmV3IEVycm9yfWNhdGNoKGgpeyJzdGFjayJpbiBoJiYodCgxMyksdCgxMiksImFkZEV2ZW50TGlzdGVuZXIiaW4gd2luZG93JiZ0KDYpLGMueGhyV3JhcHBhYmxlJiZ0KDE0KSxkPSEwKX1zLm9uKCJmbi1zdGFydCIsZnVuY3Rpb24odCxlLG4pe2QmJihsKz0xKX0pLHMub24oImZuLWVyciIsZnVuY3Rpb24odCxlLG4pe2QmJiFuW3BdJiYoZihuLHAsZnVuY3Rpb24oKXtyZXR1cm4hMH0pLHRoaXMudGhyb3duPSEwLG8obikpfSkscy5vbigiZm4tZW5kIixmdW5jdGlvbigpe2QmJiF0aGlzLnRocm93biYmbD4wJiYobC09MSl9KSxzLm9uKCJpbnRlcm5hbC1lcnJvciIsZnVuY3Rpb24odCl7aSgiaWVyciIsW3QsYy5ub3coKSwhMF0pfSl9LHt9XSwzOltmdW5jdGlvbih0LGUsbil7dCgibG9hZGVyIikuZmVhdHVyZXMuaW5zPSEwfSx7fV0sNDpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIoKXtMKyssQz1nLmhhc2gsdGhpc1t1XT15Lm5vdygpfWZ1bmN0aW9uIG8oKXtMLS0sZy5oYXNoIT09QyYmaSgwLCEwKTt2YXIgdD15Lm5vdygpO3RoaXNbaF09fn50aGlzW2hdK3QtdGhpc1t1XSx0aGlzW2RdPXR9ZnVuY3Rpb24gaSh0LGUpe0UuZW1pdCgibmV3VVJMIixbIiIrZyxlXSl9ZnVuY3Rpb24gYSh0LGUpe3Qub24oZSxmdW5jdGlvbigpe3RoaXNbZV09eS5ub3coKX0pfXZhciBzPSItc3RhcnQiLGM9Ii1lbmQiLGY9Ii1ib2R5Iix1PSJmbiIrcyxkPSJmbiIrYyxwPSJjYiIrcyxsPSJjYiIrYyxoPSJqc1RpbWUiLG09ImZldGNoIix2PSJhZGRFdmVudExpc3RlbmVyIix3PXdpbmRvdyxnPXcubG9jYXRpb24seT10KCJsb2FkZXIiKTtpZih3W3ZdJiZ5LnhocldyYXBwYWJsZSl7dmFyIHg9dCgxMCksYj10KDExKSxFPXQoOCksTz10KDYpLFI9dCgxMyksUD10KDcpLFQ9dCgxNCksTj10KDkpLE09dCgiZWUiKSxTPU0uZ2V0KCJ0cmFjZXIiKTt0KDE2KSx5LmZlYXR1cmVzLnNwYT0hMDt2YXIgQyxMPTA7TS5vbih1LHIpLE0ub24ocCxyKSxNLm9uKGQsbyksTS5vbihsLG8pLE0uYnVmZmVyKFt1LGQsInhoci1kb25lIiwieGhyLXJlc29sdmVkIl0pLE8uYnVmZmVyKFt1XSksUi5idWZmZXIoWyJzZXRUaW1lb3V0IitjLCJjbGVhclRpbWVvdXQiK3MsdV0pLFQuYnVmZmVyKFt1LCJuZXcteGhyIiwic2VuZC14aHIiK3NdKSxQLmJ1ZmZlcihbbStzLG0rIi1kb25lIixtK2YrcyxtK2YrY10pLEUuYnVmZmVyKFsibmV3VVJMIl0pLHguYnVmZmVyKFt1XSksYi5idWZmZXIoWyJwcm9wYWdhdGUiLHAsbCwiZXhlY3V0b3ItZXJyIiwicmVzb2x2ZSIrc10pLFMuYnVmZmVyKFt1LCJuby0iK3VdKSxOLmJ1ZmZlcihbIm5ldy1qc29ucCIsImNiLXN0YXJ0IiwianNvbnAtZXJyb3IiLCJqc29ucC1lbmQiXSksYShULCJzZW5kLXhociIrcyksYShNLCJ4aHItcmVzb2x2ZWQiKSxhKE0sInhoci1kb25lIiksYShQLG0rcyksYShQLG0rIi1kb25lIiksYShOLCJuZXctanNvbnAiKSxhKE4sImpzb25wLWVuZCIpLGEoTiwiY2Itc3RhcnQiKSxFLm9uKCJwdXNoU3RhdGUtZW5kIixpKSxFLm9uKCJyZXBsYWNlU3RhdGUtZW5kIixpKSx3W3ZdKCJoYXNoY2hhbmdlIixpLCEwKSx3W3ZdKCJsb2FkIixpLCEwKSx3W3ZdKCJwb3BzdGF0ZSIsZnVuY3Rpb24oKXtpKDAsTD4xKX0sITApfX0se31dLDU6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe31pZih3aW5kb3cucGVyZm9ybWFuY2UmJndpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcmJndpbmRvdy5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKXt2YXIgbz10KCJlZSIpLGk9dCgiaGFuZGxlIiksYT10KDEzKSxzPXQoMTIpLGM9ImxlYXJSZXNvdXJjZVRpbWluZ3MiLGY9ImFkZEV2ZW50TGlzdGVuZXIiLHU9InJlc291cmNldGltaW5nYnVmZmVyZnVsbCIsZD0iYnN0UmVzb3VyY2UiLHA9InJlc291cmNlIixsPSItc3RhcnQiLGg9Ii1lbmQiLG09ImZuIitsLHY9ImZuIitoLHc9ImJzdFRpbWVyIixnPSJwdXNoU3RhdGUiLHk9dCgibG9hZGVyIik7eS5mZWF0dXJlcy5zdG49ITAsdCg4KSwiYWRkRXZlbnRMaXN0ZW5lciJpbiB3aW5kb3cmJnQoNik7dmFyIHg9TlJFVU0uby5FVjtvLm9uKG0sZnVuY3Rpb24odCxlKXt2YXIgbj10WzBdO24gaW5zdGFuY2VvZiB4JiYodGhpcy5ic3RTdGFydD15Lm5vdygpKX0pLG8ub24odixmdW5jdGlvbih0LGUpe3ZhciBuPXRbMF07biBpbnN0YW5jZW9mIHgmJmkoImJzdCIsW24sZSx0aGlzLmJzdFN0YXJ0LHkubm93KCldKX0pLGEub24obSxmdW5jdGlvbih0LGUsbil7dGhpcy5ic3RTdGFydD15Lm5vdygpLHRoaXMuYnN0VHlwZT1ufSksYS5vbih2LGZ1bmN0aW9uKHQsZSl7aSh3LFtlLHRoaXMuYnN0U3RhcnQseS5ub3coKSx0aGlzLmJzdFR5cGVdKX0pLHMub24obSxmdW5jdGlvbigpe3RoaXMuYnN0U3RhcnQ9eS5ub3coKX0pLHMub24odixmdW5jdGlvbih0LGUpe2kodyxbZSx0aGlzLmJzdFN0YXJ0LHkubm93KCksInJlcXVlc3RBbmltYXRpb25GcmFtZSJdKX0pLG8ub24oZytsLGZ1bmN0aW9uKHQpe3RoaXMudGltZT15Lm5vdygpLHRoaXMuc3RhcnRQYXRoPWxvY2F0aW9uLnBhdGhuYW1lK2xvY2F0aW9uLmhhc2h9KSxvLm9uKGcraCxmdW5jdGlvbih0KXtpKCJic3RIaXN0IixbbG9jYXRpb24ucGF0aG5hbWUrbG9jYXRpb24uaGFzaCx0aGlzLnN0YXJ0UGF0aCx0aGlzLnRpbWVdKX0pLGYgaW4gd2luZG93LnBlcmZvcm1hbmNlJiYod2luZG93LnBlcmZvcm1hbmNlWyJjIitjXT93aW5kb3cucGVyZm9ybWFuY2VbZl0odSxmdW5jdGlvbih0KXtpKGQsW3dpbmRvdy5wZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKHApXSksd2luZG93LnBlcmZvcm1hbmNlWyJjIitjXSgpfSwhMSk6d2luZG93LnBlcmZvcm1hbmNlW2ZdKCJ3ZWJraXQiK3UsZnVuY3Rpb24odCl7aShkLFt3aW5kb3cucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZShwKV0pLHdpbmRvdy5wZXJmb3JtYW5jZVsid2Via2l0QyIrY10oKX0sITEpKSxkb2N1bWVudFtmXSgic2Nyb2xsIixyLHtwYXNzaXZlOiEwfSksZG9jdW1lbnRbZl0oImtleXByZXNzIixyLCExKSxkb2N1bWVudFtmXSgiY2xpY2siLHIsITEpfX0se31dLDY6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe2Zvcih2YXIgZT10O2UmJiFlLmhhc093blByb3BlcnR5KHUpOyllPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtlJiZvKGUpfWZ1bmN0aW9uIG8odCl7cy5pblBsYWNlKHQsW3UsZF0sIi0iLGkpfWZ1bmN0aW9uIGkodCxlKXtyZXR1cm4gdFsxXX12YXIgYT10KCJlZSIpLmdldCgiZXZlbnRzIikscz10KCJ3cmFwLWZ1bmN0aW9uIikoYSwhMCksYz10KCJnb3MiKSxmPVhNTEh0dHBSZXF1ZXN0LHU9ImFkZEV2ZW50TGlzdGVuZXIiLGQ9InJlbW92ZUV2ZW50TGlzdGVuZXIiO2UuZXhwb3J0cz1hLCJnZXRQcm90b3R5cGVPZiJpbiBPYmplY3Q/KHIoZG9jdW1lbnQpLHIod2luZG93KSxyKGYucHJvdG90eXBlKSk6Zi5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkodSkmJihvKHdpbmRvdyksbyhmLnByb3RvdHlwZSkpLGEub24odSsiLXN0YXJ0IixmdW5jdGlvbih0LGUpe3ZhciBuPXRbMV0scj1jKG4sIm5yQHdyYXBwZWQiLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiBuLmhhbmRsZUV2ZW50KXJldHVybiBuLmhhbmRsZUV2ZW50LmFwcGx5KG4sYXJndW1lbnRzKX12YXIgZT17b2JqZWN0OnQsImZ1bmN0aW9uIjpufVt0eXBlb2Ygbl07cmV0dXJuIGU/cyhlLCJmbi0iLG51bGwsZS5uYW1lfHwiYW5vbnltb3VzIik6bn0pO3RoaXMud3JhcHBlZD10WzFdPXJ9KSxhLm9uKGQrIi1zdGFydCIsZnVuY3Rpb24odCl7dFsxXT10aGlzLndyYXBwZWR8fHRbMV19KX0se31dLDc6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSxuKXt2YXIgcj10W2VdOyJmdW5jdGlvbiI9PXR5cGVvZiByJiYodFtlXT1mdW5jdGlvbigpe3ZhciB0PWkoYXJndW1lbnRzKSxlPXt9O28uZW1pdChuKyJiZWZvcmUtc3RhcnQiLFt0XSxlKTt2YXIgYTtlW21dJiZlW21dLmR0JiYoYT1lW21dLmR0KTt2YXIgcz1yLmFwcGx5KHRoaXMsdCk7cmV0dXJuIG8uZW1pdChuKyJzdGFydCIsW3QsYV0scykscy50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiBvLmVtaXQobisiZW5kIixbbnVsbCx0XSxzKSx0fSxmdW5jdGlvbih0KXt0aHJvdyBvLmVtaXQobisiZW5kIixbdF0scyksdH0pfSl9dmFyIG89dCgiZWUiKS5nZXQoImZldGNoIiksaT10KDI2KSxhPXQoMjUpO2UuZXhwb3J0cz1vO3ZhciBzPXdpbmRvdyxjPSJmZXRjaC0iLGY9YysiYm9keS0iLHU9WyJhcnJheUJ1ZmZlciIsImJsb2IiLCJqc29uIiwidGV4dCIsImZvcm1EYXRhIl0sZD1zLlJlcXVlc3QscD1zLlJlc3BvbnNlLGw9cy5mZXRjaCxoPSJwcm90b3R5cGUiLG09Im5yQGNvbnRleHQiO2QmJnAmJmwmJihhKHUsZnVuY3Rpb24odCxlKXtyKGRbaF0sZSxmKSxyKHBbaF0sZSxmKX0pLHIocywiZmV0Y2giLGMpLG8ub24oYysiZW5kIixmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7aWYoZSl7dmFyIHI9ZS5oZWFkZXJzLmdldCgiY29udGVudC1sZW5ndGgiKTtudWxsIT09ciYmKG4ucnhTaXplPXIpLG8uZW1pdChjKyJkb25lIixbbnVsbCxlXSxuKX1lbHNlIG8uZW1pdChjKyJkb25lIixbdF0sbil9KSl9LHt9XSw4OltmdW5jdGlvbih0LGUsbil7dmFyIHI9dCgiZWUiKS5nZXQoImhpc3RvcnkiKSxvPXQoIndyYXAtZnVuY3Rpb24iKShyKTtlLmV4cG9ydHM9cjt2YXIgaT13aW5kb3cuaGlzdG9yeSYmd2luZG93Lmhpc3RvcnkuY29uc3RydWN0b3ImJndpbmRvdy5oaXN0b3J5LmNvbnN0cnVjdG9yLnByb3RvdHlwZSxhPXdpbmRvdy5oaXN0b3J5O2kmJmkucHVzaFN0YXRlJiZpLnJlcGxhY2VTdGF0ZSYmKGE9aSksby5pblBsYWNlKGEsWyJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiXSwiLSIpfSx7fV0sOTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7ZnVuY3Rpb24gZSgpe2MuZW1pdCgianNvbnAtZW5kIixbXSxwKSx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoImxvYWQiLGUsITEpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcigiZXJyb3IiLG4sITEpfWZ1bmN0aW9uIG4oKXtjLmVtaXQoImpzb25wLWVycm9yIixbXSxwKSxjLmVtaXQoImpzb25wLWVuZCIsW10scCksdC5yZW1vdmVFdmVudExpc3RlbmVyKCJsb2FkIixlLCExKSx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoImVycm9yIixuLCExKX12YXIgcj10JiYic3RyaW5nIj09dHlwZW9mIHQubm9kZU5hbWUmJiJzY3JpcHQiPT09dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKHIpe3ZhciBvPSJmdW5jdGlvbiI9PXR5cGVvZiB0LmFkZEV2ZW50TGlzdGVuZXI7aWYobyl7dmFyIGE9aSh0LnNyYyk7aWYoYSl7dmFyIHU9cyhhKSxkPSJmdW5jdGlvbiI9PXR5cGVvZiB1LnBhcmVudFt1LmtleV07aWYoZCl7dmFyIHA9e307Zi5pblBsYWNlKHUucGFyZW50LFt1LmtleV0sImNiLSIscCksdC5hZGRFdmVudExpc3RlbmVyKCJsb2FkIixlLCExKSx0LmFkZEV2ZW50TGlzdGVuZXIoImVycm9yIixuLCExKSxjLmVtaXQoIm5ldy1qc29ucCIsW3Quc3JjXSxwKX19fX19ZnVuY3Rpb24gbygpe3JldHVybiJhZGRFdmVudExpc3RlbmVyImluIHdpbmRvd31mdW5jdGlvbiBpKHQpe3ZhciBlPXQubWF0Y2godSk7cmV0dXJuIGU/ZVsxXTpudWxsfWZ1bmN0aW9uIGEodCxlKXt2YXIgbj10Lm1hdGNoKHApLHI9blsxXSxvPW5bM107cmV0dXJuIG8/YShvLGVbcl0pOmVbcl19ZnVuY3Rpb24gcyh0KXt2YXIgZT10Lm1hdGNoKGQpO3JldHVybiBlJiZlLmxlbmd0aD49Mz97a2V5OmVbMl0scGFyZW50OmEoZVsxXSx3aW5kb3cpfTp7a2V5OnQscGFyZW50OndpbmRvd319dmFyIGM9dCgiZWUiKS5nZXQoImpzb25wIiksZj10KCJ3cmFwLWZ1bmN0aW9uIikoYyk7aWYoZS5leHBvcnRzPWMsbygpKXt2YXIgdT0vWz8mXSg/OmNhbGxiYWNrfGNiKT0oW14mI10rKS8sZD0vKC4qKVwuKFteLl0rKS8scD0vXihcdyspKFwufCQpKC4qKSQvLGw9WyJhcHBlbmRDaGlsZCIsImluc2VydEJlZm9yZSIsInJlcGxhY2VDaGlsZCJdO05vZGUmJk5vZGUucHJvdG90eXBlJiZOb2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZD9mLmluUGxhY2UoTm9kZS5wcm90b3R5cGUsbCwiZG9tLSIpOihmLmluUGxhY2UoSFRNTEVsZW1lbnQucHJvdG90eXBlLGwsImRvbS0iKSxmLmluUGxhY2UoSFRNTEhlYWRFbGVtZW50LnByb3RvdHlwZSxsLCJkb20tIiksZi5pblBsYWNlKEhUTUxCb2R5RWxlbWVudC5wcm90b3R5cGUsbCwiZG9tLSIpKSxjLm9uKCJkb20tc3RhcnQiLGZ1bmN0aW9uKHQpe3IodFswXSl9KX19LHt9XSwxMDpbZnVuY3Rpb24odCxlLG4pe3ZhciByPXQoImVlIikuZ2V0KCJtdXRhdGlvbiIpLG89dCgid3JhcC1mdW5jdGlvbiIpKHIpLGk9TlJFVU0uby5NTztlLmV4cG9ydHM9cixpJiYod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBpP25ldyBpKG8odCwiZm4tIikpOmkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxNdXRhdGlvbk9ic2VydmVyLnByb3RvdHlwZT1pLnByb3RvdHlwZSl9LHt9XSwxMTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9YS5jb250ZXh0KCksbj1zKHQsImV4ZWN1dG9yLSIsZSkscj1uZXcgZihuKTtyZXR1cm4gYS5jb250ZXh0KHIpLmdldEN0eD1mdW5jdGlvbigpe3JldHVybiBlfSxhLmVtaXQoIm5ldy1wcm9taXNlIixbcixlXSxlKSxyfWZ1bmN0aW9uIG8odCxlKXtyZXR1cm4gZX12YXIgaT10KCJ3cmFwLWZ1bmN0aW9uIiksYT10KCJlZSIpLmdldCgicHJvbWlzZSIpLHM9aShhKSxjPXQoMjUpLGY9TlJFVU0uby5QUjtlLmV4cG9ydHM9YSxmJiYod2luZG93LlByb21pc2U9cixbImFsbCIsInJhY2UiXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPWZbdF07Zlt0XT1mdW5jdGlvbihuKXtmdW5jdGlvbiByKHQpe3JldHVybiBmdW5jdGlvbigpe2EuZW1pdCgicHJvcGFnYXRlIixbbnVsbCwhb10saSksbz1vfHwhdH19dmFyIG89ITE7YyhuLGZ1bmN0aW9uKGUsbil7UHJvbWlzZS5yZXNvbHZlKG4pLnRoZW4ocigiYWxsIj09PXQpLHIoITEpKX0pO3ZhciBpPWUuYXBwbHkoZixhcmd1bWVudHMpLHM9Zi5yZXNvbHZlKGkpO3JldHVybiBzfX0pLFsicmVzb2x2ZSIsInJlamVjdCJdLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9Zlt0XTtmW3RdPWZ1bmN0aW9uKHQpe3ZhciBuPWUuYXBwbHkoZixhcmd1bWVudHMpO3JldHVybiB0IT09biYmYS5lbWl0KCJwcm9wYWdhdGUiLFt0LCEwXSxuKSxufX0pLGYucHJvdG90eXBlWyJjYXRjaCJdPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRoZW4obnVsbCx0KX0sZi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShmLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnJ9fSksYyhPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhmKSxmdW5jdGlvbih0LGUpe3RyeXtyW2VdPWZbZV19Y2F0Y2gobil7fX0pLGEub24oImV4ZWN1dG9yLXN0YXJ0IixmdW5jdGlvbih0KXt0WzBdPXModFswXSwicmVzb2x2ZS0iLHRoaXMpLHRbMV09cyh0WzFdLCJyZXNvbHZlLSIsdGhpcyl9KSxhLm9uKCJleGVjdXRvci1lcnIiLGZ1bmN0aW9uKHQsZSxuKXt0WzFdKG4pfSkscy5pblBsYWNlKGYucHJvdG90eXBlLFsidGhlbiJdLCJ0aGVuLSIsbyksYS5vbigidGhlbi1zdGFydCIsZnVuY3Rpb24odCxlKXt0aGlzLnByb21pc2U9ZSx0WzBdPXModFswXSwiY2ItIix0aGlzKSx0WzFdPXModFsxXSwiY2ItIix0aGlzKX0pLGEub24oInRoZW4tZW5kIixmdW5jdGlvbih0LGUsbil7dGhpcy5uZXh0UHJvbWlzZT1uO3ZhciByPXRoaXMucHJvbWlzZTthLmVtaXQoInByb3BhZ2F0ZSIsW3IsITBdLG4pfSksYS5vbigiY2ItZW5kIixmdW5jdGlvbih0LGUsbil7YS5lbWl0KCJwcm9wYWdhdGUiLFtuLCEwXSx0aGlzLm5leHRQcm9taXNlKX0pLGEub24oInByb3BhZ2F0ZSIsZnVuY3Rpb24odCxlLG4pe3RoaXMuZ2V0Q3R4JiYhZXx8KHRoaXMuZ2V0Q3R4PWZ1bmN0aW9uKCl7aWYodCBpbnN0YW5jZW9mIFByb21pc2UpdmFyIGU9YS5jb250ZXh0KHQpO3JldHVybiBlJiZlLmdldEN0eD9lLmdldEN0eCgpOnRoaXN9KX0pLHIudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4iIitmfSl9LHt9XSwxMjpbZnVuY3Rpb24odCxlLG4pe3ZhciByPXQoImVlIikuZ2V0KCJyYWYiKSxvPXQoIndyYXAtZnVuY3Rpb24iKShyKSxpPSJlcXVlc3RBbmltYXRpb25GcmFtZSI7ZS5leHBvcnRzPXIsby5pblBsYWNlKHdpbmRvdyxbInIiK2ksIm1velIiK2ksIndlYmtpdFIiK2ksIm1zUiIraV0sInJhZi0iKSxyLm9uKCJyYWYtc3RhcnQiLGZ1bmN0aW9uKHQpe3RbMF09byh0WzBdLCJmbi0iKX0pfSx7fV0sMTM6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSxuKXt0WzBdPWEodFswXSwiZm4tIixudWxsLG4pfWZ1bmN0aW9uIG8odCxlLG4pe3RoaXMubWV0aG9kPW4sdGhpcy50aW1lckR1cmF0aW9uPWlzTmFOKHRbMV0pPzA6K3RbMV0sdFswXT1hKHRbMF0sImZuLSIsdGhpcyxuKX12YXIgaT10KCJlZSIpLmdldCgidGltZXIiKSxhPXQoIndyYXAtZnVuY3Rpb24iKShpKSxzPSJzZXRUaW1lb3V0IixjPSJzZXRJbnRlcnZhbCIsZj0iY2xlYXJUaW1lb3V0Iix1PSItc3RhcnQiLGQ9Ii0iO2UuZXhwb3J0cz1pLGEuaW5QbGFjZSh3aW5kb3csW3MsInNldEltbWVkaWF0ZSJdLHMrZCksYS5pblBsYWNlKHdpbmRvdyxbY10sYytkKSxhLmluUGxhY2Uod2luZG93LFtmLCJjbGVhckltbWVkaWF0ZSJdLGYrZCksaS5vbihjK3UsciksaS5vbihzK3Usbyl9LHt9XSwxNDpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlKXtkLmluUGxhY2UoZSxbIm9ucmVhZHlzdGF0ZWNoYW5nZSJdLCJmbi0iLHMpfWZ1bmN0aW9uIG8oKXt2YXIgdD10aGlzLGU9dS5jb250ZXh0KHQpO3QucmVhZHlTdGF0ZT4zJiYhZS5yZXNvbHZlZCYmKGUucmVzb2x2ZWQ9ITAsdS5lbWl0KCJ4aHItcmVzb2x2ZWQiLFtdLHQpKSxkLmluUGxhY2UodCxnLCJmbi0iLHMpfWZ1bmN0aW9uIGkodCl7eS5wdXNoKHQpLGgmJihiP2IudGhlbihhKTp2P3YoYSk6KEU9LUUsTy5kYXRhPUUpKX1mdW5jdGlvbiBhKCl7Zm9yKHZhciB0PTA7dDx5Lmxlbmd0aDt0KyspcihbXSx5W3RdKTt5Lmxlbmd0aCYmKHk9W10pfWZ1bmN0aW9uIHModCxlKXtyZXR1cm4gZX1mdW5jdGlvbiBjKHQsZSl7Zm9yKHZhciBuIGluIHQpZVtuXT10W25dO3JldHVybiBlfXQoNik7dmFyIGY9dCgiZWUiKSx1PWYuZ2V0KCJ4aHIiKSxkPXQoIndyYXAtZnVuY3Rpb24iKSh1KSxwPU5SRVVNLm8sbD1wLlhIUixoPXAuTU8sbT1wLlBSLHY9cC5TSSx3PSJyZWFkeXN0YXRlY2hhbmdlIixnPVsib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbmxvYWRzdGFydCIsIm9ubG9hZGVuZCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiXSx5PVtdO2UuZXhwb3J0cz11O3ZhciB4PXdpbmRvdy5YTUxIdHRwUmVxdWVzdD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgbCh0KTt0cnl7dS5lbWl0KCJuZXcteGhyIixbZV0sZSksZS5hZGRFdmVudExpc3RlbmVyKHcsbywhMSl9Y2F0Y2gobil7dHJ5e3UuZW1pdCgiaW50ZXJuYWwtZXJyb3IiLFtuXSl9Y2F0Y2gocil7fX1yZXR1cm4gZX07aWYoYyhsLHgpLHgucHJvdG90eXBlPWwucHJvdG90eXBlLGQuaW5QbGFjZSh4LnByb3RvdHlwZSxbIm9wZW4iLCJzZW5kIl0sIi14aHItIixzKSx1Lm9uKCJzZW5kLXhoci1zdGFydCIsZnVuY3Rpb24odCxlKXtyKHQsZSksaShlKX0pLHUub24oIm9wZW4teGhyLXN0YXJ0IixyKSxoKXt2YXIgYj1tJiZtLnJlc29sdmUoKTtpZighdiYmIW0pe3ZhciBFPTEsTz1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShFKTtuZXcgaChhKS5vYnNlcnZlKE8se2NoYXJhY3RlckRhdGE6ITB9KX19ZWxzZSBmLm9uKCJmbi1lbmQiLGZ1bmN0aW9uKHQpe3RbMF0mJnRbMF0udHlwZT09PXd8fGEoKX0pfSx7fV0sMTU6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe2lmKCFpKHQpKXJldHVybiBudWxsO3ZhciBlPXdpbmRvdy5OUkVVTTtpZighZS5sb2FkZXJfY29uZmlnKXJldHVybiBudWxsO3ZhciBuPShlLmxvYWRlcl9jb25maWcuYWNjb3VudElEfHwiIikudG9TdHJpbmcoKXx8bnVsbCxyPShlLmxvYWRlcl9jb25maWcuYWdlbnRJRHx8IiIpLnRvU3RyaW5nKCl8fG51bGwscz0oZS5sb2FkZXJfY29uZmlnLnRydXN0S2V5fHwiIikudG9TdHJpbmcoKXx8bnVsbDtpZighbnx8IXIpcmV0dXJuIG51bGw7dmFyIGM9YS5nZW5lcmF0ZUNhdElkKCksZj1hLmdlbmVyYXRlQ2F0SWQoKSx1PURhdGUubm93KCksZD1vKGMsZix1LG4scixzKTtyZXR1cm57aGVhZGVyOmQsZ3VpZDpjLHRyYWNlSWQ6Zix0aW1lc3RhbXA6dX19ZnVuY3Rpb24gbyh0LGUsbixyLG8saSl7dmFyIGE9ImJ0b2EiaW4gd2luZG93JiYiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93LmJ0b2E7aWYoIWEpcmV0dXJuIG51bGw7dmFyIHM9e3Y6WzAsMV0sZDp7dHk6IkJyb3dzZXIiLGFjOnIsYXA6byxpZDp0LHRyOmUsdGk6bn19O3JldHVybiBpJiZyIT09aSYmKHMuZC50az1pKSxidG9hKEpTT04uc3RyaW5naWZ5KHMpKX1mdW5jdGlvbiBpKHQpe3ZhciBlPSExLG49ITEscj17fTtpZigiaW5pdCJpbiBOUkVVTSYmImRpc3RyaWJ1dGVkX3RyYWNpbmciaW4gTlJFVU0uaW5pdCYmKHI9TlJFVU0uaW5pdC5kaXN0cmlidXRlZF90cmFjaW5nLG49ISFyLmVuYWJsZWQpLG4paWYodC5zYW1lT3JpZ2luKWU9ITA7ZWxzZSBpZihyLmFsbG93ZWRfb3JpZ2lucyBpbnN0YW5jZW9mIEFycmF5KWZvcih2YXIgbz0wO288ci5hbGxvd2VkX29yaWdpbnMubGVuZ3RoO28rKyl7dmFyIGk9cyhyLmFsbG93ZWRfb3JpZ2luc1tvXSk7aWYodC5ob3N0bmFtZT09PWkuaG9zdG5hbWUmJnQucHJvdG9jb2w9PT1pLnByb3RvY29sJiZ0LnBvcnQ9PT1pLnBvcnQpe2U9ITA7YnJlYWt9fXJldHVybiBuJiZlfXZhciBhPXQoMjMpLHM9dCgxNyk7ZS5leHBvcnRzPXtnZW5lcmF0ZVRyYWNlUGF5bG9hZDpyLHNob3VsZEdlbmVyYXRlVHJhY2U6aX19LHt9XSwxNjpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcy5wYXJhbXMsbj10aGlzLm1ldHJpY3M7aWYoIXRoaXMuZW5kZWQpe3RoaXMuZW5kZWQ9ITA7Zm9yKHZhciByPTA7cjxwO3IrKyl0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZFtyXSx0aGlzLmxpc3RlbmVyLCExKTtlLmFib3J0ZWR8fChuLmR1cmF0aW9uPWEubm93KCktdGhpcy5zdGFydFRpbWUsdGhpcy5sb2FkQ2FwdHVyZUNhbGxlZHx8NCE9PXQucmVhZHlTdGF0ZT9udWxsPT1lLnN0YXR1cyYmKGUuc3RhdHVzPTApOmkodGhpcyx0KSxuLmNiVGltZT10aGlzLmNiVGltZSx1LmVtaXQoInhoci1kb25lIixbdF0sdCkscygieGhyIixbZSxuLHRoaXMuc3RhcnRUaW1lXSkpfX1mdW5jdGlvbiBvKHQsZSl7dmFyIG49YyhlKSxyPXQucGFyYW1zO3IuaG9zdD1uLmhvc3RuYW1lKyI6IituLnBvcnQsci5wYXRobmFtZT1uLnBhdGhuYW1lLHQucGFyc2VkT3JpZ2luPWMoZSksdC5zYW1lT3JpZ2luPXQucGFyc2VkT3JpZ2luLnNhbWVPcmlnaW59ZnVuY3Rpb24gaSh0LGUpe3QucGFyYW1zLnN0YXR1cz1lLnN0YXR1czt2YXIgbj12KGUsdC5sYXN0U2l6ZSk7aWYobiYmKHQubWV0cmljcy5yeFNpemU9biksdC5zYW1lT3JpZ2luKXt2YXIgcj1lLmdldFJlc3BvbnNlSGVhZGVyKCJYLU5ld1JlbGljLUFwcC1EYXRhIik7ciYmKHQucGFyYW1zLmNhdD1yLnNwbGl0KCIsICIpLnBvcCgpKX10LmxvYWRDYXB0dXJlQ2FsbGVkPSEwfXZhciBhPXQoImxvYWRlciIpO2lmKGEueGhyV3JhcHBhYmxlKXt2YXIgcz10KCJoYW5kbGUiKSxjPXQoMTcpLGY9dCgxNSkuZ2VuZXJhdGVUcmFjZVBheWxvYWQsdT10KCJlZSIpLGQ9WyJsb2FkIiwiZXJyb3IiLCJhYm9ydCIsInRpbWVvdXQiXSxwPWQubGVuZ3RoLGw9dCgiaWQiKSxoPXQoMjEpLG09dCgyMCksdj10KDE4KSx3PXdpbmRvdy5YTUxIdHRwUmVxdWVzdDthLmZlYXR1cmVzLnhocj0hMCx0KDE0KSx0KDcpLHUub24oIm5ldy14aHIiLGZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7ZS50b3RhbENicz0wLGUuY2FsbGVkPTAsZS5jYlRpbWU9MCxlLmVuZD1yLGUuZW5kZWQ9ITEsZS54aHJHdWlkcz17fSxlLmxhc3RTaXplPW51bGwsZS5sb2FkQ2FwdHVyZUNhbGxlZD0hMSx0LmFkZEV2ZW50TGlzdGVuZXIoImxvYWQiLGZ1bmN0aW9uKG4pe2koZSx0KX0sITEpLGgmJihoPjM0fHxoPDEwKXx8d2luZG93Lm9wZXJhfHx0LmFkZEV2ZW50TGlzdGVuZXIoInByb2dyZXNzIixmdW5jdGlvbih0KXtlLmxhc3RTaXplPXQubG9hZGVkfSwhMSl9KSx1Lm9uKCJvcGVuLXhoci1zdGFydCIsZnVuY3Rpb24odCl7dGhpcy5wYXJhbXM9e21ldGhvZDp0WzBdfSxvKHRoaXMsdFsxXSksdGhpcy5tZXRyaWNzPXt9fSksdS5vbigib3Blbi14aHItZW5kIixmdW5jdGlvbih0LGUpeyJsb2FkZXJfY29uZmlnImluIE5SRVVNJiYieHBpZCJpbiBOUkVVTS5sb2FkZXJfY29uZmlnJiZ0aGlzLnNhbWVPcmlnaW4mJmUuc2V0UmVxdWVzdEhlYWRlcigiWC1OZXdSZWxpYy1JRCIsTlJFVU0ubG9hZGVyX2NvbmZpZy54cGlkKTt2YXIgbj1mKHRoaXMucGFyc2VkT3JpZ2luKTtuJiZuLmhlYWRlciYmKGUuc2V0UmVxdWVzdEhlYWRlcigibmV3cmVsaWMiLG4uaGVhZGVyKSx0aGlzLmR0PW4pfSksdS5vbigic2VuZC14aHItc3RhcnQiLGZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5tZXRyaWNzLHI9dFswXSxvPXRoaXM7aWYobiYmcil7dmFyIGk9bShyKTtpJiYobi50eFNpemU9aSl9dGhpcy5zdGFydFRpbWU9YS5ub3coKSx0aGlzLmxpc3RlbmVyPWZ1bmN0aW9uKHQpe3RyeXsiYWJvcnQiIT09dC50eXBlfHxvLmxvYWRDYXB0dXJlQ2FsbGVkfHwoby5wYXJhbXMuYWJvcnRlZD0hMCksKCJsb2FkIiE9PXQudHlwZXx8by5jYWxsZWQ9PT1vLnRvdGFsQ2JzJiYoby5vbmxvYWRDYWxsZWR8fCJmdW5jdGlvbiIhPXR5cGVvZiBlLm9ubG9hZCkpJiZvLmVuZChlKX1jYXRjaChuKXt0cnl7dS5lbWl0KCJpbnRlcm5hbC1lcnJvciIsW25dKX1jYXRjaChyKXt9fX07Zm9yKHZhciBzPTA7czxwO3MrKyllLmFkZEV2ZW50TGlzdGVuZXIoZFtzXSx0aGlzLmxpc3RlbmVyLCExKX0pLHUub24oInhoci1jYi10aW1lIixmdW5jdGlvbih0LGUsbil7dGhpcy5jYlRpbWUrPXQsZT90aGlzLm9ubG9hZENhbGxlZD0hMDp0aGlzLmNhbGxlZCs9MSx0aGlzLmNhbGxlZCE9PXRoaXMudG90YWxDYnN8fCF0aGlzLm9ubG9hZENhbGxlZCYmImZ1bmN0aW9uIj09dHlwZW9mIG4ub25sb2FkfHx0aGlzLmVuZChuKX0pLHUub24oInhoci1sb2FkLWFkZGVkIixmdW5jdGlvbih0LGUpe3ZhciBuPSIiK2wodCkrISFlO3RoaXMueGhyR3VpZHMmJiF0aGlzLnhockd1aWRzW25dJiYodGhpcy54aHJHdWlkc1tuXT0hMCx0aGlzLnRvdGFsQ2JzKz0xKX0pLHUub24oInhoci1sb2FkLXJlbW92ZWQiLGZ1bmN0aW9uKHQsZSl7dmFyIG49IiIrbCh0KSshIWU7dGhpcy54aHJHdWlkcyYmdGhpcy54aHJHdWlkc1tuXSYmKGRlbGV0ZSB0aGlzLnhockd1aWRzW25dLHRoaXMudG90YWxDYnMtPTEpfSksdS5vbigiYWRkRXZlbnRMaXN0ZW5lci1lbmQiLGZ1bmN0aW9uKHQsZSl7ZSBpbnN0YW5jZW9mIHcmJiJsb2FkIj09PXRbMF0mJnUuZW1pdCgieGhyLWxvYWQtYWRkZWQiLFt0WzFdLHRbMl1dLGUpfSksdS5vbigicmVtb3ZlRXZlbnRMaXN0ZW5lci1lbmQiLGZ1bmN0aW9uKHQsZSl7ZSBpbnN0YW5jZW9mIHcmJiJsb2FkIj09PXRbMF0mJnUuZW1pdCgieGhyLWxvYWQtcmVtb3ZlZCIsW3RbMV0sdFsyXV0sZSl9KSx1Lm9uKCJmbi1zdGFydCIsZnVuY3Rpb24odCxlLG4pe2UgaW5zdGFuY2VvZiB3JiYoIm9ubG9hZCI9PT1uJiYodGhpcy5vbmxvYWQ9ITApLCgibG9hZCI9PT0odFswXSYmdFswXS50eXBlKXx8dGhpcy5vbmxvYWQpJiYodGhpcy54aHJDYlN0YXJ0PWEubm93KCkpKX0pLHUub24oImZuLWVuZCIsZnVuY3Rpb24odCxlKXt0aGlzLnhockNiU3RhcnQmJnUuZW1pdCgieGhyLWNiLXRpbWUiLFthLm5vdygpLXRoaXMueGhyQ2JTdGFydCx0aGlzLm9ubG9hZCxlXSxlKX0pLHUub24oImZldGNoLWJlZm9yZS1zdGFydCIsZnVuY3Rpb24odCl7dmFyIGUsbj10WzFdfHx7fTsic3RyaW5nIj09dHlwZW9mIHRbMF0/ZT10WzBdOnRbMF0mJnRbMF0udXJsJiYoZT10WzBdLnVybCksZSYmKHRoaXMucGFyc2VkT3JpZ2luPWMoZSksdGhpcy5zYW1lT3JpZ2luPXRoaXMucGFyc2VkT3JpZ2luLnNhbWVPcmlnaW4pO3ZhciByPWYodGhpcy5wYXJzZWRPcmlnaW4pO2lmKHImJnIuaGVhZGVyKXt2YXIgbz1yLmhlYWRlcjtpZigic3RyaW5nIj09dHlwZW9mIHRbMF0pe3ZhciBpPXt9O2Zvcih2YXIgYSBpbiBuKWlbYV09blthXTtpLmhlYWRlcnM9bmV3IEhlYWRlcnMobi5oZWFkZXJzfHx7fSksaS5oZWFkZXJzLnNldCgibmV3cmVsaWMiLG8pLHRoaXMuZHQ9cix0Lmxlbmd0aD4xP3RbMV09aTp0LnB1c2goaSl9ZWxzZSB0WzBdJiZ0WzBdLmhlYWRlcnMmJih0WzBdLmhlYWRlcnMuYXBwZW5kKCJuZXdyZWxpYyIsbyksdGhpcy5kdD1yKX19KX19LHt9XSwxNzpbZnVuY3Rpb24odCxlLG4pe3ZhciByPXt9O2UuZXhwb3J0cz1mdW5jdGlvbih0KXtpZih0IGluIHIpcmV0dXJuIHJbdF07dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpLG49d2luZG93LmxvY2F0aW9uLG89e307ZS5ocmVmPXQsby5wb3J0PWUucG9ydDt2YXIgaT1lLmhyZWYuc3BsaXQoIjovLyIpOyFvLnBvcnQmJmlbMV0mJihvLnBvcnQ9aVsxXS5zcGxpdCgiLyIpWzBdLnNwbGl0KCJAIikucG9wKCkuc3BsaXQoIjoiKVsxXSksby5wb3J0JiYiMCIhPT1vLnBvcnR8fChvLnBvcnQ9Imh0dHBzIj09PWlbMF0/IjQ0MyI6IjgwIiksby5ob3N0bmFtZT1lLmhvc3RuYW1lfHxuLmhvc3RuYW1lLG8ucGF0aG5hbWU9ZS5wYXRobmFtZSxvLnByb3RvY29sPWlbMF0sIi8iIT09by5wYXRobmFtZS5jaGFyQXQoMCkmJihvLnBhdGhuYW1lPSIvIitvLnBhdGhuYW1lKTt2YXIgYT0hZS5wcm90b2NvbHx8IjoiPT09ZS5wcm90b2NvbHx8ZS5wcm90b2NvbD09PW4ucHJvdG9jb2wscz1lLmhvc3RuYW1lPT09ZG9jdW1lbnQuZG9tYWluJiZlLnBvcnQ9PT1uLnBvcnQ7cmV0dXJuIG8uc2FtZU9yaWdpbj1hJiYoIWUuaG9zdG5hbWV8fHMpLCIvIj09PW8ucGF0aG5hbWUmJihyW3RdPW8pLG99fSx7fV0sMTg6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSl7dmFyIG49dC5yZXNwb25zZVR5cGU7cmV0dXJuImpzb24iPT09biYmbnVsbCE9PWU/ZToiYXJyYXlidWZmZXIiPT09bnx8ImJsb2IiPT09bnx8Impzb24iPT09bj9vKHQucmVzcG9uc2UpOiJ0ZXh0Ij09PW58fCIiPT09bnx8dm9pZCAwPT09bj9vKHQucmVzcG9uc2VUZXh0KTp2b2lkIDB9dmFyIG89dCgyMCk7ZS5leHBvcnRzPXJ9LHt9XSwxOTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIoKXt9ZnVuY3Rpb24gbyh0LGUsbil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGkodCxbZi5ub3coKV0uY29uY2F0KHMoYXJndW1lbnRzKSksZT9udWxsOnRoaXMsbiksZT92b2lkIDA6dGhpc319dmFyIGk9dCgiaGFuZGxlIiksYT10KDI1KSxzPXQoMjYpLGM9dCgiZWUiKS5nZXQoInRyYWNlciIpLGY9dCgibG9hZGVyIiksdT1OUkVVTTsidW5kZWZpbmVkIj09dHlwZW9mIHdpbmRvdy5uZXdyZWxpYyYmKG5ld3JlbGljPXUpO3ZhciBkPVsic2V0UGFnZVZpZXdOYW1lIiwic2V0Q3VzdG9tQXR0cmlidXRlIiwic2V0RXJyb3JIYW5kbGVyIiwiZmluaXNoZWQiLCJhZGRUb1RyYWNlIiwiaW5saW5lSGl0IiwiYWRkUmVsZWFzZSJdLHA9ImFwaS0iLGw9cCsiaXhuLSI7YShkLGZ1bmN0aW9uKHQsZSl7dVtlXT1vKHArZSwhMCwiYXBpIil9KSx1LmFkZFBhZ2VBY3Rpb249byhwKyJhZGRQYWdlQWN0aW9uIiwhMCksdS5zZXRDdXJyZW50Um91dGVOYW1lPW8ocCsicm91dGVOYW1lIiwhMCksZS5leHBvcnRzPW5ld3JlbGljLHUuaW50ZXJhY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHIpLmdldCgpfTt2YXIgaD1yLnByb3RvdHlwZT17Y3JlYXRlVHJhY2VyOmZ1bmN0aW9uKHQsZSl7dmFyIG49e30scj10aGlzLG89ImZ1bmN0aW9uIj09dHlwZW9mIGU7cmV0dXJuIGkobCsidHJhY2VyIixbZi5ub3coKSx0LG5dLHIpLGZ1bmN0aW9uKCl7aWYoYy5lbWl0KChvPyIiOiJuby0iKSsiZm4tc3RhcnQiLFtmLm5vdygpLHIsb10sbiksbyl0cnl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKHQpe3Rocm93IGMuZW1pdCgiZm4tZXJyIixbYXJndW1lbnRzLHRoaXMsdF0sbiksdH1maW5hbGx5e2MuZW1pdCgiZm4tZW5kIixbZi5ub3coKV0sbil9fX19O2EoImFjdGlvblRleHQsc2V0TmFtZSxzZXRBdHRyaWJ1dGUsc2F2ZSxpZ25vcmUsb25FbmQsZ2V0Q29udGV4dCxlbmQsZ2V0Ii5zcGxpdCgiLCIpLGZ1bmN0aW9uKHQsZSl7aFtlXT1vKGwrZSl9KSxuZXdyZWxpYy5ub3RpY2VFcnJvcj1mdW5jdGlvbih0LGUpeyJzdHJpbmciPT10eXBlb2YgdCYmKHQ9bmV3IEVycm9yKHQpKSxpKCJlcnIiLFt0LGYubm93KCksITEsZV0pfX0se31dLDIwOltmdW5jdGlvbih0LGUsbil7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKCJzdHJpbmciPT10eXBlb2YgdCYmdC5sZW5ndGgpcmV0dXJuIHQubGVuZ3RoO2lmKCJvYmplY3QiPT10eXBlb2YgdCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiZ0LmJ5dGVMZW5ndGgpcmV0dXJuIHQuYnl0ZUxlbmd0aDtpZigidW5kZWZpbmVkIiE9dHlwZW9mIEJsb2ImJnQgaW5zdGFuY2VvZiBCbG9iJiZ0LnNpemUpcmV0dXJuIHQuc2l6ZTtpZighKCJ1bmRlZmluZWQiIT10eXBlb2YgRm9ybURhdGEmJnQgaW5zdGFuY2VvZiBGb3JtRGF0YSkpdHJ5e3JldHVybiBKU09OLnN0cmluZ2lmeSh0KS5sZW5ndGh9Y2F0Y2goZSl7cmV0dXJufX19fSx7fV0sMjE6W2Z1bmN0aW9uKHQsZSxuKXt2YXIgcj0wLG89bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRmlyZWZveFtcL1xzXShcZCtcLlxkKykvKTtvJiYocj0rb1sxXSksZS5leHBvcnRzPXJ9LHt9XSwyMjpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlKXt2YXIgbj10LmdldEVudHJpZXMoKTtuLmZvckVhY2goZnVuY3Rpb24odCl7ImZpcnN0LXBhaW50Ij09PXQubmFtZT9jKCJ0aW1pbmciLFsiZnAiLE1hdGguZmxvb3IodC5zdGFydFRpbWUpXSk6ImZpcnN0LWNvbnRlbnRmdWwtcGFpbnQiPT09dC5uYW1lJiZjKCJ0aW1pbmciLFsiZmNwIixNYXRoLmZsb29yKHQuc3RhcnRUaW1lKV0pfSl9ZnVuY3Rpb24gbyh0LGUpe3ZhciBuPXQuZ2V0RW50cmllcygpO24ubGVuZ3RoPjAmJmMoImxjcCIsW25bbi5sZW5ndGgtMV1dKX1mdW5jdGlvbiBpKHQpe2lmKHQgaW5zdGFuY2VvZiB1JiYhcCl7dmFyIGUsbj1NYXRoLnJvdW5kKHQudGltZVN0YW1wKTtlPW4+MWUxMj9EYXRlLm5vdygpLW46Zi5ub3coKS1uLHA9ITAsYygidGltaW5nIixbImZpIixuLHt0eXBlOnQudHlwZSxmaWQ6ZX1dKX19aWYoISgiaW5pdCJpbiBOUkVVTSYmInBhZ2Vfdmlld190aW1pbmciaW4gTlJFVU0uaW5pdCYmImVuYWJsZWQiaW4gTlJFVU0uaW5pdC5wYWdlX3ZpZXdfdGltaW5nJiZOUkVVTS5pbml0LnBhZ2Vfdmlld190aW1pbmcuZW5hYmxlZD09PSExKSl7dmFyIGEscyxjPXQoImhhbmRsZSIpLGY9dCgibG9hZGVyIiksdT1OUkVVTS5vLkVWO2lmKCJQZXJmb3JtYW5jZU9ic2VydmVyImluIHdpbmRvdyYmImZ1bmN0aW9uIj09dHlwZW9mIHdpbmRvdy5QZXJmb3JtYW5jZU9ic2VydmVyKXthPW5ldyBQZXJmb3JtYW5jZU9ic2VydmVyKHIpLHM9bmV3IFBlcmZvcm1hbmNlT2JzZXJ2ZXIobyk7dHJ5e2Eub2JzZXJ2ZSh7ZW50cnlUeXBlczpbInBhaW50Il19KSxzLm9ic2VydmUoe2VudHJ5VHlwZXM6WyJsYXJnZXN0LWNvbnRlbnRmdWwtcGFpbnQiXX0pfWNhdGNoKGQpe319aWYoImFkZEV2ZW50TGlzdGVuZXIiaW4gZG9jdW1lbnQpe3ZhciBwPSExLGw9WyJjbGljayIsImtleWRvd24iLCJtb3VzZWRvd24iLCJwb2ludGVyZG93biIsInRvdWNoc3RhcnQiXTtsLmZvckVhY2goZnVuY3Rpb24odCl7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0LGksITEpfSl9fX0se31dLDIzOltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcigpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZT8xNSZlW24rK106MTYqTWF0aC5yYW5kb20oKXwwfXZhciBlPW51bGwsbj0wLHI9d2luZG93LmNyeXB0b3x8d2luZG93Lm1zQ3J5cHRvO3ImJnIuZ2V0UmFuZG9tVmFsdWVzJiYoZT1yLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgzMSkpKTtmb3IodmFyIG8saT0ieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4IixhPSIiLHM9MDtzPGkubGVuZ3RoO3MrKylvPWlbc10sIngiPT09bz9hKz10KCkudG9TdHJpbmcoMTYpOiJ5Ij09PW8/KG89MyZ0KCl8OCxhKz1vLnRvU3RyaW5nKDE2KSk6YSs9bztyZXR1cm4gYX1mdW5jdGlvbiBvKCl7ZnVuY3Rpb24gdCgpe3JldHVybiBlPzE1JmVbbisrXToxNipNYXRoLnJhbmRvbSgpfDB9dmFyIGU9bnVsbCxuPTAscj13aW5kb3cuY3J5cHRvfHx3aW5kb3cubXNDcnlwdG87ciYmci5nZXRSYW5kb21WYWx1ZXMmJlVpbnQ4QXJyYXkmJihlPXIuZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDMxKSkpO2Zvcih2YXIgbz1bXSxpPTA7aTwxNjtpKyspby5wdXNoKHQoKS50b1N0cmluZygxNikpO3JldHVybiBvLmpvaW4oIiIpfWUuZXhwb3J0cz17Z2VuZXJhdGVVdWlkOnIsZ2VuZXJhdGVDYXRJZDpvfX0se31dLDI0OltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0LGUpe2lmKCFvKXJldHVybiExO2lmKHQhPT1vKXJldHVybiExO2lmKCFlKXJldHVybiEwO2lmKCFpKXJldHVybiExO2Zvcih2YXIgbj1pLnNwbGl0KCIuIikscj1lLnNwbGl0KCIuIiksYT0wO2E8ci5sZW5ndGg7YSsrKWlmKHJbYV0hPT1uW2FdKXJldHVybiExO3JldHVybiEwfXZhciBvPW51bGwsaT1udWxsLGE9L1ZlcnNpb25cLyhcUyspXHMrU2FmYXJpLztpZihuYXZpZ2F0b3IudXNlckFnZW50KXt2YXIgcz1uYXZpZ2F0b3IudXNlckFnZW50LGM9cy5tYXRjaChhKTtjJiZzLmluZGV4T2YoIkNocm9tZSIpPT09LTEmJnMuaW5kZXhPZigiQ2hyb21pdW0iKT09PS0xJiYobz0iU2FmYXJpIixpPWNbMV0pfWUuZXhwb3J0cz17YWdlbnQ6byx2ZXJzaW9uOmksbWF0Y2g6cn19LHt9XSwyNTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlKXt2YXIgbj1bXSxyPSIiLGk9MDtmb3IociBpbiB0KW8uY2FsbCh0LHIpJiYobltpXT1lKHIsdFtyXSksaSs9MSk7cmV0dXJuIG59dmFyIG89T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtlLmV4cG9ydHM9cn0se31dLDI2OltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0LGUsbil7ZXx8KGU9MCksInVuZGVmaW5lZCI9PXR5cGVvZiBuJiYobj10P3QubGVuZ3RoOjApO2Zvcih2YXIgcj0tMSxvPW4tZXx8MCxpPUFycmF5KG88MD8wOm8pOysrcjxvOylpW3JdPXRbZStyXTtyZXR1cm4gaX1lLmV4cG9ydHM9cn0se31dLDI3OltmdW5jdGlvbih0LGUsbil7ZS5leHBvcnRzPXtleGlzdHM6InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cucGVyZm9ybWFuY2UmJndpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcmJiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93LnBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnR9fSx7fV0sZWU6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKCl7fWZ1bmN0aW9uIG8odCl7ZnVuY3Rpb24gZSh0KXtyZXR1cm4gdCYmdCBpbnN0YW5jZW9mIHI/dDp0P2ModCxzLGkpOmkoKX1mdW5jdGlvbiBuKG4scixvLGkpe2lmKCFwLmFib3J0ZWR8fGkpe3QmJnQobixyLG8pO2Zvcih2YXIgYT1lKG8pLHM9bShuKSxjPXMubGVuZ3RoLGY9MDtmPGM7ZisrKXNbZl0uYXBwbHkoYSxyKTt2YXIgZD11W3lbbl1dO3JldHVybiBkJiZkLnB1c2goW3gsbixyLGFdKSxhfX1mdW5jdGlvbiBsKHQsZSl7Z1t0XT1tKHQpLmNvbmNhdChlKX1mdW5jdGlvbiBoKHQsZSl7dmFyIG49Z1t0XTtpZihuKWZvcih2YXIgcj0wO3I8bi5sZW5ndGg7cisrKW5bcl09PT1lJiZuLnNwbGljZShyLDEpfWZ1bmN0aW9uIG0odCl7cmV0dXJuIGdbdF18fFtdfWZ1bmN0aW9uIHYodCl7cmV0dXJuIGRbdF09ZFt0XXx8byhuKX1mdW5jdGlvbiB3KHQsZSl7Zih0LGZ1bmN0aW9uKHQsbil7ZT1lfHwiZmVhdHVyZSIseVtuXT1lLGUgaW4gdXx8KHVbZV09W10pfSl9dmFyIGc9e30seT17fSx4PXtvbjpsLGFkZEV2ZW50TGlzdGVuZXI6bCxyZW1vdmVFdmVudExpc3RlbmVyOmgsZW1pdDpuLGdldDp2LGxpc3RlbmVyczptLGNvbnRleHQ6ZSxidWZmZXI6dyxhYm9ydDphLGFib3J0ZWQ6ITF9O3JldHVybiB4fWZ1bmN0aW9uIGkoKXtyZXR1cm4gbmV3IHJ9ZnVuY3Rpb24gYSgpeyh1LmFwaXx8dS5mZWF0dXJlKSYmKHAuYWJvcnRlZD0hMCx1PXAuYmFja2xvZz17fSl9dmFyIHM9Im5yQGNvbnRleHQiLGM9dCgiZ29zIiksZj10KDI1KSx1PXt9LGQ9e30scD1lLmV4cG9ydHM9bygpO3AuYmFja2xvZz11fSx7fV0sZ29zOltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0LGUsbil7aWYoby5jYWxsKHQsZSkpcmV0dXJuIHRbZV07dmFyIHI9bigpO2lmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmtleXMpdHJ5e3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpyLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6ITF9KSxyfWNhdGNoKGkpe31yZXR1cm4gdFtlXT1yLHJ9dmFyIG89T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtlLmV4cG9ydHM9cn0se31dLGhhbmRsZTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlLG4scil7by5idWZmZXIoW3RdLHIpLG8uZW1pdCh0LGUsbil9dmFyIG89dCgiZWUiKS5nZXQoImhhbmRsZSIpO2UuZXhwb3J0cz1yLHIuZWU9b30se31dLGlkOltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXt2YXIgZT10eXBlb2YgdDtyZXR1cm4hdHx8Im9iamVjdCIhPT1lJiYiZnVuY3Rpb24iIT09ZT8tMTp0PT09d2luZG93PzA6YSh0LGksZnVuY3Rpb24oKXtyZXR1cm4gbysrfSl9dmFyIG89MSxpPSJuckBpZCIsYT10KCJnb3MiKTtlLmV4cG9ydHM9cn0se31dLGxvYWRlcjpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIoKXtpZighRSsrKXt2YXIgdD1iLmluZm89TlJFVU0uaW5mbyxlPWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNjcmlwdCIpWzBdO2lmKHNldFRpbWVvdXQodS5hYm9ydCwzZTQpLCEodCYmdC5saWNlbnNlS2V5JiZ0LmFwcGxpY2F0aW9uSUQmJmUpKXJldHVybiB1LmFib3J0KCk7Zih5LGZ1bmN0aW9uKGUsbil7dFtlXXx8KHRbZV09bil9KSxjKCJtYXJrIixbIm9ubG9hZCIsYSgpK2Iub2Zmc2V0XSxudWxsLCJhcGkiKTt2YXIgbj1sLmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpO24uc3JjPSJodHRwczovLyIrdC5hZ2VudCxlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG4sZSl9fWZ1bmN0aW9uIG8oKXsiY29tcGxldGUiPT09bC5yZWFkeVN0YXRlJiZpKCl9ZnVuY3Rpb24gaSgpe2MoIm1hcmsiLFsiZG9tQ29udGVudCIsYSgpK2Iub2Zmc2V0XSxudWxsLCJhcGkiKX1mdW5jdGlvbiBhKCl7cmV0dXJuIE8uZXhpc3RzJiZwZXJmb3JtYW5jZS5ub3c/TWF0aC5yb3VuZChwZXJmb3JtYW5jZS5ub3coKSk6KHM9TWF0aC5tYXgoKG5ldyBEYXRlKS5nZXRUaW1lKCkscykpLWIub2Zmc2V0fXZhciBzPShuZXcgRGF0ZSkuZ2V0VGltZSgpLGM9dCgiaGFuZGxlIiksZj10KDI1KSx1PXQoImVlIiksZD10KDI0KSxwPXdpbmRvdyxsPXAuZG9jdW1lbnQsaD0iYWRkRXZlbnRMaXN0ZW5lciIsbT0iYXR0YWNoRXZlbnQiLHY9cC5YTUxIdHRwUmVxdWVzdCx3PXYmJnYucHJvdG90eXBlO05SRVVNLm89e1NUOnNldFRpbWVvdXQsU0k6cC5zZXRJbW1lZGlhdGUsQ1Q6Y2xlYXJUaW1lb3V0LFhIUjp2LFJFUTpwLlJlcXVlc3QsRVY6cC5FdmVudCxQUjpwLlByb21pc2UsTU86cC5NdXRhdGlvbk9ic2VydmVyfTt2YXIgZz0iIitsb2NhdGlvbix5PXtiZWFjb246ImJhbS5uci1kYXRhLm5ldCIsZXJyb3JCZWFjb246ImJhbS5uci1kYXRhLm5ldCIsYWdlbnQ6ImpzLWFnZW50Lm5ld3JlbGljLmNvbS9uci1zcGEtMTE2OS5taW4uanMifSx4PXYmJncmJndbaF0mJiEvQ3JpT1MvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksYj1lLmV4cG9ydHM9e29mZnNldDpzLG5vdzphLG9yaWdpbjpnLGZlYXR1cmVzOnt9LHhocldyYXBwYWJsZTp4LHVzZXJBZ2VudDpkfTt0KDE5KSx0KDIyKSxsW2hdPyhsW2hdKCJET01Db250ZW50TG9hZGVkIixpLCExKSxwW2hdKCJsb2FkIixyLCExKSk6KGxbbV0oIm9ucmVhZHlzdGF0ZWNoYW5nZSIsbykscFttXSgib25sb2FkIixyKSksYygibWFyayIsWyJmaXJzdGJ5dGUiLHNdLG51bGwsImFwaSIpO3ZhciBFPTAsTz10KDI3KX0se31dLCJ3cmFwLWZ1bmN0aW9uIjpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7cmV0dXJuISh0JiZ0IGluc3RhbmNlb2YgRnVuY3Rpb24mJnQuYXBwbHkmJiF0W2FdKX12YXIgbz10KCJlZSIpLGk9dCgyNiksYT0ibnJAb3JpZ2luYWwiLHM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxjPSExO2UuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4odCxlLG4sbyl7ZnVuY3Rpb24gbnJXcmFwcGVyKCl7dmFyIHIsYSxzLGM7dHJ5e2E9dGhpcyxyPWkoYXJndW1lbnRzKSxzPSJmdW5jdGlvbiI9PXR5cGVvZiBuP24ocixhKTpufHx7fX1jYXRjaChmKXtwKFtmLCIiLFtyLGEsb10sc10pfXUoZSsic3RhcnQiLFtyLGEsb10scyk7dHJ5e3JldHVybiBjPXQuYXBwbHkoYSxyKX1jYXRjaChkKXt0aHJvdyB1KGUrImVyciIsW3IsYSxkXSxzKSxkfWZpbmFsbHl7dShlKyJlbmQiLFtyLGEsY10scyl9fXJldHVybiByKHQpP3Q6KGV8fChlPSIiKSxucldyYXBwZXJbYV09dCxkKHQsbnJXcmFwcGVyKSxucldyYXBwZXIpfWZ1bmN0aW9uIGYodCxlLG8saSl7b3x8KG89IiIpO3ZhciBhLHMsYyxmPSItIj09PW8uY2hhckF0KDApO2ZvcihjPTA7YzxlLmxlbmd0aDtjKyspcz1lW2NdLGE9dFtzXSxyKGEpfHwodFtzXT1uKGEsZj9zK286byxpLHMpKX1mdW5jdGlvbiB1KG4scixvKXtpZighY3x8ZSl7dmFyIGk9YztjPSEwO3RyeXt0LmVtaXQobixyLG8sZSl9Y2F0Y2goYSl7cChbYSxuLHIsb10pfWM9aX19ZnVuY3Rpb24gZCh0LGUpe2lmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmtleXMpdHJ5e3ZhciBuPU9iamVjdC5rZXlzKHQpO3JldHVybiBuLmZvckVhY2goZnVuY3Rpb24obil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRbbl19LHNldDpmdW5jdGlvbihlKXtyZXR1cm4gdFtuXT1lLGV9fSl9KSxlfWNhdGNoKHIpe3AoW3JdKX1mb3IodmFyIG8gaW4gdClzLmNhbGwodCxvKSYmKGVbb109dFtvXSk7cmV0dXJuIGV9ZnVuY3Rpb24gcChlKXt0cnl7dC5lbWl0KCJpbnRlcm5hbC1lcnJvciIsZSl9Y2F0Y2gobil7fX1yZXR1cm4gdHx8KHQ9byksbi5pblBsYWNlPWYsbi5mbGFnPWEsbn19LHt9XX0se30sWyJsb2FkZXIiLDIsMTYsNSwzLDRdKTsKICAgICAgICAgIDtOUkVVTS5sb2FkZXJfY29uZmlnPXthY2NvdW50SUQ6IjM5Mjg0Iix0cnVzdEtleToiMzkyODQiLGFnZW50SUQ6Ijc0NDc0NjgiLGxpY2Vuc2VLZXk6IjY4OWQ1YjQ1NjIiLGFwcGxpY2F0aW9uSUQ6IjIwMTEyMjQifQogICAgICAgICAgO05SRVVNLmluZm89e2JlYWNvbjoiYmFtLm5yLWRhdGEubmV0IixlcnJvckJlYWNvbjoiYmFtLm5yLWRhdGEubmV0IixsaWNlbnNlS2V5OiI2ODlkNWI0NTYyIixhcHBsaWNhdGlvbklEOiIyMDExMjI0IixzYToxfQogICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2YudmltZW9jZG4uY29tL3N0eWxlcy9jc3Nfb3B0L2dsb2JhbC9pY29uX2ZvbnRzLm1pbi5jc3M/ODU5ODcwMjhjMzlhMDMwYjQ3ODNhMTAwZjIwZjhjNzg0ODZmMzg2NSI+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2YudmltZW9jZG4uY29tL3N0eWxlcy9jc3Nfb3B0L2V4Y2VwdGlvbl9jb21iaW5lZC5taW4uY3NzP2VkNWQxZGU1Ij4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9mLnZpbWVvY2RuLmNvbS9zdHlsZXMvY3NzX29wdC90b3BuYXZfY2FydF9idXR0b25fY29tYmluZWQubWluLmNzcz9hMjBhNzU2NiI+CgoKCiAgICAgICAgPHNjcmlwdD4KICAgICAgICAKICAgICAgICB2YXIgcGxheWVyQXNzZXRVcmxzID0geyJiYXJlYm9uZV9qcyI6Imh0dHBzOlwvXC9mLnZpbWVvY2RuLmNvbVwvcFwvMy4yNC43XC9qc1wvYmFyZWJvbmUuanMiLCJqcyI6Imh0dHBzOlwvXC9mLnZpbWVvY2RuLmNvbVwvcFwvMy4yNC43XC9qc1wvcGxheWVyLmpzIiwiY2hyb21lbGVzc19jc3MiOiJodHRwczpcL1wvZi52aW1lb2Nkbi5jb21cL3BcLzMuMjQuN1wvY3NzXC9jaHJvbWVsZXNzLmNzcyIsImNocm9tZWxlc3NfanMiOiJodHRwczpcL1wvZi52aW1lb2Nkbi5jb21cL3BcLzMuMjQuN1wvanNcL2Nocm9tZWxlc3MuanMiLCJjc3MiOiJodHRwczpcL1wvZi52aW1lb2Nkbi5jb21cL3BcLzMuMjQuN1wvY3NzXC9wbGF5ZXIuY3NzIiwicGxheWVyX3VybCI6InBsYXllci52aW1lby5jb20ifTsKCiAgICAgICAgdmFyIF9leHRlbmQgPSBmdW5jdGlvbigpe2Zvcih2YXIgcj1hcmd1bWVudHNbMF0sbj0xLGU9YXJndW1lbnRzLmxlbmd0aDtlPm47bisrKXt2YXIgdD1hcmd1bWVudHNbbl07Zm9yKHZhciBhIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShhKSYmKHJbYV09dFthXSl9cmV0dXJuIHJ9OwoKICAgICAgICAgICAgd2luZG93ID0gX2V4dGVuZCh3aW5kb3csIHsidmltZW9fZXNpIjp7ImNvbmZpZyI6eyJyb3V0ZSI6IlZpbWVvXFxDb250cm9sbGVyXFxDbGlwQ29udHJvbGxlcjptYWluIiwiY29udHJvbGxlciI6IlZpbWVvXFxDb250cm9sbGVyXFxDbGlwQ29udHJvbGxlciIsImF1dG9jb21wbGV0ZV9lbmFibGVkIjp0cnVlLCJvbnNpdGVfcmVmZXJyZXIiOmZhbHNlfX0sImFibGluY29sbl9jb25maWciOltdLCJ2aW1lbyI6eyJjb25maWciOnsiY2FydCI6eyJjYXJ0X2NvbnRlbnQiOnsic3RvY2siOnsic3RvcmUiOiJzdG9jayIsInZlcnNpb24iOjEsInF1YW50aXRpZXMiOltdLCJpdGVtcyI6W10sImF0dHJpYnV0ZXMiOltdLCJjdXJyZW5jeSI6IkJSTCIsIml0ZW1zX3NvcnRlZF9ieV9pbmRleCI6W10sIml0ZW1zX2NvdW50IjowfX19fX19KTsKPC9zY3JpcHQ+CgogICAgICAgICAgICAgICAgCiAgICA8c2NyaXB0PgogICAgICAgIHZhciBhYmxpbmNvbG5fY29uZmlnID0gYWJsaW5jb2xuX2NvbmZpZyB8fCB7fTsKICAgICAgICBhYmxpbmNvbG5fY29uZmlnLnRlc3RzID0geyJKUy5Ub3BOYXYuQ3JlYXRlIjp7ImlkIjo0NTIsIm5hbWUiOiJKUy5Ub3BOYXYuQ3JlYXRlIiwiYnVja2V0cyI6MTAwMCwiaW5wdXQiOiJ2dWlkIiwidXJsIjoiOmFsbCIsImV4cGVyaW1lbnRzIjpbeyJpZCI6MTIzNSwibmFtZSI6IiogTG9nZ2VkIG91dCBKb2luIE1vZGFsIiwiYnVja2V0cyI6MTAwLCJzdGF0ZSI6MywicHVibGlzaGVkX29uIjoiMjAyMC0wNi0xNSAxNjoxNzoxNSIsInBhdXNlZF9vbiI6IjAwMDAtMDAtMDAgMDA6MDA6MDAiLCJzdG9wcGVkX29uIjoiMjAyMC0xMC0xNSAwNjo1MzoyNSIsInBhcmFtZXRlcnMiOlt7ImlkIjoyMTUwLCJuYW1lIjoidG9wX25hdl9jcmVhdGUiLCJjaG9pY2UiOiJjb250cm9sIiwid2VpZ2h0IjoxfSx7ImlkIjoyMTUxLCJuYW1lIjoidG9wX25hdl9jcmVhdGUiLCJjaG9pY2UiOiJqb2luX3dpdGhvdXRfZGVzaWduIiwid2VpZ2h0IjoxfSx7ImlkIjoyMTUyLCJuYW1lIjoidG9wX25hdl9jcmVhdGUiLCJjaG9pY2UiOiJqb2luX3dpdGhfZGVzaWduIiwid2VpZ2h0IjoxfV0sInNlZ21lbnRzIjpbXX0seyJpZCI6MTMxMSwibmFtZSI6IiogKiBMb2dnZWQgb3V0IEpvaW4gTW9kYWwiLCJidWNrZXRzIjo5MDAsInN0YXRlIjozLCJwdWJsaXNoZWRfb24iOiIyMDIwLTA2LTIzIDE1OjAxOjUyIiwicGF1c2VkX29uIjoiMDAwMC0wMC0wMCAwMDowMDowMCIsInN0b3BwZWRfb24iOiIyMDIwLTEwLTE1IDA2OjUzOjM1IiwicGFyYW1ldGVycyI6W3siaWQiOjIyNzUsIm5hbWUiOiJ0b3BfbmF2X2NyZWF0ZSIsImNob2ljZSI6ImNvbnRyb2wiLCJ3ZWlnaHQiOjF9LHsiaWQiOjIyNzYsIm5hbWUiOiJ0b3BfbmF2X2NyZWF0ZSIsImNob2ljZSI6ImpvaW5fd2l0aG91dF9kZXNpZ24iLCJ3ZWlnaHQiOjF9LHsiaWQiOjIyNzcsIm5hbWUiOiJ0b3BfbmF2X2NyZWF0ZSIsImNob2ljZSI6ImpvaW5fd2l0aF9kZXNpZ24iLCJ3ZWlnaHQiOjF9XSwic2VnbWVudHMiOltdfV19LCJKUy5VcHNlbGwuUmV2aWV3Ijp7ImlkIjo0NDQsIm5hbWUiOiJKUy5VcHNlbGwuUmV2aWV3IiwiYnVja2V0cyI6MTAwMCwiaW5wdXQiOiJ2dWlkIiwidXJsIjoiXC8iLCJleHBlcmltZW50cyI6W119LCJUb3BOYXYuTmV3VmlkZW8uU2NyZWVuUmVjb3JkRm9yQWxsIjp7ImlkIjo1NDEsIm5hbWUiOiJUb3BOYXYuTmV3VmlkZW8uU2NyZWVuUmVjb3JkRm9yQWxsIiwiYnVja2V0cyI6MTAwMCwiaW5wdXQiOiJ2dWlkIiwidXJsIjoiXC8iLCJleHBlcmltZW50cyI6W3siaWQiOjE0MTgsIm5hbWUiOiJTaG93IHJlY29yZGVyIGxpbmsgZm9yIGFsbCIsImJ1Y2tldHMiOjEwMCwic3RhdGUiOjMsInB1Ymxpc2hlZF9vbiI6IjIwMjAtMTAtMDUgMTQ6MzA6NDAiLCJwYXVzZWRfb24iOiIwMDAwLTAwLTAwIDAwOjAwOjAwIiwic3RvcHBlZF9vbiI6IjIwMjAtMTAtMjEgMDM6Mjg6NDMiLCJwYXJhbWV0ZXJzIjpbeyJpZCI6MjQ3NywibmFtZSI6InNob3dfcmVjb3JkZXJfZm9yX2FsbCIsImNob2ljZSI6ImNvbnRyb2wiLCJ3ZWlnaHQiOjF9LHsiaWQiOjI0NzgsIm5hbWUiOiJzaG93X3JlY29yZGVyX2Zvcl9hbGwiLCJjaG9pY2UiOiJ2YXJpYW50X3NjcmVlbiIsIndlaWdodCI6MX1dLCJzZWdtZW50cyI6W119LHsiaWQiOjE0NTAsIm5hbWUiOiIqIFNob3cgcmVjb3JkZXIgbGluayBmb3IgYWxsIiwiYnVja2V0cyI6MCwic3RhdGUiOjMsInB1Ymxpc2hlZF9vbiI6IjIwMjAtMTAtMjIgMTc6MTc6MTEiLCJwYXVzZWRfb24iOiIyMDIwLTEwLTIyIDE3OjE3OjI3Iiwic3RvcHBlZF9vbiI6IjIwMjAtMTAtMjIgMTc6MTc6NDAiLCJwYXJhbWV0ZXJzIjpbeyJpZCI6MjU0MCwibmFtZSI6InNob3dfcmVjb3JkZXJfZm9yX2FsbCIsImNob2ljZSI6ImNvbnRyb2wiLCJ3ZWlnaHQiOjF9LHsiaWQiOjI1NDEsIm5hbWUiOiJzaG93X3JlY29yZGVyX2Zvcl9hbGwiLCJjaG9pY2UiOiJ2YXJpYW50X3NjcmVlbiIsIndlaWdodCI6MX0seyJpZCI6MjU0MiwibmFtZSI6InNob3dfcmVjb3JkZXJfZm9yX2FsbCIsImNob2ljZSI6InZhcmlhbnRfc2NyZWVuX2FuaW1hdGlvbiIsIndlaWdodCI6MX1dLCJzZWdtZW50cyI6W119LHsiaWQiOjE0NTMsIm5hbWUiOiIqICogU2hvdyByZWNvcmRlciBsaW5rIGZvciBhbGwiLCJidWNrZXRzIjo1MCwic3RhdGUiOjMsInB1Ymxpc2hlZF9vbiI6IjIwMjAtMTAtMjIgMTc6MzY6NDEiLCJwYXVzZWRfb24iOiIyMDIwLTEwLTI2IDE1OjA3OjI4Iiwic3RvcHBlZF9vbiI6IjIwMjAtMTAtMjYgMTU6MDc6NTYiLCJwYXJhbWV0ZXJzIjpbeyJpZCI6MjU0NywibmFtZSI6InNob3dfcmVjb3JkZXJfZm9yX2FsbCIsImNob2ljZSI6ImNvbnRyb2wiLCJ3ZWlnaHQiOjF9LHsiaWQiOjI1NDgsIm5hbWUiOiJzaG93X3JlY29yZGVyX2Zvcl9hbGwiLCJjaG9pY2UiOiJ2YXJpYW50X3NjcmVlbiIsIndlaWdodCI6MX0seyJpZCI6MjU0OSwibmFtZSI6InNob3dfcmVjb3JkZXJfZm9yX2FsbCIsImNob2ljZSI6InZhcmlhbnRfc2NyZWVuX2FuaW1hdGlvbiIsIndlaWdodCI6MX1dLCJzZWdtZW50cyI6W119LHsiaWQiOjE0NjAsIm5hbWUiOiIqICogKiBTaG93IHJlY29yZGVyIGxpbmsgZm9yIGFsbCIsImJ1Y2tldHMiOjEwMCwic3RhdGUiOjMsInB1Ymxpc2hlZF9vbiI6IjIwMjAtMTAtMjYgMTU6MDg6NTQiLCJwYXVzZWRfb24iOiIwMDAwLTAwLTAwIDAwOjAwOjAwIiwic3RvcHBlZF9vbiI6IjIwMjAtMTAtMjcgMTA6MDI6NTQiLCJwYXJhbWV0ZXJzIjpbeyJpZCI6MjU2MiwibmFtZSI6InNob3dfcmVjb3JkZXJfZm9yX2FsbCIsImNob2ljZSI6ImNvbnRyb2wiLCJ3ZWlnaHQiOjF9LHsiaWQiOjI1NjMsIm5hbWUiOiJzaG93X3JlY29yZGVyX2Zvcl9hbGwiLCJjaG9pY2UiOiJ2YXJpYW50X3NjcmVlbiIsIndlaWdodCI6MX0seyJpZCI6MjU2NCwibmFtZSI6InNob3dfcmVjb3JkZXJfZm9yX2FsbCIsImNob2ljZSI6InZhcmlhbnRfc2NyZWVuX2FuaW1hdGlvbiIsIndlaWdodCI6MX1dLCJzZWdtZW50cyI6W119LHsiaWQiOjE0NjIsIm5hbWUiOiIqICogKiAqIFNob3cgcmVjb3JkZXIgbGluayBmb3IgYWxsIiwiYnVja2V0cyI6MTAwMCwic3RhdGUiOjEsInB1Ymxpc2hlZF9vbiI6IjIwMjAtMTAtMjcgMTA6MDQ6MTAiLCJwYXVzZWRfb24iOiIwMDAwLTAwLTAwIDAwOjAwOjAwIiwic3RvcHBlZF9vbiI6IjAwMDAtMDAtMDAgMDA6MDA6MDAiLCJwYXJhbWV0ZXJzIjpbeyJpZCI6MjU2NywibmFtZSI6InNob3dfcmVjb3JkZXJfZm9yX2FsbCIsImNob2ljZSI6ImNvbnRyb2wiLCJ3ZWlnaHQiOjV9LHsiaWQiOjI1NjgsIm5hbWUiOiJzaG93X3JlY29yZGVyX2Zvcl9hbGwiLCJjaG9pY2UiOiJ2YXJpYW50X3NjcmVlbiIsIndlaWdodCI6OTB9LHsiaWQiOjI1NjksIm5hbWUiOiJzaG93X3JlY29yZGVyX2Zvcl9hbGwiLCJjaG9pY2UiOiJ2YXJpYW50X3NjcmVlbl9hbmltYXRpb24iLCJ3ZWlnaHQiOjV9XSwic2VnbWVudHMiOltdfV19LCJKUy5Ub3BOYXYuTGl2ZSI6eyJpZCI6NTY3LCJuYW1lIjoiSlMuVG9wTmF2LkxpdmUiLCJidWNrZXRzIjoxMDAwLCJpbnB1dCI6InZ1aWQiLCJ1cmwiOiJcLyoiLCJleHBlcmltZW50cyI6W3siaWQiOjE0OTYsIm5hbWUiOiJURVNUOiAxMCUgQWRkICdMaXZlJyB0byBOZXcgVmlkZW8gZHJvcGRvd24iLCJidWNrZXRzIjoxMDAsInN0YXRlIjoxLCJwdWJsaXNoZWRfb24iOiIyMDIwLTExLTMwIDE2OjQ0OjA5IiwicGF1c2VkX29uIjoiMDAwMC0wMC0wMCAwMDowMDowMCIsInN0b3BwZWRfb24iOiIwMDAwLTAwLTAwIDAwOjAwOjAwIiwicGFyYW1ldGVycyI6W3siaWQiOjI2MjYsIm5hbWUiOiJzaG93X2xpdmVfYnV0dG9uIiwiY2hvaWNlIjoiY29udHJvbCIsIndlaWdodCI6MX0seyJpZCI6MjYyNywibmFtZSI6InNob3dfbGl2ZV9idXR0b24iLCJjaG9pY2UiOiJ2YXJpYW50Iiwid2VpZ2h0IjoxfV0sInNlZ21lbnRzIjpbXX0seyJpZCI6MTUwNSwibmFtZSI6Ik5PIFRFU1Q6IDkwJSBMaXZlIGluIHRvcCBuYXYgYW5kIHZpZGVvIG1hbmFnZXIiLCJidWNrZXRzIjo5MDAsInN0YXRlIjozLCJwdWJsaXNoZWRfb24iOiIyMDIwLTExLTMwIDE2OjQ0OjEzIiwicGF1c2VkX29uIjoiMDAwMC0wMC0wMCAwMDowMDowMCIsInN0b3BwZWRfb24iOiIyMDIwLTEyLTA4IDExOjQ0OjEyIiwicGFyYW1ldGVycyI6W3siaWQiOjI2NDMsIm5hbWUiOiJzaG93X2xpdmVfYnV0dG9uIiwiY2hvaWNlIjoiY29udHJvbCIsIndlaWdodCI6MX0seyJpZCI6MjY0NCwibmFtZSI6InNob3dfbGl2ZV9idXR0b24iLCJjaG9pY2UiOiJ2YXJpYW50Iiwid2VpZ2h0IjoxfV0sInNlZ21lbnRzIjpbXX0seyJpZCI6MTUxOSwibmFtZSI6IkZpeGVkOiBOTyBURVNUOiA5MCUgTGl2ZSBpbiB0b3AgbmF2IGFuZCB2aWRlbyBtYW5hZ2VyIiwiYnVja2V0cyI6OTAwLCJzdGF0ZSI6MSwicHVibGlzaGVkX29uIjoiMjAyMC0xMi0wOCAxMTo0NDoyNSIsInBhdXNlZF9vbiI6IjAwMDAtMDAtMDAgMDA6MDA6MDAiLCJzdG9wcGVkX29uIjoiMDAwMC0wMC0wMCAwMDowMDowMCIsInBhcmFtZXRlcnMiOlt7ImlkIjoyNjY0LCJuYW1lIjoic2hvd19saXZlX2J1dHRvbiIsImNob2ljZSI6InZhcmlhbnQiLCJ3ZWlnaHQiOjF9XSwic2VnbWVudHMiOltdfV19fTsKICAgIDwvc2NyaXB0Pgo8c2NyaXB0PgooZnVuY3Rpb24oKSB7CiAgICB3aW5kb3cuX2d0bSA9IFt7ImV4Y2VwdGlvbl9odHRwX2NvZGUiOjQ1MSwibGFuZ3VhZ2UiOiJlbiIsInVzZXJfc3RhdHVzIjoibG9nZ2VkX291dCIsInVzZXJfdHlwZSI6Im5vbmUiLCJnYV91bml2ZXJzYWxfaWQiOiJVQS03NjY0MS04IiwiY29tc2NvcmVfc2l0ZV9pZCI6MTAzNDgyODl9XTsKCiAgICAgICAgdmFyIGdkcHJDb29raWUgPSAoZG9jdW1lbnQuY29va2llLm1hdGNoKC9eKD86Lio7KT9ccyp2aW1lb19nZHByX29wdGluXHMqPVxzKihbXjtdKykoPzouKik/JC8pfHxbLG51bGxdKVsxXTsKICAgIGlmIChnZHByQ29va2llID09PSAnLTEnKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICAgICB3aW5kb3cuX2d0bS5wdXNoKHsKICAgICAgICAndnVpZCc6IGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKC8oPzooPzpefC4qO1xzKil2dWlkXHMqXD1ccyooW147XSopLiokKXxeLiokLywgIiQxIiksCiAgICAgICAgJ2d0bS5zdGFydCc6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLAogICAgICAgICdldmVudCc6ICdndG0uanMnCiAgICB9KTsKICAgIHZhciBndG1zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksCiAgICAgICAgbm9kZTsKICAgIGd0bXMuYXN5bmMgPSB0cnVlOwogICAgZ3Rtcy50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7CiAgICBndG1zLnNyYyA9ICcvL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9R1RNLVJCS0smbD1fZ3RtJzsKICAgIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07CiAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGd0bXMsIG5vZGUpOwp9KSgpOwo8L3NjcmlwdD4KPHNjcmlwdD4KICAgIHZhciBnb29nbGV0YWcgPSBnb29nbGV0YWcgfHwge30sCiAgICAgICAgZ3B0YWRzbG90cyA9IFtdLAogICAgICAgIGxhbmd1YWdlLAogICAgICAgIGhhc191cGxvYWRlZCwKICAgICAgICBjb2hvcnQ7CiAgICBnb29nbGV0YWcuY21kID0gZ29vZ2xldGFnLmNtZCB8fCBbXTsKCiAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGdkcHJDb29raWUgPSAoZG9jdW1lbnQuY29va2llLm1hdGNoKC9eKD86Lio7KT9ccyp2aW1lb19nZHByX29wdGluXHMqPVxzKihbXjtdKykoPzouKik/JC8pfHxbLG51bGxdKVsxXTsKICAgICAgICBpZiAoZ2RwckNvb2tpZSA9PT0gJy0xJykgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHZhciBnYWRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksCiAgICAgICAgICAgIHVzZVNTTCA9ICdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sLAogICAgICAgICAgICBub2RlOwogICAgICAgIGdhZHMuYXN5bmMgPSB0cnVlOwogICAgICAgIGdhZHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgICAgIGdhZHMuc3JjID0gKHVzZVNTTCA/ICdodHRwczonIDogJ2h0dHA6JykgKyAnLy93d3cuZ29vZ2xldGFnc2VydmljZXMuY29tL3RhZy9qcy9ncHQuanMnOwogICAgICAgIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07CiAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYWRzLCBub2RlKTsKICAgIH0pKCk7CgogICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uKCkgewogICAgICAgIAogICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlID0gZG9jdW1lbnQuY29va2llLnJlcGxhY2UoLyg/Oig/Ol58Lio7XHMqKWxhbmd1YWdlXHMqXD1ccyooW147XSopLiokKXxeLiokLywgIiQxIik7CiAgICAgICAgICAgIGhhc191cGxvYWRlZCA9IChkb2N1bWVudC5jb29raWUucmVwbGFjZSgvKD86KD86XnwuKjtccyopaGFzX3VwbG9hZGVkXHMqXD1ccyooW147XSopLiokKXxeLiokLywgIiQxIikpID8gJ1knIDogJ04nOwogICAgICAgICAgICBjb25zZW50ID0gKGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKC8oPzooPzpefC4qO1xzKil2aW1lb19nZHByX29wdGluXHMqXD1ccyooW147XSopLiokKXxeLiokLywgIiQxIikpID09PSAnLTEnID8gMSA6IDA7CiAgICAgICAgICAgIGNvaG9ydCA9ICdBJzsKICAgICAgICAKICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0VGFyZ2V0aW5nKCdsYW5ndWFnZScsIFtsYW5ndWFnZV0pOwogICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ2lzX3VwbG9hZGVyJywgW2hhc191cGxvYWRlZF0pOwogICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ2NvaG9ydCcsIFtjb2hvcnRdKTsKICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0VGFyZ2V0aW5nKCdjb2hvcnRfYScsIFsoY29ob3J0ID09PSAnQScpID8gJ1knIDogJ04nXSk7CiAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZygnY29ob3J0X2InLCBbKGNvaG9ydCA9PT0gJ0InKSA/ICdZJyA6ICdOJ10pOwogICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ3Byb2R1Y3QnLCBbJyddKTsKICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0VGFyZ2V0aW5nKCdzdG9yYWdlJywgWydOJ10pOwoKICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ3NlYycsIFsnZmFsc2UnXSk7CgogICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ2xvZ2dlZF9pbicsIFsnZmFsc2UnXSk7CgogICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZygncnB2JywgKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxMDApKzEpLnRvU3RyaW5nKCkpOwoKICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0UmVxdWVzdE5vblBlcnNvbmFsaXplZEFkcyhjb25zZW50KTsKICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuZW5hYmxlQXN5bmNSZW5kZXJpbmcoKTsKICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuZGlzYWJsZUluaXRpYWxMb2FkKCk7CiAgICAgICAgZ29vZ2xldGFnLmVuYWJsZVNlcnZpY2VzKCk7CiAgICB9KTsKPC9zY3JpcHQ+CgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vZi52aW1lb2Nkbi5jb20vanNfb3B0L2xvZ2dpbmdfY29tYmluZWQubWluLmpzPzk3NDIxM2QxIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2YudmltZW9jZG4uY29tL2pzX29wdC9hYmxpbmNvbG5fY29tYmluZWQubWluLmpzPzZjNGFjYjU3Ij48L3NjcmlwdD4KCgoKICAgIDwvaGVhZD4KICAgIDxib2R5IGNsYXNzPSJvbnNpdGUgIj4KICAgICAgICA8ZGl2IGlkPSJ3cmFwIiBjbGFzcz0ib3V0ZXJfd3JhcCI+CiAgICAgICAgICAgIDxkaXYgaWQ9InRvcG5hdl9vdXRlcl93cmFwIj4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNyZWF0ZS1mYWNlYm9vay1oZWFkZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJWaW1lb0JyYW5kX0NvbG9yUmliYm9uICI+PC9kaXY+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKCjxzdHlsZT4KICAgIEAtd2Via2l0LWtleWZyYW1lcyByZWNvcmRfYW5pbWF0aW9uIHsKICAgICAgICAwJSwgMjAlLCA1MCUsIDgwJSwgMTAwJSB7CiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOwogICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7CiAgICAgICAgfQogICAgICAgIDQwJSB7CiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDJweCk7CiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgycHgpOwogICAgICAgIH0KICAgICAgICA2MCUgewogICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgzcHgpOwogICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoM3B4KTsKICAgICAgICB9CiAgICB9CgogICAgQGtleWZyYW1lcyByZWNvcmRfYW5pbWF0aW9uIHsKICAgICAgICAwJSwgMjAlLCA1MCUsIDgwJSwgMTAwJSB7CiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOwogICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7CiAgICAgICAgfQogICAgICAgIDQwJSB7CiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDJweCk7CiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgycHgpOwogICAgICAgIH0KICAgICAgICA2MCUgewogICAgICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgzcHgpOwogICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoM3B4KTsKICAgICAgICB9CiAgICB9CgogICAgLmxvZ2dlZF9vdXRfcmVjb3JkX2FuaW1hdGlvbiB7CiAgICAgICAgYW5pbWF0aW9uOiByZWNvcmRfYW5pbWF0aW9uIDEuNXMgLjI1cyA1OwogICAgfQoKICAgIC5sb2dnZWRfaW5fcmVjb3JkX2FuaW1hdGlvbiB7CiAgICAgICAgYW5pbWF0aW9uOiByZWNvcmRfYW5pbWF0aW9uIDEuNXMgLjI1cyBpbmZpbml0ZTsKICAgIH0KCiAgICAucmVjb3JkZXJfbmV3X2xhYmVsIHsKICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOwogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMxMTQwQzY7CiAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4OwogICAgICAgIGhlaWdodDogMjBweDsKICAgICAgICBsaW5lLWhlaWdodDogMjBweDsKICAgICAgICBtYXJnaW4tbGVmdDogOHB4OwogICAgICAgIGZvbnQtc2l6ZTogMTBweDsKICAgICAgICBmb250LXdlaWdodDogNzAwOwogICAgICAgIHBhZGRpbmc6IDAgMnB4OwogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIH0KPC9zdHlsZT4KCjxzY3JpcHQ+CiAgICB3aW5kb3cudmltZW8gPSB3aW5kb3cudmltZW8gfHwge307Cjwvc2NyaXB0PgoKPGRpdiBpZD0idG9wbmF2X2Rlc2t0b3AiIGNsYXNzPSJ0b3BuYXZfZGVza3RvcCAiIHJvbGU9ImJhbm5lciI+CiAgICA8ZGl2IGNsYXNzPSJ0b3BuYXZfZGVza3RvcF93cmFwcGVyIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbG9nbyIgaHJlZj0iLy92aW1lby5jb20iIGFsdD0iR28gdG8gVmltZW8gaG9tZSBwYWdlIiB0aXRsZT0iR28gdG8gVmltZW8gaG9tZSBwYWdlIiBhcmlhLWxhYmVsPSJHbyB0byBWaW1lbyBob21lIHBhZ2UiIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnZpbWVvX2hvbWUiIGRhdGEtZ3RtLWNsaWNrPSJ0b3BfbmF2X2hvbWVfY2xpY2siPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIGFsdD0iVmltZW8iIHdpZHRoPSIxMDAiIGhlaWdodD0iNDAiPjxwYXRoIGQ9Ik0yMi40NDggMTQuNTc1Yy0uMTA0IDIuMTctMS42MTggNS4xNDYtNC41NDQgOC45MTItMy4wMyAzLjk0Mi01LjU5IDUuOTEyLTcuNjg2IDUuOTEyLTEuMjk3IDAtMi4zOTctMS4yMDQtMy4zLTMuNi0uNi0yLjItMS4yMDItNC4zOTgtMS43OTQtNi41OTgtLjY2NC0yLjM5Ni0xLjM4LTMuNi0yLjE0Ny0zLjYtLjE2NiAwLS43NDcuMzU0LTEuNzUzIDEuMDVsLTEuMDQ4LTEuMzVjMS4xLS45NjUgMi4xOS0xLjkzIDMuMjU3LTIuOTA1IDEuNDYzLTEuMjY1IDIuNTczLTEuOTQgMy4zLTIuMDAyIDEuNzMyLS4xNjYgMi44IDEuMDE3IDMuMjA1IDMuNTU4LjQzNSAyLjc0LjczNiA0LjQ0LjkwMiA1LjExNS40OTggMi4yNyAxLjA0OCAzLjQwMiAxLjY1IDMuNDAyLjQ2NiAwIDEuMTcyLS43MzcgMi4xMDUtMi4yMS45MzQtMS40NzMgMS40MzItMi41OTMgMS41MDQtMy4zNy4xMzMtMS4yNzctLjM2NS0xLjkxLTEuNTA2LTEuOTEtLjUzIDAtMS4wOC4xMjUtMS42NS4zNjQgMS4xLTMuNTkgMy4xODYtNS4zMzMgNi4yNzctNS4yMyAyLjI3My4wNzMgMy4zNSAxLjU1NiAzLjIyNyA0LjQ2bTEzLjc1NSA3LjAzNGMtLjkzMyAxLjc2NC0yLjIyIDMuMzctMy44NiA0LjgwMy0yLjI0IDEuOTMtNC40NyAyLjkwNS02LjcgMi45MDUtMS4wMzcuMDAyLTEuODI2LS4zMy0yLjM3Ni0uOTk0LS41NS0uNjYzLS44MS0xLjUzNS0uNzc3LTIuNjAzLjAzLTEuMS4zNzItMi44IDEuMDI1LTUuMTA0LjY1NC0yLjMwMy45NzYtMy41MzcuOTc2LTMuNzAzIDAtLjg2LS4zLTEuMjk3LS45MDItMS4yOTctLjE5OCAwLS43Ny4zNTMtMS43MDIgMS4wNDhsLTEuMTUyLTEuMzVjMS4wNy0uOTYyIDIuMTM3LTEuOTI3IDMuMjA2LTIuOTAyIDEuNDMtMS4yNjYgMi41LTEuOTQgMy4yMDUtMi4wMDIgMS4xLS4xMDMgMS45MS4yMyAyLjQyOC45NzYuNTE4Ljc0Ny43MDUgMS43MjIuNTggMi45MTUtLjQzNSAyLjAzNC0uOTAyIDQuNjA3LTEuNCA3LjczLS4wMyAxLjQzLjQ4OCAyLjE0NiAxLjU1NiAyLjE0Ni40NjcgMCAxLjI5Ny0uNDk4IDIuNS0xLjQ4My45OTYtLjgyIDEuODE1LTEuNTk4IDIuNDUtMi4zMjRsLjk0MiAxLjI0NG0tNC4zNTctMTcuOGMtLjAzLjgzLS40NDYgMS42MjgtMS4yNTUgMi4zOTUtLjkuODYtMS45NyAxLjI5Ni0zLjIwNCAxLjI5Ni0xLjkgMC0yLjgyMi0uODMtMi43NS0yLjQ5LjAzMi0uODYuNTQtMS42OSAxLjUyNi0yLjQ5Ljk4NS0uNzk3IDIuMDc0LTEuMTkgMy4yNzgtMS4xOS43MDUgMCAxLjI4Ni4yNyAxLjc1My44Mi40NjcuNTQuNjg0IDEuMS42NTMgMS42Nm0zNS42MTIgMTcuOGMtLjkzMyAxLjc2My0yLjIyIDMuMzctMy44NiA0LjgwMi0yLjI0IDEuOTMtNC40NyAyLjkwNC02LjcgMi45MDQtMi4xNjguMDAyLTMuMjE2LTEuMjAyLTMuMTUzLTMuNTk4LjAzLTEuMDcuMjM4LTIuMzU1LjYyMi0zLjg1LjM4NC0xLjUwMy41OS0yLjY2NS42MjMtMy41MDUuMDMtMS4yNjUtLjM1My0xLjg5OC0xLjE1Mi0xLjg5OC0uODcgMC0xLjkxIDEuMDM2LTMuMTEyIDMuMS0xLjI3NiAyLjE2OC0xLjk2IDQuMjc0LTIuMDY0IDYuMzA4LS4wNzMgMS40My4wNzIgMi41NC40MjUgMy4yOTgtMi4zMjQuMDY0LTMuOTYzLS4zMi00Ljg4Ni0xLjE1LS44My0uNzM3LTEuMjEyLTEuOTUtMS4xNS0zLjY1Mi4wMy0xLjA2OC4xOTgtMi4xMzcuNDg4LTMuMjA1LjI5LTEuMDcuNDU3LTIuMDIzLjQ4OC0yLjg1My4wNjItMS4yMzQtLjM4NC0xLjg1Ny0xLjM1LTEuODU3LS44NCAwLTEuNzQuOTU1LTIuNzA2IDIuODUzLS45NjYgMS45LTEuNTA1IDMuODktMS42MSA1Ljk1Ni0uMDYgMS44NjcuMDUzIDMuMTc0LjM2NCAzLjktMi4yOTMuMDYyLTMuOTItLjQxNS00Ljg3Ni0xLjQ1Mi0uNzk4LS44Ni0xLjE2LTIuMTgtMS4xLTMuOTQyLjAzMi0uODYuMTg4LTIuMDc1LjQ1Ny0zLjYyLjI4LTEuNTQ2LjQyNS0yLjc1LjQ1Ny0zLjYyLjA2Mi0uNjAzLS4wODMtLjkwMy0uNDQ2LS45MDMtLjE5NyAwLS43NjguMzQtMS43MDIgMS4wMTVsLTEuMjAzLTEuMzQ4Yy4xNjgtLjEzNSAxLjIxNi0xLjEgMy4xNTYtMi45MDUgMS40LTEuMjk3IDIuMzU0LTEuOTcgMi44NTItMi4wMDIuODcyLS4wNzMgMS41NjcuMjkgMi4xMDYgMS4wOC41My43ODcuOCAxLjY5LjggMi43MjcgMCAuMzMyLS4wMzIuNjU0LS4xMDUuOTU0LjQ5Ny0uNzY2IDEuMDgtMS40MyAxLjc1Mi0yIDEuNTM3LTEuMzQgMy4yNi0yLjA4NiA1LjE1Ny0yLjI1MiAxLjY0LS4xMzUgMi44LjI1IDMuNTA1IDEuMTUyLjU3LjczNi44MyAxLjc4NC44IDMuMTUzLjIzNy0uMTk4LjQ4Ni0uNDE2Ljc0Ni0uNjU0Ljc2Ny0uOTAzIDEuNTE0LTEuNjIgMi4yNS0yLjE0OCAxLjIzNS0uOTAyIDIuNTItMS40IDMuODYtMS41MDQgMS41OTctLjEzNSAyLjc1LjI1IDMuNDU0IDEuMTUyLjYwMi43MjYuODcgMS43NzQuOCAzLjE0My0uMDMyLjkzMy0uMjYgMi4yOC0uNjc1IDQuMDY1LS40MTYgMS43NzMtLjYyNCAyLjgtLjYyNCAzLjA3LS4wMy42OTUuMDMgMS4xODIuMTk3IDEuNDQyLjE2Ni4yNy41Ny4zOTQgMS4yMDMuMzk0LjQ2NyAwIDEuMjk3LS40OTcgMi41LTEuNDgyLjk5Ni0uODIgMS44MTYtMS41OTggMi40NS0yLjMyNGwuOTYzIDEuMjU0bTE4Ljc2NS0uMDUyYy0uOTY1IDEuNTk4LTIuODc0IDMuMTk1LTUuNzA2IDQuNzkzLTMuNTM4IDIuMDMyLTcuMTI3IDMuMDUtMTAuNzU4IDMuMDUtMi43MDYgMC00LjYzNi0uOTA0LTUuODA4LTIuNy0uODMtMS4yMzMtMS4yMzQtMi42OTYtMS4yMDMtNC40MDcuMDMtMi42OTggMS4yMzQtNS4yNyAzLjYtNy43MSAyLjYwMy0yLjY2NSA1LjY3NC00LjAwMyA5LjIxLTQuMDAzIDMuMjcgMCA1IDEuMzI4IDUuMjA4IDMuOTk0LjEzNSAxLjcwMi0uNzk4IDMuNDQ1LTIuOCA1LjI0LTIuMTM3IDEuOTYtNC44MjQgMy4yMTUtOC4wNiAzLjc0NC42LjgzIDEuNTA0IDEuMjQ1IDIuNzA3IDEuMjQ1IDIuMzk2IDAgNS4wMi0uNjEzIDcuODYzLTEuODM3IDIuMDMzLS44NiAzLjYzLTEuNzUzIDQuODAzLTIuNjc2bC45NDUgMS4yNjVtLTExLjM2LTUuMjI4Yy4wMzItLjg5Mi0uMzMtMS4zNS0xLjEtMS4zNS0uOTk0IDAtMi4wMS42ODYtMy4wNDggMi4wNjYtMS4wMzggMS4zOC0xLjU2NyAyLjY5Ny0xLjU5OCAzLjk2Mi0uMDIgMC0uMDIuMjE4IDAgLjY0MyAxLjYzLS42IDMuMDUtMS41MTQgNC4yNDItMi43MzguOTY2LTEuMDU4IDEuNDYzLTEuOTIgMS41MDUtMi41ODNtMjQuOTQ2IDEuODY4Yy0uMTM1IDMuMDcyLTEuMjY1IDUuNzE3LTMuNDAyIDcuOTQ3LTIuMTM1IDIuMjMtNC43OSAzLjM1LTcuOTU1IDMuMzUtMi42MzUgMC00LjYzNy0uODUtNi4wMDYtMi41NS0uOTk3LTEuMjY3LTEuNTU3LTIuODU0LTEuNjUtNC43NTItLjE2Ni0yLjg2My44Ni01LjQ5OCAzLjEtNy44OTQgMi40MDgtMi42NjUgNS40MjctMy45OTMgOS4wNTctMy45OTMgMi4zMzQgMCA0LjA5OC43ODggNS4zIDIuMzQ0IDEuMTMyIDEuNDQzIDEuNjUgMy4yOSAxLjU1NyA1LjU1bS01LjY2NC0uMTg1Yy4wMy0uOTAzLS4wOTQtMS43MzMtLjM3NC0yLjQ4LS4yOC0uNzQ3LS42OTUtMS4xMy0xLjIyNC0xLjEzLTEuNzAyIDAtMy4xMDIuOTIzLTQuMjAyIDIuNzYtLjkzMyAxLjUwMy0xLjQzIDMuMTEtMS41MDQgNC44MTItLjAzLjg0LjExNCAxLjU3Ny40NDYgMi4yMS4zNjQuNzM2Ljg4MiAxLjEgMS41NTYgMS4xIDEuNTA1IDAgMi43OS0uODgzIDMuODYtMi42NTYuODkyLTEuNDcyIDEuMzgtMy4wMDggMS40NC00LjYxNWguMDAyeiIgZmlsbD0iIzExMjIzMyIvPjwvc3ZnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8YSBjbGFzcz0idG9wbmF2X3N0b2NrX2xvZ28iIGhyZWY9Ii9zdG9jayI+CiAgICAgICAgICAgICAgICA8c3ZnIGFsdD0iVmltZW8iIHdpZHRoPSIxNzAiIGhlaWdodD0iNDAiIGRhdGEtbmFtZT0iTGF5ZXIgMSIgdmlld0JveD0iMCAwIDc4MCAxMjAiPjxwYXRoIGQ9Ik00NzEuOSA3MC4zMWMtMTIuMTQtMi43NC0yNC4yOC0zLjktMjQuMjgtMTIgMC02LjUgOC44Mi03LjY2IDEzLjU5LTcuNjYgNy4yMiAwIDEzLjczIDIuMTcgMTUuMTcgMTBoMTcuMmMtMi0xNi42Mi0xNS45LTIzLTMxLjIyLTIzLTEzLjU4IDAtMzEuMjEgNS4wNS0zMS4yMSAyMS4zOCAwIDE1LjE3IDExLjg1IDE5LjUxIDI0IDIyLjExczI0IDMuNzYgMjQuNDIgMTIuNDNjLjQzIDguNTItMTAuNCA5LjgyLTE2LjYyIDkuODItOC44MSAwLTE2LTMuNDYtMTYuOS0xM2gtMTYuNDljLjI5IDE3LjYzIDE0LjMxIDI2IDMzLjA5IDI2IDE1LjQ2IDAgMzMuMzgtNi41IDMzLjM4LTI0LjI4LS4wMy0xNC43Mi0xMi4xNC0xOS4wNS0yNC4xMy0yMS44ek01MjUuNjYgMTcuMjhoLTE2LjQ4djIyLjRoLTEyLjQyVjUyaDEyLjQydjQ0Yy4yOSAxMi40MyAzLjQ3IDE5LjA4IDIwLjY3IDE5LjA4IDMuNjEgMCA3LjA4LS41OCAxMC42OS0uODd2LTEyLjY4YTI4LjUyIDI4LjUyIDAgMCAxLTYuOTQuNTdjLTcuMzcgMC03Ljk0LTMuNDctNy45NC0xMC4yNlY1MmgxNC44OFYzOS42OGgtMTQuODh6TTU4MC44NSAzNy42NmMtMjQgMC0zNy43MSAxNi40Ny0zNy43MSAzOS4zIDAgMjMgMTMuNzMgMzkuNDUgMzcuNzEgMzkuNDVTNjE4LjU3IDk5Ljk0IDYxOC41NyA3N2MwLTIyLjg3LTEzLjczLTM5LjM0LTM3LjcyLTM5LjM0em0wIDY1Ljc0Yy0xNC43MyAwLTIxLjI0LTEzLjQtMjEuMjQtMjYuNHM2LjUxLTI2LjMgMjEuMjQtMjYuM1M2MDIuMSA2NC4xIDYwMi4xIDc3cy02LjUxIDI2LjQtMjEuMjUgMjYuNHpNNjYyLjc5IDUwLjY2YzkuMSAwIDE1Ljc1IDQuOTEgMTcuMDUgMTRoMTYuNDdjLTEuNTktMTguMzUtMTYuMzMtMjctMzMuNjctMjctMjQuNTYgMC0zNi44NSAxNy42My0zNi44NSA0MC4xNyAwIDIyIDEyLjg2IDM4LjU4IDM2LjI3IDM4LjU4IDE5LjIyIDAgMzEuMjItMTAuNjkgMzQuMjUtMzAuMDZoLTE2LjQ3Yy0xLjU5IDEwLjctOC4yNCAxNy4wNS0xNy43OCAxNy4wNS0xNC4zIDAtMTkuNzktMTMuMTUtMTkuNzktMjUuNTcgMC0yMi42OSAxMS45OS0yNy4xNyAyMC41Mi0yNy4xN3pNNzQyLjI2IDY3LjEzbDI4LjYxLTI3LjQ1aC0yMC4yM2wtMjkuNzYgMzAuMlYxMS4yMUg3MDQuNHYxMDMuMThoMTYuNDhWODcuNjVsOS44Mi05LjUzIDIyLjgzIDM2LjI3aDIwLjA5bC0zMS4zNi00Ny4yNnoiIGZpbGw9IiNmZmYiPjwvcGF0aD48cGF0aCBkPSJNMTE3LjI1IDI2LjcyYTE4LjM3IDE4LjM3IDAgMCAwIDEzLjE0LTUuMzFxNC45Mi00LjY5IDUuMTMtOS44YTkuNjIgOS42MiAwIDAgMC0yLjY3LTYuODQgOS4wOCA5LjA4IDAgMCAwLTcuMTgtMy4zNyAyMC45MSAyMC45MSAwIDAgMC0xMy40NSA0LjlxLTYuMDYgNC45MS02LjI2IDEwLjIxLS40IDEwLjIyIDExLjI5IDEwLjIxek0zODYuMTIgMzguMjVxLTIyLjM4IDAtMzcuMTUgMTYuMzlRMzM1LjIgNjkuNCAzMzYuMjQgODdjLjA1Ljg2LjEyIDEuNy4yMiAyLjUzbC0xLjU0LjY4cS0xNy40NiA3LjUyLTMyLjIzIDcuNTEtNy40IDAtMTEuMDktNS4xMiAxOS45LTMuMjcgMzMtMTUuMzUgMTIuNC0xMS4wMyAxMS41NC0yMS40Ny0xLjIzLTE2LjM3LTIxLjM0LTE2LjM4LTIxLjggMC0zNy44IDE2LjQyLTE0LjU2IDE1LTE0Ljc3IDMxLjZhMzcuNTcgMzcuNTcgMCAwIDAgLjI3IDUuMzdjLTIuMjkgMS41MS00IDIuMjctNS4yIDIuMjdxLTMuOSAwLTQuOTItMS42M2MtLjY5LTEuMDktMS0zLjA2LS44My01LjkzcTAtMS42NCAyLjU3LTEyLjU3dDIuNzctMTYuNjdxLjQtOC4zNy0zLjI4LTEyLjg4LTQuMzItNS41Mi0xNC4xNy00LjdhMzAuNDIgMzAuNDIgMCAwIDAtMTUuOCA2LjE2IDU0LjU3IDU0LjU3IDAgMCAwLTkuMjMgOC44MmMtMS4xIDEtMi4xMiAxLjg2LTMuMDggMi42N3EuMTktOC40MS0zLjI4LTEyLjkzLTQuMzItNS41My0xNC4zOC00LjcyYTM2LjQ2IDM2LjQ2IDAgMCAwLTIxLjEzIDkuMjQgMzcuNjcgMzcuNjcgMCAwIDAtNy4xOSA4LjIxIDE4LjE1IDE4LjE1IDAgMCAwIC40MS0zLjlBMTkuNDIgMTkuNDIgMCAwIDAgMTYyLjUgNDNxLTMuMjgtNC44Mi04LjYyLTQuNDEtMy4wNy4yMS0xMS42OSA4LjIxLTExLjkxIDExLjA4LTEyLjkzIDExLjlsNC45MiA1LjU0YzMuODMtMi43NiA2LjE2LTQuMTUgNy00LjE1cTIuMjUgMCAxLjg1IDMuNjhhMTE0LjExIDExNC4xMSAwIDAgMS0xLjg5IDE0Ljg0Yy0uNyAzLjk0LTEuMiA3LjMzLTEuNTIgMTAuMTlsLS4xOC4xNXEtNy4zOSA2LjA4LTEwLjI2IDYuMDdjLTQuMzggMC02LjUtMi45Mi02LjM3LTguNzlxMy4wOC0xOS4yMiA1Ljc2LTMxLjY5LjgxLTcuMzYtMi4zNy0xMnQtMTAtNHEtNC4zMi40LTEzLjE0IDguMjFMOTcgNTIuMzljLS40MS05LjY4LTQuODItMTQuNjYtMTMuMjgtMTQuOTFxLTE5LS42LTI1Ljc0IDIxLjQ2YTE3LjE5IDE3LjE5IDAgMCAxIDYuNzYtMS41cTcgMCA2LjE2IDcuODQtLjQ2IDQuNzItNi4yIDEzLjgxdC04LjYyIDkuMDZxLTMuNjkgMC02Ljc3LTE0LTEtNC4xMS0zLjY5LTIxLTIuNDctMTUuNTQtMTMuMTQtMTQuNTJRMjggMzkgMTguOTQgNDYuODRxLTYuNTcgNi0xMy4zNCAxMS45bDQuMyA1LjU0UTE2LjA1IDYwIDE3LjA3IDYwcTQuNzEgMCA4LjgxIDE0Ljc2bDcuMzggMjcuMDZxNS41MiAxNC43NiAxMy41MSAxNC43NiAxMi45MiAwIDMxLjU1LTI0LjI0IDEzLjEtMTYuODQgMTctMjguNWMzLjQ0LTIuNTUgNS41Ny0zLjg0IDYuMzUtMy44NHEzLjY5IDAgMy42OSA1LjMzIDAgMS00IDE1LjE4dC00LjIgMjAuOTJxLS4yMSA2LjU3IDMuMTggMTAuNjZjMi4yNSAyLjc0IDUuNTEgNC4xMSA5Ljc1IDQuMTFxMTMuNzUgMCAyNy41LTExLjljLjgyLS43MSAxLjYxLTEuNDQgMi4zOS0yLjE4YTE2LjUxIDE2LjUxIDAgMCAwIDMuNzcgNy41NnE1LjkzIDYuMzQgMjAgNS45My0xLjg5LTQuNTItMS40Ny0xNmE1OS43IDU5LjcgMCAwIDEgNi41Ny0yNC40M3E2LTExLjY4IDExLjEtMTEuNyA2IDAgNS41NSA3LjU5YTUzLjEzIDUzLjEzIDAgMCAxLTIgMTEuNzEgNTUuMjMgNTUuMjMgMCAwIDAtMiAxMy4xM3EtLjQxIDEwLjQ3IDQuNzEgMTUgNS43MyA1LjEzIDIwLjA1IDQuNzItMi4xMy00LjcxLTEuNzItMTMuNTQuNi0xMi41MiA4LjQ0LTI1Ljg2IDcuNDEtMTIuNzIgMTIuNzYtMTIuNzMgNSAwIDQuNzQgNy44YTc0Ljk0IDc0Ljk0IDAgMCAxLTIuNTYgMTQuMzYgNzQuNjEgNzQuNjEgMCAwIDAtMi41NyAxNS43OXEtLjQxIDE0Ljc4IDEyLjk0IDE0Ljc3IDEzLjc0IDAgMjcuNS0xMS45bC40NC0uNGMuMzIuNTQuNjQgMS4wOCAxIDEuNnE3LjE5IDExLjA4IDIzLjgxIDExLjA4IDIyLjM2IDAgNDQuMTMtMTIuNWMxLjYzLS45MiAzLjE3LTEuODMgNC42NS0yLjc1YTI5LjQzIDI5LjQzIDAgMCAwIDMuMjQgNS4xOHE4LjQyIDEwLjQ1IDI0LjYzIDEwLjQ1IDE5LjUgMCAzMi42NC0xMy43M2E0OC43OSA0OC43OSAwIDAgMCAxNC0zMi41OHEuNjEtMTMuOTMtNi4zNi0yMi43NS03LjQ5LTkuNjUtMjEuODUtOS42N3ptLTk3Ljc2IDQ2LjU2YTExLjEyIDExLjEyIDAgMCAxIDAtMi42NnEuMTktNy43NSA2LjU1LTE2LjIzdDEyLjUtOC40OGMzLjE1IDAgNC42NSAxLjg1IDQuNTEgNS41MnEtLjE5IDQuMDgtNi4xNCAxMC42MmE0Ni4yNSA0Ni4yNSAwIDAgMS0xNy40MiAxMS4yM3pNMzkxIDY5Ljg1YTM5IDM5IDAgMCAxLTYgMTguOTJxLTYuNTcgMTAuOTEtMTUuODEgMTAuOS00LjExIDAtNi4zNi00LjUyYTE3LjY2IDE3LjY2IDAgMCAxLTEuODUtOS4wNSAzOS44MSAzOS44MSAwIDAgMSA2LjE2LTE5Ljc0cTYuODYtMTEuMzEgMTcuMzMtMTEuMzFjMi4xOSAwIDMuODYgMS41NCA1IDQuNjNBMjUuODIgMjUuODIgMCAwIDEgMzkxIDY5Ljg1eiIgZmlsbD0iIzAwYWRlZiI+PC9wYXRoPjwvc3ZnPgogICAgICAgICAgICA8L2E+CiAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51IiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJNYWluIG1lbnUiPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0b3BuYXZfbWVudV9kZXNrdG9wX21haW4iIHJvbGU9Im1lbnViYXIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRvcG5hdl9kZXNrdG9wX21lbnVfaXRlbXMiIGRhdGEtbWVudS1pZD0iam9pbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idG9wbmF2X21lbnVfam9pbiBqcy10b3BuYXZfbWVudV9hdXRoIiBvbmNsaWNrPSJldmVudC5wcmV2ZW50RGVmYXVsdCgpO3ZpbWVvLk1vZGFsLmNyZWF0ZSh7c2l6ZToneHNtYWxsJyxjb250ZW50Oicvam9pbj9tb2RhbD1uZXcnfSkudGhlbihjb21wbGV0ZVVzZXJMb2dpbikiIGRhdGEtZ2EtZXZlbnQtY2xpY2s9InRvcF9uYXZ8am9pbiIgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6am9pbiIgZGF0YS1ndG0tY2xpY2s9InRvcF9uYXZfam9pbl9jbGljayIgaHJlZj0iLy92aW1lby5jb20vam9pbiIgdGl0bGU9IkJlY29tZSBhIFZpbWVvIG1lbWJlciIgcmVsPSJ0b2dnbGUiIHJvbGU9ImJ1dHRvbiIgYXJpYS1vd25zPSJ0b3BuYXZfam9pbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSm9pbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtcyIgZGF0YS1tZW51LWlkPSJsb2dpbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ianMtdG9wbmF2X21lbnVfYXV0aCIgb25jbGljaz0iZXZlbnQucHJldmVudERlZmF1bHQoKTt2aW1lby5Nb2RhbC5jcmVhdGUoe3NpemU6J3hzbWFsbCcsY29udGVudDonL2xvZ19pbj9tb2RhbD1uZXcnfSkudGhlbihjb21wbGV0ZVVzZXJMb2dpbikiIGRhdGEtZ2EtZXZlbnQtY2xpY2s9InRvcF9uYXZ8bG9naW4iIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OmxvZ2luIiBkYXRhLWd0bS1jbGljaz0idG9wX25hdl9sb2dpbl9jbGljayIgaHJlZj0iLy92aW1lby5jb20vbG9nX2luIiB0aXRsZT0iTG9nIGluIHRvIHlvdXIgYWNjb3VudCIgcmVsPSJ0b2dnbGUiIHJvbGU9ImJ1dHRvbiIgYXJpYS1vd25zPSJ0b3BuYXZfbG9naW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZyBpbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtcyIgZGF0YS1tZW51LWlkPSJwcm9kdWN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG9uY2xpY2s9ImV2ZW50LnByZXZlbnREZWZhdWx0KCk7ZXZlbnQudGFyZ2V0LmJsdXIoKTsiIGNsYXNzPSJ0b3BuYXZfbWVudV9ub19saW5rIHRvcG5hdl9oYXNfZHJvcGRvd24gdG9wbmF2X2ljb25fY2hldnJvbl9hIiBocmVmPSIjIiB0aXRsZT0iUHJvZHVjdCIgcmVsPSJ0b2dnbGUiIHJvbGU9ImJ1dHRvbiIgYXJpYS1vd25zPSJ0b3BuYXZfcHJvZHVjdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZHVjdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93bi0td3JhcHBlciIgcm9sZT0ibWVudSIgYXJpYS1oaWRkZW49InRydWUiIGlkPSJ0b3BuYXZfcHJvZHVjdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9zb2x1dGlvbnMtLWZlYXR1cmVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zX2Ryb3Bkb3duLS1sYWJlbHMiPkZFQVRVUkVTPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zX2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zX2Ryb3Bkb3duX2l0ZW0iIHJvbGU9Im1lbnVpdGVtIiB0YWJpbmRleD0iLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpwcm9kdWN0fGtleXdvcmQ6dmlkZW9fcGxheWVyIiBkYXRhLWd0bS1jbGljaz0idG9wX25hdl9wcm9kdWN0X3ZpZGVvX3BsYXllciIgaHJlZj0iLy92aW1lby5jb20vZmVhdHVyZXMvdmlkZW8tcGxheWVyIiB0aXRsZT0iVmlkZW8gcGxheWVyIj5WaWRlbyBQbGF5ZXI8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRvcG5hdl9kZXNrdG9wX21lbnVfaXRlbXNfZHJvcGRvd25faXRlbSIgcm9sZT0ibWVudWl0ZW0iIHRhYmluZGV4PSItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnNvbHV0aW9uc3xrZXl3b3JkOmNyZWF0ZXx0YXJnZXQ6L2NyZWF0ZXx0eXBlOmNsaWNrIiBocmVmPSIvL3ZpbWVvLmNvbS9jcmVhdGUiIHRpdGxlPSJDcmVhdGUiPkNyZWF0ZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93bl9pdGVtIiByb2xlPSJtZW51aXRlbSIgdGFiaW5kZXg9Ii0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOmxpdmVfc3RyZWFtaW5nIiBkYXRhLWd0bS1jbGljaz0idG9wX25hdl9wcm9kdWN0X2xpdmVfc3RyZWFtaW5nIiBocmVmPSIvL3ZpbWVvLmNvbS9saXZlIiB0aXRsZT0iTGl2ZSBTdHJlYW1pbmciPkxpdmUgU3RyZWFtaW5nPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zX2Ryb3Bkb3duX2l0ZW0iIHJvbGU9Im1lbnVpdGVtIiB0YWJpbmRleD0iLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpwcm9kdWN0fGtleXdvcmQ6c2NyZWVuX3JlY29yZGVyIiBkYXRhLWd0bS1jbGljaz0idG9wX25hdl9wcm9kdWN0X3NjcmVlbl9yZWNvcmRlciIgaHJlZj0iLy92aW1lby5jb20vZmVhdHVyZXMvc2NyZWVuLXJlY29yZGVyIiB0aXRsZT0iU2NyZWVuIHJlY29yZGVyIj5TY3JlZW4gUmVjb3JkZXI8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRvcG5hdl9kZXNrdG9wX21lbnVfaXRlbXNfZHJvcGRvd25faXRlbSIgcm9sZT0ibWVudWl0ZW0iIHRhYmluZGV4PSItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnByb2R1Y3R8a2V5d29yZDpwcml2YWN5IiBkYXRhLWd0bS1jbGljaz0idG9wX25hdl9wcm9kdWN0X3ByaXZhY3kiIGhyZWY9Ii8vdmltZW8uY29tL2ZlYXR1cmVzL3ZpZGVvLXByaXZhY3kiIHRpdGxlPSJQcml2YWN5Ij5Qcml2YWN5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zX2Ryb3Bkb3duX2l0ZW0iIHJvbGU9Im1lbnVpdGVtIiB0YWJpbmRleD0iLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpwcm9kdWN0fGtleXdvcmQ6Y29sbGFib3JhdGlvbiIgZGF0YS1ndG0tY2xpY2s9InRvcF9uYXZfcHJvZHVjdF9jb2xsYWJvcmF0aW9uIiBocmVmPSIvL3ZpbWVvLmNvbS9mZWF0dXJlcy92aWRlby1jb2xsYWJvcmF0aW9uIiB0aXRsZT0iQ29sbGFib3JhdGlvbiI+Q29sbGFib3JhdGlvbjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93bl9pdGVtIiByb2xlPSJtZW51aXRlbSIgdGFiaW5kZXg9Ii0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOmRpc3RyaWJ1dGlvbiIgZGF0YS1ndG0tY2xpY2s9InRvcF9uYXZfcHJvZHVjdF9kaXN0cmlidXRpb24iIGhyZWY9Ii8vdmltZW8uY29tL2ZlYXR1cmVzL3ZpZGVvLW1hcmtldGluZyIgdGl0bGU9IkRpc3RyaWJ1dGlvbiBhbmQgbWFya2V0aW5nIj5EaXN0cmlidXRpb24gJiBNYXJrZXRpbmc8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRvcG5hdl9kZXNrdG9wX21lbnVfaXRlbXNfZHJvcGRvd25faXRlbSIgcm9sZT0ibWVudWl0ZW0iIHRhYmluZGV4PSItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnByb2R1Y3R8a2V5d29yZDptb25ldGl6YXRpb24iIGRhdGEtZ3RtLWNsaWNrPSJ0b3BfbmF2X3Byb2R1Y3RfbW9uZXRpemF0aW9uIiBocmVmPSIvL3ZpbWVvLmNvbS9mZWF0dXJlcy92aWRlby1tb25ldGl6YXRpb24iIHRpdGxlPSJNb25ldGl6YXRpb24iPk1vbmV0aXphdGlvbjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93bl9pdGVtIiByb2xlPSJtZW51aXRlbSIgdGFiaW5kZXg9Ii0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOmFuYWx5dGljcyIgZGF0YS1ndG0tY2xpY2s9InRvcF9uYXZfcHJvZHVjdF9hbmFseXRpY3MiIGhyZWY9Ii8vdmltZW8uY29tL2ZlYXR1cmVzL3ZpZGVvLWFuYWx5dGljcyIgdGl0bGU9IkFuYWx5dGljcyI+QW5hbHl0aWNzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zX2Ryb3Bkb3duX2l0ZW0iIHJvbGU9Im1lbnVpdGVtIiB0YWJpbmRleD0iLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpwcm9kdWN0fGtleXdvcmQ6aG9zdGluZyIgZGF0YS1ndG0tY2xpY2s9InRvcF9uYXZfcHJvZHVjdF9ob3N0aW5nIiBocmVmPSIvL3ZpbWVvLmNvbS9mZWF0dXJlcy9vbmxpbmUtdmlkZW8taG9zdGluZyIgdGl0bGU9Ikhvc3RpbmcgYW5kIG1hbmFnZW1lbnQiPkhvc3RpbmcgJiBNYW5hZ2VtZW50PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zX2Ryb3Bkb3duX2l0ZW0iIHJvbGU9Im1lbnVpdGVtIiB0YWJpbmRleD0iLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpzb2x1dGlvbnN8a2V5d29yZDpzdG9ja3x0YXJnZXQ6L3N0b2NrfHR5cGU6Y2xpY2siIGhyZWY9Ii8vdmltZW8uY29tL3N0b2NrIiB0aXRsZT0iU3RvY2siPlN0b2NrPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zX2Ryb3Bkb3duX2l0ZW0iIHJvbGU9Im1lbnVpdGVtIiB0YWJpbmRleD0iLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpzb2x1dGlvbnN8a2V5d29yZDpmb3JfaGlyZXx0YXJnZXQ6L2Zvci1oaXJlfHR5cGU6Y2xpY2siIGhyZWY9Ii8vdmltZW8uY29tL2Zvci1oaXJlIiB0aXRsZT0iRm9yIEhpcmUiPkZvciBIaXJlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvdXBncmFkZSIgY2xhc3M9InRvcG5hdl9kZXNrdG9wX21lbnVfaXRlbXNfZHJvcGRvd24tLWNvbXBhcmVfcGxhbnMiIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnByb2R1Y3R8a2V5d29yZDpjb21wYXJlX3BsYW5zfHRhcmdldDovdXBncmFkZXx0eXBlOmNsaWNrIj5Db21wYXJlIFBsYW5zPC9hPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9zb2x1dGlvbnMtLXNlcnZpY2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zX2Ryb3Bkb3duLS1sYWJlbHMiPkhJR0hMSUdIVFM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9zb2x1dGlvbnMtLXNlcnZpY2VzX2NvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZXJ2aWNlc193cmFwcGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpzb2x1dGlvbnN8a2V5d29yZDpjcmVhdGV8dGFyZ2V0Oi9jcmVhdGV8dHlwZTpjbGljayIgY2xhc3M9InRvcG5hdl9kZXNrdG9wX3NvbHV0aW9ucy0tc2VydmljZXNfYmxvY2siIGhyZWY9Ii8vdmltZW8uY29tL2NyZWF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENyZWF0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5NYWtlIHNvY2lhbCB2aWRlb3MgaW4gYW4gaW5zdGFudDogdXNlIGN1c3RvbSB0ZW1wbGF0ZXMgdG8gdGVsbCB0aGUgcmlnaHQgc3RvcnkgZm9yIHlvdXIgYnVzaW5lc3MuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VydmljZXNfd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOnNjcmVlbl9yZWNvcmRlciIgZGF0YS1ndG0tY2xpY2s9InRvcF9uYXZfcHJvZHVjdF9zY3JlZW5fcmVjb3JkZXIiIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9zb2x1dGlvbnMtLXNlcnZpY2VzX2Jsb2NrIiBocmVmPSIvL3ZpbWVvLmNvbS9mZWF0dXJlcy9zY3JlZW4tcmVjb3JkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTY3JlZW4gUmVjb3JkZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UmVjb3JkIGFuZCBpbnN0YW50bHkgc2hhcmUgdmlkZW8gbWVzc2FnZXMgZnJvbSB5b3VyIGJyb3dzZXIuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VydmljZXNfd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOmxpdmVfc3RyZWFtaW5nIiBkYXRhLWd0bS1jbGljaz0idG9wX25hdl9wcm9kdWN0X2xpdmVfc3RyZWFtaW5nIiBjbGFzcz0idG9wbmF2X2Rlc2t0b3Bfc29sdXRpb25zLS1zZXJ2aWNlc19ibG9jayIgaHJlZj0iLy92aW1lby5jb20vbGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpdmUgU3RyZWFtaW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkJyb2FkY2FzdCB5b3VyIGV2ZW50cyB3aXRoIHJlbGlhYmxlLCBoaWdoLXF1YWxpdHkgbGl2ZSBzdHJlYW1pbmcuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VydmljZXNfd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6c29sdXRpb25zfGtleXdvcmQ6ZW50ZXJwcmlzZXx0YXJnZXQ6L2VudGVycHJpc2V8dHlwZTpjbGljayIgY2xhc3M9InRvcG5hdl9kZXNrdG9wX3NvbHV0aW9ucy0tc2VydmljZXNfYmxvY2siIGhyZWY9Ii8vdmltZW8uY29tL2VudGVycHJpc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbnRlcnByaXNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkdldCB5b3VyIHRlYW0gYWxpZ25lZCB3aXRoIGFsbCB0aGUgdG9vbHMgeW91IG5lZWQgb24gb25lIHNlY3VyZSwgcmVsaWFibGUgdmlkZW8gcGxhdGZvcm0uPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zIiBkYXRhLW1lbnUtaWQ9InNvbHV0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idG9wbmF2X2hhc19kcm9wZG93biB0b3BuYXZfaWNvbl9jaGV2cm9uX2EiIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnNvbHV0aW9uc3xrZXl3b3JkOnNvbHV0aW9ucyIgaHJlZj0iIyIgdGl0bGU9IlNvbHV0aW9ucyIgcmVsPSJ0b2dnbGUiIHJvbGU9ImJ1dHRvbiIgYXJpYS1vd25zPSJ0b3BuYXZfc29sdXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTb2x1dGlvbnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93biIgcm9sZT0ibWVudSIgYXJpYS1oaWRkZW49InRydWUiIGlkPSJ0b3BuYXZfc29sdXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zX2Ryb3Bkb3duX2l0ZW0iIHJvbGU9Im1lbnVpdGVtIiB0YWJpbmRleD0iLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6c29sdXRpb25zfGtleXdvcmQ6Y3JlYXRpdmVfcHJvZmVzc2lvbmFscyIgaHJlZj0iLy92aW1lby5jb20vc29sdXRpb25zL2NyZWF0aXZlLXByb2Zlc3Npb25hbHMtc29sdXRpb25zIiB0aXRsZT0iQWxsIHlvdSBuZWVkIHRvIG1ha2UgZ3JlYXQgdmlkZW8uIj5DcmVhdGl2ZSBQcm9mZXNzaW9uYWxzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93bl9pdGVtIiByb2xlPSJtZW51aXRlbSIgdGFiaW5kZXg9Ii0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnNvbHV0aW9uc3xrZXl3b3JkOnNtYWxsX2J1c2luZXNzIiBocmVmPSIvL3ZpbWVvLmNvbS9zb2x1dGlvbnMvc21hbGwtYnVzaW5lc3Mtc29sdXRpb25zIiB0aXRsZT0iQ2FwdHVyZSB5b3VyIGN1c3RvbWVyc+KAmSBhdHRlbnRpb24gd2l0aCB2aWRlby4iPlNtYWxsIEJ1c2luZXNzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93bl9pdGVtIiByb2xlPSJtZW51aXRlbSIgdGFiaW5kZXg9Ii0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnNvbHV0aW9uc3xrZXl3b3JkOmVudGVycHJpc2UiIGhyZWY9Ii8vdmltZW8uY29tL2VudGVycHJpc2UiIHRpdGxlPSJFbnRlcnByaXNlIj5FbnRlcnByaXNlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93bl9pdGVtIiByb2xlPSJtZW51aXRlbSIgdGFiaW5kZXg9Ii0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnNvbHV0aW9uc3xrZXl3b3JkOmVkdWNhdGlvbiIgaHJlZj0iLy92aW1lby5jb20vc29sdXRpb25zL2VkdWNhdGlvbi1zb2x1dGlvbnMiIHRpdGxlPSJTaGFyZSBrbm93bGVkZ2Ugd2l0aCB2aWRlby4iPkVkdWNhdGlvbjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRvcG5hdl9kZXNrdG9wX21lbnVfaXRlbXNfZHJvcGRvd25faXRlbSIgcm9sZT0ibWVudWl0ZW0iIHRhYmluZGV4PSItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpzb2x1dGlvbnN8a2V5d29yZDpmaXRuZXNzIiBocmVmPSIvL3ZpbWVvLmNvbS9zb2x1dGlvbnMvZml0bmVzcy1zb2x1dGlvbnMiIHRpdGxlPSJHZXQgeW91ciBmaXRuZXNzIHN0dWRpbyBvbmxpbmUuIj5GaXRuZXNzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93bl9pdGVtIiByb2xlPSJtZW51aXRlbSIgdGFiaW5kZXg9Ii0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnNvbHV0aW9uc3xrZXl3b3JkOmZhaXRoIiBocmVmPSIvL3ZpbWVvLmNvbS9zb2x1dGlvbnMvZmFpdGgtc29sdXRpb25zIiB0aXRsZT0iS2VlcCB5b3VyIGNvbW11bml0eSBjb25uZWN0ZWQuIj5GYWl0aDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtcyIgZGF0YS1tZW51LWlkPSJpbnNwaXJhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBvbmNsaWNrPSJldmVudC5wcmV2ZW50RGVmYXVsdCgpO2V2ZW50LnRhcmdldC5ibHVyKCk7IiBjbGFzcz0idG9wbmF2X21lbnVfbm9fbGluayB0b3BuYXZfaGFzX2Ryb3Bkb3duIHRvcG5hdl9pY29uX2NoZXZyb25fYSIgaHJlZj0iIyIgdGl0bGU9IldhdGNoIiByZWw9InRvZ2dsZSIgcm9sZT0iYnV0dG9uIiBhcmlhLW93bnM9InRvcG5hdl9pbnNwaXJhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2F0Y2ggICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93biIgcm9sZT0ibWVudSIgYXJpYS1oaWRkZW49InRydWUiIGlkPSJ0b3BuYXZfaW5zcGlyYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRvcG5hdl9kZXNrdG9wX21lbnVfaXRlbXNfZHJvcGRvd25faXRlbSIgcm9sZT0ibWVudWl0ZW0iIHRhYmluZGV4PSItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDp3YXRjaHxrZXl3b3JkOndhdGNoIiBkYXRhLWd0bS1jbGljaz0idG9wX25hdl93YXRjaF9jbGljayIgaHJlZj0iLy92aW1lby5jb20vd2F0Y2giIHRpdGxlPSJFeHBsb3JlIj5FeHBsb3JlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93bl9pdGVtIiByb2xlPSJtZW51aXRlbSIgdGFiaW5kZXg9Ii0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OndhdGNofGtleXdvcmQ6c3RhZmZfcGlja3MiIGRhdGEtZ3RtLWNsaWNrPSJ0b3BfbmF2X3dhdGNoX3N0YWZmX3BpY2tzX2NsaWNrIiBocmVmPSIvL3ZpbWVvLmNvbS9jaGFubmVscy9zdGFmZnBpY2tzIiB0aXRsZT0iVGhlIGJlc3QgdmlkZW9zIG9uIFZpbWVvLCBjdXJhdGVkIGRhaWx5IGJ5IG91ciB0ZWFtIj5TdGFmZiBQaWNrczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRvcG5hdl9kZXNrdG9wX21lbnVfaXRlbXNfZHJvcGRvd25faXRlbSIgcm9sZT0ibWVudWl0ZW0iIHRhYmluZGV4PSItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDptYW5hZ2VfdmlkZW9zfGtleXdvcmQ6dmlkZW9fc2Nob29sIiBkYXRhLWd0bS1jbGljaz0idG9wX25hdl9jcmVhdGVfdmlkZW9fc2Nob29sX2NsaWNrIiBocmVmPSIvL3ZpbWVvLmNvbS92aWRlb3NjaG9vbCIgdGl0bGU9IkxlYXJuIGhvdyB0byBtYWtlIGJldHRlciB2aWRlb3MiPlZpZGVvIFNjaG9vbDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtcyIgZGF0YS1tZW51LWlkPSJwcmljaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnByaWNpbmciIGRhdGEtZ3RtLWNsaWNrPSJ0b3BfbmF2X3ByaWNpbmdfY2xpY2siIGhyZWY9Ii8vdmltZW8uY29tL3VwZ3JhZGUiIHRpdGxlPSJQcmljaW5nIiByZWw9InRvZ2dsZSIgcm9sZT0iYnV0dG9uIiBhcmlhLW93bnM9InRvcG5hdl9wcmljaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmljaW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvbmF2PjwhLS0gLy50b3BuYXZfZGVza3RvcF9tZW51IC0tPgogICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0idG9wbmF2X21lbnVfc2VhcmNoX29tbmlzZWFyY2giIGNsYXNzPSJ0b3BuYXZfbWVudV9zZWFyY2giIGRhdGEtcXVlcnk9IiIgZGF0YS1wbGFjZWhvbGRlcj0iU2VhcmNoIHZpZGVvcywgcGVvcGxlLCBhbmQgbW9yZSI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idG9wbmF2X21lbnVfcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJyZWNvcmRfdGlwX3dyYXBwZXIiIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF92aWRlb19wb3BvdmVyIiBvbk1vdXNlZW50ZXI9InRyYWNrTmV3VmlkZW9Ecm9wZG93bkltcHJlc3Npb24oJycpIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9Im5ld192aWRlb19kcm9wZG93bl9idXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfdmlkZW9fcG9wb3Zlcl9idXR0b24gaXJpc19idG4tLXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpuZXdfdmlkZW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrPSJoYW5kbGVOZXdWaWRlb0NsaWNrKCkiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF92aWRlb19wb3BvdmVyX3NwYW5fd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3IHZpZGVvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icmVjb3JkX2FuaW1hdGlvbl93cmFwcGVyIiBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfdmlkZW9fcG9wb3Zlcl9zcGFuX3ZhcmlhbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjI0cHgiIGhlaWdodD0iMjRweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9Ik0xMiAxNS41YTEgMSAwIDAgMS0uNjctLjI2bC01LTQuNSAxLjM0LTEuNDhMMTIgMTMuMTVsNC4zMy0zLjkgMS4zNCAxLjQ5LTUgNC41YTEgMSAwIDAgMS0uNjcuMjZ6IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiNmZmZmZmYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBpZD0ibmV3X3ZpZGVvX2Ryb3Bkb3duX3ZhcmlhbnQiIGNsYXNzPSJ0b3BuYXZfZGVza3RvcF9tZW51X2l0ZW1zX2Ryb3Bkb3duIHRvcG5hdl9kZXNrdG9wX3ZpZGVvX3BvcG92ZXJfZHJvcGRvd25fdmFyaWFudCIgcm9sZT0ibWVudSIgYXJpYS1oaWRkZW49InRydWUiIHN0eWxlPSJwYWRkaW5nOiB1bnNldDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRvcG5hdl9kZXNrdG9wX21lbnVfaXRlbXNfZHJvcGRvd25faXRlbV92YXJpYW50ICIgcm9sZT0ibWVudWl0ZW0iIHRhYmluZGV4PSItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBvbmNsaWNrPSIoZnVuY3Rpb24oZXZlbnQpIHsgaWYgKHdpbmRvdy5oYW5kbGVVcGxvYWRCdXR0b25DbGljaykgeyBoYW5kbGVVcGxvYWRCdXR0b25DbGljayhldmVudCk7IH19KShldmVudCkiIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50Om5ld192aWRlb3xrZXl3b3JkOnsnYWN0aW9uJzondXBsb2FkJ318dGFyZ2V0Oi91cGxvYWR8dHlwZTpjbGljayIgaWQ9InRvcG5hdl9kZXNrdG9wX3VwbG9hZF9idXR0b24iIGhyZWY9Ii8vdmltZW8uY29tL3VwbG9hZCIgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsaWduX3RvcG5hdl9kcm9wZG93bl9pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0b3BuYXZfZHJvcGRvd25faWNvbnMiPjxzdmcgdmlld0JveD0iMCAwIDIwIDIwIiB3aWR0aD0iMjRweCIgaGVpZ2h0PSIyNHB4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0iTTE4IDguNDhhNy4xNiA3LjE2IDAgMCAwLTEuODQtNC43NkE1LjgxIDUuODEgMCAwIDAgNi45MiA1YTUuMjQgNS4yNCAwIDAgMC00LjY5IDMuODVBNC45MSA0LjkxIDAgMCAwIDAgMTNhNS4xMyA1LjEzIDAgMCAwIDUgNWgxMGE1LjEgNS4xIDAgMCAwIDUtNC45NCA1Ljg5IDUuODkgMCAwIDAtMi00LjU4ek0xNSAxNmgtNHYtMy41OWwxLjI5IDEuMjkgMS40MS0xLjQxLTMuNy0zLjctMy43MSAzLjdMNy43IDEzLjcgOSAxMi40MVYxNkg1YTMuMTYgMy4xNiAwIDAgMS0zLTMgMi45MSAyLjkxIDAgMCAxIDEuNTItMi41OGwuNC0uMi4wOC0uNDRBMy4zOCAzLjM4IDAgMCAxIDcuNTkgN2guN2wuMjQtLjY2QTMuNjkgMy42OSAwIDAgMSAxMiA0YTMuNzMgMy43MyAwIDAgMSAyLjcyIDEuMTJBNS40NSA1LjQ1IDAgMCAxIDE2IDl2LjU0bC40NS4zQTMuNzkgMy43OSAwIDAgMSAxOCAxMy4wNiAzLjA5IDMuMDkgMCAwIDEgMTUgMTZ6IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiMxYTJlM2IiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwbG9hZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG9wbmF2X2Rlc2t0b3BfbWVudV9pdGVtc19kcm9wZG93bl9pdGVtX3ZhcmlhbnQgIiByb2xlPSJtZW51aXRlbSIgdGFiaW5kZXg9Ii0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG9uY2xpY2s9ImhhbmRsZUNyZWF0ZVZpZGVvQ2xpY2soZXZlbnQpIiBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpuZXdfdmlkZW98a2V5d29yZDp7J2FjdGlvbic6J2NyZWF0ZSd9fHRhcmdldDovY3JlYXRlL3ZpZGVvLW1ha2VyfHR5cGU6Y2xpY2siIGlkPSJ0b3BuYXZfZGVza3RvcF9jcmVhdGVfdmlkZW9fYnV0dG9uIiBocmVmPSIvL3ZpbWVvLmNvbS9jcmVhdGUvdmlkZW8tbWFrZXIiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGlnbl90b3BuYXZfZHJvcGRvd25faWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idG9wbmF2X2Ryb3Bkb3duX2ljb25zIj48c3ZnIHZpZXdCb3g9IjAgMCAyMCAyMCIgd2lkdGg9IjI0cHgiIGhlaWdodD0iMjRweCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPSJNMy4yIDE2LjhsMy44LTEgMTAtMTBjLjItLjIuMi0uNSAwLS43TDE0LjkgM2MtLjItLjItLjUtLjItLjcgMGwtMi4xIDIuMSAyLjggMi44TDEzLjggOSAxMSA2LjIgNC4yIDEzbC0xIDMuOHptOS45LTE0LjljLjgtLjggMi0uOCAyLjggMEwxOC4xIDRjLjguOC44IDIgMCAyLjhMNy44IDE3LjJsLTUuNiAxLjVjLS41LjEtLjktLjItLjctLjdsMS40LTUuN0wxMy4xIDEuOXoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPSIjMWEyZTNiIgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDwvc3ZnPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlIGEgdmlkZW8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRvcG5hdl9kZXNrdG9wX21lbnVfaXRlbXNfZHJvcGRvd25faXRlbV92YXJpYW50IGxpdmVfdmFyaWFudCBoaWRlIiByb2xlPSJtZW51aXRlbSIgdGFiaW5kZXg9Ii0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG9uY2xpY2s9IihmdW5jdGlvbihldmVudCkgeyBpZiAod2luZG93LmhhbmRsZUxpdmVCdXR0b25DbGljaykgeyBoYW5kbGVMaXZlQnV0dG9uQ2xpY2soZXZlbnQpOyB9fSkoZXZlbnQpImRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50Om5ld192aWRlb3xrZXl3b3JkOnsnYWN0aW9uJzonbGl2ZSd9fHRhcmdldDovdXBncmFkZT9jb250ZXh0PWxpdmVQbGFuc09yQ29udGludWV8dHlwZTpjbGljayIgaWQ9InRvcG5hdl9kZXNrdG9wX2NyZWF0ZV9saXZlX2J1dHRvbiIgaHJlZj0iLy92aW1lby5jb20vdXBncmFkZT9jb250ZXh0PWxpdmVQbGFuc09yQ29udGludWUiID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGlnbl90b3BuYXZfZHJvcGRvd25faWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idG9wbmF2X2Ryb3Bkb3duX2ljb25zIj48c3ZnIHZpZXdCb3g9IjAgMCAyMCAxNCIgd2lkdGg9IjI0cHgiIGhlaWdodD0iMjRweCI+CiAgICAgICAgICAgICAgICAgICAgPHBhdGggCiAgICAgICAgICAgICAgICAgICAgICAgIGQ9Ik0xOSAxaC0xLjQ5YTEgMSAwIDAwLS43Mi4zTDE0IDQuMThWMmEyIDIgMCAwMC0yLTJIMmEyIDIgMCAwMC0yIDJ2MTBhMiAyIDAgMDAyIDJoMTBhMiAyIDAgMDAyLTJWOS44MmwyLjggMi44N2ExIDEgMCAwMC43Mi4zSDE5YTEgMSAwIDAwMS0xVjJhMSAxIDAgMDAtMS0xem0tNyAxMUgyVjJoMTB6bTYtMWgtLjA2TDE0IDdsMy44OS00SDE4eiIgCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9IiMxYTJlM2IiCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGwtcnVsZT0iZXZlbm9kZCIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9zdmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHbyBsaXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBpZD0iY2FydF90b3BfbmF2IiBjbGFzcz0idG9wbmF2X2NhcnRfYnV0dG9uIj48L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PjwhLS0gLy50b3BuYXZfbWVudV9yaWdodCAtLT4KICAgICAgICAgICAgPC9kaXY+PCEtLSAvLnRvcG5hdl9kZXNrdG9wX3dyYXBwZXIgLS0+CjwvZGl2PgoKICAgIDxzY3JpcHQ+CiAgICAgICAgdmFyIGlzTW9iaWxlID0gL2lwaG9uZXxpcG9kfGFuZHJvaWR8d2Vib3N8YmxhY2tiZXJyeXx3aW5kb3dzIHBob25lL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpOwoKICAgICAgICAvLyBETyBOT1QgUkVNT1ZFLiBUaGlzIGlzIGEgY2FsbGJhY2sgZm9yIHRoZSBsb2dpbiAmIGpvaW4gYnV0dG9ucyBpbiBUb3BOYXZCdWlsZGVyLgogICAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlVXNlckxvZ2luKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiAhcmVzcG9uc2Uuc2lnbnVwKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gaGFuZGxlVXBsb2FkQnV0dG9uQ2xpY2soZXZlbnQpIHsKICAgICAgICAgICAgLy8gT3BlbnMgdGhlIGF1dGggbW9kYWwgZm9yIGxvZ2dlZCBvdXQgdXNlcnMKICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICB3aW5kb3cudmltZW8KICAgICAgICAgICAgICAgJiYgd2luZG93LnZpbWVvLmNvbmZpZwogICAgICAgICAgICAgICAmJiB3aW5kb3cudmltZW8uTW9kYWwKICAgICAgICAgICAgICAgJiYgIXdpbmRvdy52aW1lby5jdXJfdXNlcgogICAgICAgICAgICApewogICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIGlzTW9iaWxlID8gd2luZG93LmxvY2F0aW9uLmhyZWY9Ii91cGxvYWQiIDogdmltZW8uTW9kYWwuY3JlYXRlKHsKICAgICAgICAgICAgICAgICAgICBzaXplOiAneHNtYWxsJywKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnL2pvaW4/bW9kYWw9bmV3JnJlZGlyZWN0PS91cGxvYWQnLAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICB9CiAgICAgICAgIH0KCiAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZUxpdmVCdXR0b25DbGljayhldmVudCkgewogICAgICAgICAgICAvLyBPcGVucyB0aGUgYXV0aCBtb2RhbCBmb3IgbG9nZ2VkIG91dCB1c2VycwogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgIHdpbmRvdy52aW1lbwogICAgICAgICAgICAgICAmJiB3aW5kb3cudmltZW8uY29uZmlnCiAgICAgICAgICAgICAgICYmIHdpbmRvdy52aW1lby5Nb2RhbAogICAgICAgICAgICAgICAmJiAhd2luZG93LnZpbWVvLmN1cl91c2VyCiAgICAgICAgICAgICl7CiAgICAgICAgICAgICAgICBpZiAoaXNNb2JpbGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIHZpbWVvLk1vZGFsLmNyZWF0ZSh7CiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3hzbWFsbCcsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJy9qb2luP21vZGFsPW5ldyZyZWRpcmVjdD0lMkZ1cGdyYWRlJTNGY29udGV4dCUzRGxpdmVQbGFuc09yQ29udGludWUnLAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICB9CiAgICAgICAgIH0KICAgIDwvc2NyaXB0PgoKPHNjcmlwdD4KICAgIHZhciBzZXJ2aWNlRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VydmljZXNfd3JhcHBlcicpOwogICAgdmFyIGhpZGRlblNlcnZpY2VFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZXJ2aWNlc193cmFwcGVyLmhpZGUnKTsKICAgIHZhciBjb3VudCA9IHNlcnZpY2VFbGVtZW50cy5sZW5ndGggLSBoaWRkZW5TZXJ2aWNlRWxlbWVudHMubGVuZ3RoOwogICAgaWYgKGNvdW50ID4gMikgewogICAgICAgIHZhciBzZXJ2aWNlQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvcG5hdl9kZXNrdG9wX3NvbHV0aW9ucy0tc2VydmljZXNfY29udGFpbmVyJyk7CiAgICAgICAgaWYgKHNlcnZpY2VDb250YWluZXIpIHsKICAgICAgICAgICAgc2VydmljZUNvbnRhaW5lci5zdHlsZS53aWR0aCA9ICc0NTBweCc7CiAgICAgICAgfQogICAgfQo8L3NjcmlwdD4KCjxzY3JpcHQ+CiAgICBmdW5jdGlvbiBoYW5kbGVOZXdWaWRlb0NsaWNrKCkgewogICAgICAgIGlmICh3aW5kb3cudmltZW8gJiYgd2luZG93LnZpbWVvLmN1cl91c2VyKSB7CiAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgIT09ICcvdXBsb2FkJykgewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL3VwbG9hZCc7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB3aW5kb3cudmltZW8uTW9kYWwuY3JlYXRlKHsgc2l6ZTogJ3hzbWFsbCcsIGNvbnRlbnQ6ICcvam9pbj9tb2RhbD1uZXcmcmVkaXJlY3Q9L3VwbG9hZCcgfSkKICAgICAgICAgICAgICAgIC50aGVuKGNvbXBsZXRlVXNlckxvZ2luKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaGFuZGxlQ3JlYXRlVmlkZW9DbGljayhlLCBpc1JlY29yZFNjcmVlbiA9IGZhbHNlKSB7CiAgICAgICAgaWYgKHdpbmRvdy52aW1lbyAmJiAhd2luZG93LnZpbWVvLmN1cl91c2VyKSB7CiAgICAgICAgICAgIGlmICghaXNSZWNvcmRTY3JlZW4pIHsKICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICB3aW5kb3cudmltZW8uTW9kYWwuY3JlYXRlKHsKICAgICAgICAgICAgICAgICAgICBzaXplOiAneHNtYWxsJywKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnL2pvaW4/bW9kYWw9bmV3JnJlZGlyZWN0PS9jcmVhdGUvdmlkZW8tbWFrZXInCiAgICAgICAgICAgICAgICB9KS50aGVuKGNvbXBsZXRlVXNlckxvZ2luKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB0cmFja05ld1ZpZGVvRHJvcGRvd25JbXByZXNzaW9uKHJlY29yZE9wdGlvbikgewogICAgICAgIGlmICh3aW5kb3cuX19mYSkgewogICAgICAgICAgICB3aW5kb3cuX19mYS5wdXNoKFsndHJhY2tFdmVudCcsIHsKICAgICAgICAgICAgICAgIHR5cGU6ICdpbXByZXNzaW9uJywKICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogJ3RvcF9uYXYnLAogICAgICAgICAgICAgICAgY29tcG9uZW50OiAnbmV3X3ZpZGVvJywKICAgICAgICAgICAgfV0pOwoKICAgICAgICAgICAgaWYgKHJlY29yZE9wdGlvbikgewogICAgICAgICAgICAgICAgd2luZG93Ll9fZmEucHVzaChbJ3RyYWNrRXZlbnQnLCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ltcHJlc3Npb24nLAogICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogJ3RvcF9uYXYnLAogICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ3JlY29yZCcsCiAgICAgICAgICAgICAgICAgICAga2V5d29yZDogcmVjb3JkT3B0aW9uLAogICAgICAgICAgICAgICAgfV0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQo8L3NjcmlwdD4KCjxzY3JpcHQ+CiAgICAvKioKICAgICAqIFRoaXMgaXMgcGFydCBvZiBhbiBBQiBFeHBlcmltZW50CiAgICAgKiBFeHBlcmltZW50IGxpbms6IGh0dHBzOi8vdmltZW8uY29tL21vZHdvcmxkL2FibGluY29sbi81MjgKICAgICAqIEV4cGVyaW1lbnQgcGFyYW06IHNob3dfbXlfZHJhZnRzCiAgICAgKi8KICAgIHZhciBzaG93VmFyaWFudCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgc2hvd015RHJhZnRzOwogICAgICAgIGlmICh3aW5kb3cuQUJMaW5jb2xuICYmIHdpbmRvdy5BQkxpbmNvbG4uZ2V0VGVzdCgnSlMuVG9wbmF2Lk15RHJhZnRzJykuZ2V0KCdzaG93X215X2RyYWZ0cycsICdjb250cm9sJykgPT09ICd2YXJpYW50JykgewogICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdG9wbmF2LW1hbmFnZS1kcmFmdHMnKS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7CiAgICAgICAgfQogICAgfTsKICAgIHNob3dWYXJpYW50KCk7Cjwvc2NyaXB0PgoKICAgIDxzY3JpcHQ+CiAgICAgICAgLy8gQUIgdGVzdDogQWRkIGxpdmUgYnV0dG9uIHRvIHRvcCBuYXYgJ05ldyBWaWRlbycgZHJvcGRvd24KICAgICAgICAvLyBodHRwczovL3ZpbWVvLmNvbS9tb2R3b3JsZC9hYmxpbmNvbG4vNTY3CiAgICAgICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBsaXZlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpdmVfdmFyaWFudCcpOwogICAgICAgICAgICAvL09ubHkgbm9uLWxpdmUgdXNlcnMgYXJlIGJ1Y2tldGVkIGFzIG9ubHkgbm9uLWxpdmUgdXNlcnMgc2VlIHRoZSBsaXZlQnV0dG9uCiAgICAgICAgICAgIGlmIChsaXZlQnV0dG9uKXsKICAgICAgICAgICAgICAgIHZhciBidWNrZXQgPSB3aW5kb3cuQUJMaW5jb2xuID8gd2luZG93LkFCTGluY29sbi5nZXRUZXN0KCdKUy5Ub3BOYXYuTGl2ZScpLmdldCgnc2hvd19saXZlX2J1dHRvbicsICdjb250cm9sJykgOiAnY29udHJvbCc7CiAgICAgICAgICAgICAgICBpZiAoYnVja2V0ID09PSAndmFyaWFudCcpIHsKICAgICAgICAgICAgICAgICAgICBsaXZlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pKCk7CiAgICA8L3NjcmlwdD4KCiAgICA8c2NyaXB0PgogICAgICAgIHZhciBhcnJvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWNvcmRfYW5pbWF0aW9uX3dyYXBwZXInKTsKICAgICAgICB2YXIgbmV3VmlkZW9CdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVjb3JkX3RpcF93cmFwcGVyJyk7CgogICAgICAgIGlmIChhcnJvdykgewogICAgICAgICAgICBhcnJvdy5jbGFzc0xpc3QuYWRkKCdub19hbmltYXRpb24nKTsKICAgICAgICB9CgogICAgICAgIHZhciBpc0hvdmVyZWQgPSBmYWxzZTsKCiAgICAgICAgaWYgKG5ld1ZpZGVvQnRuICYmIGZhbHNlKSB7CiAgICAgICAgICAgIG5ld1ZpZGVvQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmIChpc0hvdmVyZWQpIHJldHVybjsKCiAgICAgICAgICAgICAgICBpc0hvdmVyZWQgPSB0cnVlOwoKICAgICAgICAgICAgICAgIGlmIChhcnJvdykgewogICAgICAgICAgICAgICAgICAgIGFycm93LmNsYXNzTGlzdC5yZW1vdmUoJ25vX2FuaW1hdGlvbicpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN0b3JlX3JlY29yZF90aXBfc2V0dGluZ3MoMSk7CgogICAgICAgICAgICB9LCBmYWxzZSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzdG9yZV9yZWNvcmRfdGlwX3NldHRpbmdzKHZhbHVlKSB7CiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCiAgICAgICAgICAgIHhoci5vcGVuKCdQT1NUJywgJy9zZXR0aW5ncy9uYXZfcmVjb3JkZXJfdGlwJyk7CiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLVJlcXVlc3RlZC1XaXRoJywgJ1hNTEh0dHBSZXF1ZXN0Jyk7CiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7CiAgICAgICAgICAgIHhoci5zZW5kKCdyZWNvcmRfc2NyZWVuX3RpcF9zdGF0ZT0nICsgdmFsdWUgKyAnJnRva2VuPScgKyB2aW1lby54c3JmdCk7CgogICAgICAgICAgICAvLyBOb3RoaW5nIHRvIGhhbmRsZS4gV2UgaG9wZSBmb3IgdGhlIGJlc3QgaW4gdGhpcyBjYXNlCiAgICAgICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICB9OwogICAgPC9zY3JpcHQ+CgoKICAgIAo8IS0tIFJlc3BvbnNpdmUgVG9wIE5hdiAoRXhwbG9yZSwgTE9IUCwgV2F0Y2gsIHRjKSAtLT4KPG5hdiBpZD0idG9wbmF2X21vYmlsZSIgY2xhc3M9InRvcG5hdl9tb2JpbGUgICAgbmF2X2Jhci0tbGkiIHJvbGU9ImJhbm5lciI+CgogICAgPGRpdiBjbGFzcz0idG9wbmF2X21vYmlsZV9iYXIiPgogICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgZGF0YS1hY3Rpb249Im1lbnUub3BlbiIgY2xhc3M9Im5hdmJhcl9oYW1idXJnZXIgbmF2X2Jhcl9pY29uIHRvcG5hdl9tb2JpbGVfYnV0dG9uIHRvcG5hdl9tb2JpbGVfcHVsbF9sZWZ0IGpzLXRvcG5hdl9tb2JpbGVfaGVhZGVyX2xvZ28iIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDMyIDMyIj4KICAgICAgICAgICAgICAgIDx0aXRsZT5NZW51PC90aXRsZT4KICAgICAgICAgICAgICAgIDxwYXRoIGlkPSJSZWN0YW5nbGUtNCIgZD0iTTcsOEgyNWExLDEsMCwwLDEsMSwxaDBhMSwxLDAsMCwxLTEsMUg3QTEsMSwwLDAsMSw2LDlINkExLDEsMCwwLDEsNyw4WiIgLz4KICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik03LDE1SDI1YTEsMSwwLDAsMSwxLDFoMGExLDEsMCwwLDEtMSwxSDdhMSwxLDAsMCwxLTEtMUg2QTEsMSwwLDAsMSw3LDE1WiIvPgogICAgICAgICAgICAgICAgPHBhdGggZD0iTTcsMjJIMjVhMSwxLDAsMCwxLDEsMWgwYTEsMSwwLDAsMS0xLDFIN2ExLDEsMCwwLDEtMS0xSDZBMSwxLDAsMCwxLDcsMjJaIi8+CiAgICAgICAgICAgIDwvc3ZnPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idG9wbmF2X2FjdGlvbl9idXR0b25zIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8vdmltZW8uY29tL3NlYXJjaCIgY2xhc3M9InRvcG5hdl9tb2JpbGVfYnV0dG9uIHRvcG5hdl9tb2JpbGVfcHVsbF9yaWdodCB0b3BuYXZfbW9iaWxlX2hlYWRlcl9zZWFyY2giPgogICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9Im5hdl9iYXJfc2VhcmNoX2ljb24gbmF2X2Jhcl9pY29uIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAzMiAzMiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT5TZWFyY2g8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMjYuNzQsMjUuMzJsLTQuNTMtNC41M2ExLDEsMCwwLDAtLjIxLS4xNEE5LDksMCwxLDAsMjAuNjUsMjJhMSwxLDAsMCwwLC4xNC4yMWw0LjUzLDQuNTNhMSwxLDAsMCwwLDEuNDEtMS40MVpNMTUsMjJhNyw3LDAsMSwxLDctN0E3LDcsMCwwLDEsMTUsMjJaIi8+CiAgICAgICAgICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY2FydF90b3BfbmF2X21vYmlsZSIgY2xhc3M9InRvcG5hdl9jYXJ0X2J1dHRvbiI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIFZpbWVvIExvZ28gLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdl9iYXJfdGl0bGUganMtbmF2X2Jhcl90aXRsZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3ZpbWVvLmNvbSIgZ3RtLWRhdGEtY2xpY2s9Im1vYmlsZV9uYXZfaG9tZV9sb2dvX2NsaWNrIj4KICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmVyc2lvbj0iMS4xIiB2aWV3Qm94PSIwIDAgNDQxIDEyNC42ODIiIHdpZHRoPSI4NnB4IiBoZWlnaHQ9IjI3cHgiPgogICAgICAgICAgICAgICAgICAgICAgICA8Zz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik0xMjAuNDgxLDI3LjMyNmM1LjQ2MiwwLDEwLjE4OC0xLjkxLDE0LjE3NC01LjcyOGMzLjU0Ny0zLjM3OSw1LjM5Mi02LjkwNiw1LjU0LTEwLjU4M2MwLjE0My0yLjQ5Mi0wLjgxNS00Ljk1MS0yLjg4LTcuMzc4QzEzNS4yNDQsMS4yMTcsMTMyLjY2MiwwLDEyOS41NjIsMGMtNS4zMiwwLTEwLjE1NSwxLjc2Ny0xNC41MTEsNS4yODhjLTQuMzU2LDMuNTI3LTYuNjA4LDcuMjA0LTYuNzUsMTEuMDIyQzEwOC4wMDIsMjMuNjU2LDExMi4wNjcsMjcuMzI2LDEyMC40ODEsMjcuMzI2eiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD0iTTQzNC4wNzksNTAuMTZjLTUuMzE5LTYuOTI1LTEzLjE0NS0xMC4zOTUtMjMuNDc1LTEwLjM5NWMtMTYuMDk3LDAtMjkuNDU1LDUuODk2LTQwLjA4MywxNy42ODhjLTkuOTAyLDEwLjYxNC0xNC40NzgsMjIuMjY1LTEzLjczMywzNC45NDRjMC4wNDksMC45MzIsMC4xMzIsMS44NCwwLjIyOSwyLjczOGMtMC41NTQsMC4yNDEtMS4wOTMsMC40ODMtMS42NjIsMC43MjRjLTEyLjU1Niw1LjQxMS0yNC4xNDcsOC4xMS0zNC43NzUsOC4xMWMtNS4zMiwwLTkuMzA3LTEuODM5LTExLjk2LTUuNTIxYzE0LjMxNi0yLjM1NSwyNi4yMDYtNy44NzYsMzUuNjYyLTE2LjU2OGM4Ljg1NC03Ljk1NSwxMi45ODktMTUuNjg5LDEyLjQtMjMuMTk3Yy0wLjg4Ny0xMS43OC04LjU2Mi0xNy42NzYtMjMuMDM0LTE3LjY3NmMtMTUuNjUsMC0yOS4yMzUsNS45MDktNDAuNzUsMTcuNzE0Yy0xMC40ODQsMTAuNzgzLTE1LjgwNSwyMi4xNDgtMTUuOTQ3LDM0LjEwM2MtMC4wNCwyLjAwNSwwLjA2NiwzLjkzMiwwLjMsNS43ODljLTIuNDc3LDEuNjMyLTQuMzUyLDIuNDU2LTUuNjEzLDIuNDU2Yy0yLjgxLDAtNC41NzYtMC41ODItNS4zMTQtMS43NmMtMC43MzctMS4xNzgtMS4wMzUtMy4zMDgtMC44ODctNi40MDFjMC0xLjE3OCwwLjkxOS01LjY5NSwyLjc3MS0xMy41NjVjMS44NDUtNy44NywyLjg0MS0xMy44NjQsMi45OS0xNy45ODdjMC4yOTEtNi4wMjUtMC44OTQtMTAuNjYtMy41NDctMTMuODk2Yy0zLjEwMS0zLjk3NC04LjE5NC01LjY2My0xNS4yODEtNS4wNzRjLTUuOTAyLDAuNDQ3LTExLjU5MiwyLjY2LTE3LjA1NCw2LjY0N2MtMy4yNDksMi4zNjMtNi41NjksNS41MzQtOS45NjEsOS41MjFjLTEuMTg1LDEuMDM2LTIuMjkxLDItMy4zMjcsMi44OGMwLjE0My02LjA1MS0xLjAzNi0xMC43MDUtMy41NC0xMy45NTRjLTMuMTA3LTMuOTg3LTguMjcyLTUuNjgzLTE1LjUwOC01LjA5NGMtOC40MTUsMC43MzgtMTYuMDIsNC4wNjUtMjIuODA5LDkuOTY3Yy0yLjk1OCwyLjUxMS01LjU0LDUuNDY5LTcuNzUzLDguODYxYzAuMjkxLTEuMzI3LDAuNDQtMi43MzEsMC40NC00LjIwN2MwLTQuNTc2LTEuMTg1LTguNjAyLTMuNTQ3LTEyLjA3MXMtNS40NjItNS4wNTUtOS4zMDEtNC43NTdjLTIuMjEzLDAuMTQ5LTYuNDIsMy4xMDEtMTIuNjIxLDguODU0Yy04LjU2OSw3Ljk3NC0xMy4yMTYsMTIuMjU5LTEzLjk1NCwxMi44NDFsNS4zMTMsNS45OGM0LjEzNi0yLjk4NCw2LjY0Ny00LjQ3OSw3LjUzNC00LjQ3OWMxLjYxOCwwLDIuMjg1LDEuMzI3LDEuOTk0LDMuOTc1Yy0wLjE0MywzLjgzMS0wLjgyMiw5LjE2NC0yLjAzOSwxNi4wMTJjLTAuNzU0LDQuMjQzLTEuMjk4LDcuOTA0LTEuNjM4LDEwLjk4OGMtMC4wNjYsMC4wNTUtMC4xMjksMC4xMDktMC4xOTYsMC4xNjRjLTUuMzIsNC4zNzUtOS4wMDksNi41NTYtMTEuMDc0LDYuNTU2Yy00LjcyNSwwLTcuMDE2LTMuMTU4LTYuODY3LTkuNDg4YzIuMjEzLTEzLjgyNCw0LjI4NS0yNS4yMjIsNi4yMDctMzQuMTk5YzAuNTgzLTUuMjk0LTAuMjY2LTkuNTkyLTIuNTUtMTIuOTA2Yy0yLjI5MS0zLjMxNC01Ljg3LTQuNzQ0LTEwLjczNy00LjMwNGMtMy4xMDcsMC4yOTgtNy44MzIsMy4yNDktMTQuMTgxLDguODZjLTIuMjA1LDItNC40MSwzLjk5Ni02LjYxNSw1Ljk5M2MtMC40MzctMTAuNDQ3LTUuMjA0LTE1LjgyMi0xNC4zMjktMTYuMDljLTEzLjY2OS0wLjQ0LTIyLjkzMSw3LjI3NS0yNy43NzksMjMuMTU4YzIuNTA0LTEuMDc0LDQuOTM4LTEuNjE4LDcuMzAxLTEuNjE4YzUuMDE2LDAsNy4yMjksMi44MjIsNi42NCw4LjQ1M2MtMC4yOTcsMy40MTEtMi41MTEsOC4zNzUtNi42NCwxNC44OTljLTQuMTM2LDYuNTIzLTcuMjM2LDkuNzg2LTkuMzAxLDkuNzg2Yy0yLjY2LDAtNS4wOTQtNS4wMjMtNy4zMDctMTUuMDgxYy0wLjc0NS0yLjk1MS0yLjA3MS0xMC40OTEtMy45ODctMjIuNjE0Yy0xLjc3My0xMS4yMzYtNi40OTktMTYuNDg1LTE0LjE3NC0xNS43NDdjLTMuMjQ5LDAuMjk4LTguMTIzLDMuMjQ5LTE0LjYxNCw4Ljg2QzkuNjY5LDUzLjMxOCw0Ljg2Nyw1Ny41OTcsMCw2MS44NzVsNC42NDEsNS45OGM0LjQyLTMuMDk0LDcuMDAzLTQuNjQ3LDcuNzQxLTQuNjQ3YzMuMzg1LDAsNi41NSw1LjMxMyw5LjUwMSwxNS45MjljMi42NTMsOS43MzMsNS4zMDcsMTkuNDY4LDcuOTYxLDI5LjIwMmMzLjk3NCwxMC42MjEsOC44NDEsMTUuOTI5LDE0LjU4OCwxNS45MjljOS4yODEsMCwyMC42MjctOC43MTksMzQuMDM4LTI2LjE1NEM4Ny44OTIsODUuOTg3LDkzLjk5LDc1Ljc0LDk2LjgsNjcuMzU0YzMuNzItMi43NDgsNi4wMTgtNC4xNDYsNi44NTMtNC4xNDZjMi42NTMsMCwzLjk4NywxLjkyMiwzLjk4Nyw1Ljc1NGMwLDAuNzM4LTEuNDQzLDYuMi00LjMyNCwxNi4zODFjLTIuODgsMTAuMTgyLTQuMzk1LDE3LjcwOS00LjUzNywyMi41NzVjLTAuMTQ5LDQuNzI2LDAuOTk3LDguNTU3LDMuNDMsMTEuNTA4YzIuNDM0LDIuOTUyLDUuOTQxLDQuNDI4LDEwLjUyNCw0LjQyOGM5Ljg5LDAsMTkuNzc5LTQuMjc4LDI5LjY3NS0xMi44MzVjMC44ODEtMC43NzIsMS43MzgtMS41NTcsMi41NzMtMi4zNTJjMC43ODMsMy4zMTIsMi4xMjQsNi4wNDUsNC4wNyw4LjE1YzQuMjU5LDQuNTY5LDExLjQ1Niw2LjcwNiwyMS41OTIsNi40MDhjLTEuMzUzLTMuMjQ5LTEuODg0LTkuMDAzLTEuNTg2LTE3LjI3NGMwLjQ0LTkuMTUyLDIuODA5LTE3Ljk0MSw3LjA5NC0yNi4zNTVzOC4yNzgtMTIuNjI3LDExLjk4LTEyLjYyN2M0LjI4NSwwLDYuMjg1LDIuNzMxLDUuOTg3LDguMTkzYy0wLjE0OSwzLjY5Ni0wLjg3NCw3LjkwMy0yLjE3NSwxMi42MjhjLTEuMzA3LDQuNzI1LTIuMDMyLDkuNDQ5LTIuMTc0LDE0LjE3NGMtMC4yOTgsNy41MzQsMS4zOTIsMTIuOTE5LDUuMDgxLDE2LjE2OGM0LjExNiwzLjY4OSwxMS4zMzQsNS4zOTIsMjEuNjM4LDUuMDk0Yy0xLjU0MS0zLjM5Mi0yLjE2Mi04LjI2Ni0xLjg2NC0xNC42MjFjMC40NC05LjAwMywzLjQ4Mi0xOC4zMDQsOS4xMTMtMjcuOTAyYzUuMzMzLTkuMTUxLDkuOTIyLTEzLjczMywxMy43NzItMTMuNzMzYzMuNTYsMCw1LjI2MywyLjgwOSw1LjExMyw4LjQxNGMtMC4xNDgsMy42ODgtMS4wNzQsOC44NTQtMi43NzEsMTUuNDk0Yy0xLjY5NSw2LjY0MS0yLjYyMSwxMi4zMTYtMi43NjQsMTcuMDQxYy0wLjI5NywxMC42MjgsNC4zNSwxNS45MzYsMTMuOTU1LDE1LjkzNmM5Ljg4OSwwLDE5Ljc3OS00LjI3OCwyOS42NzUtMTIuODM1YzAuMTY0LTAuMTQ0LDAuMzE2LTAuMjkzLDAuNDc5LTAuNDM4YzAuMzQsMC41ODYsMC42ODgsMS4xNjgsMS4wNjgsMS43MzJjNS4xNjUsNy45NjcsMTMuNzM0LDExLjk1NCwyNS42OTUsMTEuOTU0YzE2LjA5LDAsMzEuOTY2LTQuNDkyLDQ3LjYxNi0xMy40ODhjMS43NTYtMC45OSwzLjQyMi0xLjk3OSw1LjAxNy0yLjk3YzAuOTg2LDEuOTkxLDIuMTM4LDMuODY2LDMuNTAyLDUuNTkxYzYuMDUyLDcuNTIxLDE0LjkxMiwxMS4yODEsMjYuNTc1LDExLjI4MWMxNC4wMjUsMCwyNS43NjctNC45MzgsMzUuMjE2LTE0LjgxNWM5LjQ0OS05Ljg3NiwxNC40NjYtMjEuNTk4LDE1LjA2MS0zNS4xNjNDNDQxLjM4Nyw2NC42ODQsNDM5LjEwMiw1Ni41MDMsNDM0LjA3OSw1MC4xNnogTTMwNS4xMTgsOTAuMDAzYy0wLjA4NC0xLjkwOS0wLjA4NC0yLjg2NywwLTIuODY3YzAuMTQzLTUuNTc5LDIuNTA1LTExLjQxNyw3LjA3NC0xNy41MTRzOS4wNjItOS4xNDYsMTMuNDg4LTkuMTQ2YzMuMzkyLDAsNS4wMSwxLjk4Nyw0Ljg2Nyw1Ljk0OGMtMC4xNDksMi45MzgtMi4zNjIsNi43NjQtNi42MzQsMTEuNDYyQzMxOC42MDYsODMuMzI0LDMxMi4zNDEsODcuMzYyLDMwNS4xMTgsOTAuMDAzeiBNNDE1LjkxOCw3My44NjhjLTAuMjk3LDcuMS0yLjQzNCwxMy45MDItNi40MiwyMC40MTNjLTQuNzI1LDcuODQ1LTEwLjQxNCwxMS43Ni0xNy4wNTUsMTEuNzZjLTIuOTU4LDAtNS4yNDktMS42MjQtNi44NjctNC44OGMtMS40NzYtMi44MDktMi4xNDItNi4wNjQtMS45OTMtOS43NjdjMC4yOTEtNy41NCwyLjUwNS0xNC42NCw2LjY0Ny0yMS4zYzQuODY2LTguMTM2LDExLjA2Ny0xMi4yMDcsMTguNjAxLTEyLjIwN2MyLjM1NiwwLDQuMTY4LDEuNjcsNS40MjQsNC45OTdTNDE2LjA2Nyw2OS44NzUsNDE1LjkxOCw3My44Njh6Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BuYXZfbW9iaWxlX21lbnUgbG9ocF90b3BuYXZfbW9iaWxlX21lbnUganMtdG9wbmF2X21vYmlsZV9tZW51X21haW4iPgogICAgICAgIDxkaXYgY2xhc3M9ImxvaHAtZmxleC13cmFwcGVyIj4KICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRvcG5hdl9tb2JpbGVfYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtYWN0aW9uPSJtZW51LmNsb3NlIiBkYXRhLWd0bS1jbGljaz0ibW9iaWxlX25hdl9tZW51X2Nsb3NlX2NsaWNrIiBjbGFzcz0ibWVudV9jbG9zZSBwdWxsX2xlZnQganMtdG9wbmF2X21vYmlsZV9oZWFkZXJfY2xvc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjIyIiBoZWlnaHQ9IjE3IiB2aWV3Qm94PSIwIDAgMTggMTciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIHN0cm9rZS13aWR0aD0iMC4xIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMSAxNi4yMThMMTYuNjI3LjU5bC43NzguNzc4TDEuNzc4IDE2Ljk5NXoiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik0xLjc3OC41OWwxNS42MjcgMTUuNjI4LS43NzguNzc3TDEgMS4zNjh6IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8iIGNsYXNzPSJsb2hwX2xvZ28iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDQ0MSAxMjQuNjgyIiB3aWR0aD0iODZweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjI3cHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0iTTEyMC40ODEsMjcuMzI2YzUuNDYyLDAsMTAuMTg4LTEuOTEsMTQuMTc0LTUuNzI4YzMuNTQ3LTMuMzc5LDUuMzkyLTYuOTA2LDUuNTQtMTAuNTgzYzAuMTQzLTIuNDkyLTAuODE1LTQuOTUxLTIuODgtNy4zNzhDMTM1LjI0NCwxLjIxNywxMzIuNjYyLDAsMTI5LjU2MiwwYy01LjMyLDAtMTAuMTU1LDEuNzY3LTE0LjUxMSw1LjI4OGMtNC4zNTYsMy41MjctNi42MDgsNy4yMDQtNi43NSwxMS4wMjJDMTA4LjAwMiwyMy42NTYsMTEyLjA2NywyNy4zMjYsMTIwLjQ4MSwyNy4zMjZ6IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0iTTQzNC4wNzksNTAuMTZjLTUuMzE5LTYuOTI1LTEzLjE0NS0xMC4zOTUtMjMuNDc1LTEwLjM5NWMtMTYuMDk3LDAtMjkuNDU1LDUuODk2LTQwLjA4MywxNy42ODhjLTkuOTAyLDEwLjYxNC0xNC40NzgsMjIuMjY1LTEzLjczMywzNC45NDRjMC4wNDksMC45MzIsMC4xMzIsMS44NCwwLjIyOSwyLjczOGMtMC41NTQsMC4yNDEtMS4wOTMsMC40ODMtMS42NjIsMC43MjRjLTEyLjU1Niw1LjQxMS0yNC4xNDcsOC4xMS0zNC43NzUsOC4xMWMtNS4zMiwwLTkuMzA3LTEuODM5LTExLjk2LTUuNTIxYzE0LjMxNi0yLjM1NSwyNi4yMDYtNy44NzYsMzUuNjYyLTE2LjU2OGM4Ljg1NC03Ljk1NSwxMi45ODktMTUuNjg5LDEyLjQtMjMuMTk3Yy0wLjg4Ny0xMS43OC04LjU2Mi0xNy42NzYtMjMuMDM0LTE3LjY3NmMtMTUuNjUsMC0yOS4yMzUsNS45MDktNDAuNzUsMTcuNzE0Yy0xMC40ODQsMTAuNzgzLTE1LjgwNSwyMi4xNDgtMTUuOTQ3LDM0LjEwM2MtMC4wNCwyLjAwNSwwLjA2NiwzLjkzMiwwLjMsNS43ODljLTIuNDc3LDEuNjMyLTQuMzUyLDIuNDU2LTUuNjEzLDIuNDU2Yy0yLjgxLDAtNC41NzYtMC41ODItNS4zMTQtMS43NmMtMC43MzctMS4xNzgtMS4wMzUtMy4zMDgtMC44ODctNi40MDFjMC0xLjE3OCwwLjkxOS01LjY5NSwyLjc3MS0xMy41NjVjMS44NDUtNy44NywyLjg0MS0xMy44NjQsMi45OS0xNy45ODdjMC4yOTEtNi4wMjUtMC44OTQtMTAuNjYtMy41NDctMTMuODk2Yy0zLjEwMS0zLjk3NC04LjE5NC01LjY2My0xNS4yODEtNS4wNzRjLTUuOTAyLDAuNDQ3LTExLjU5MiwyLjY2LTE3LjA1NCw2LjY0N2MtMy4yNDksMi4zNjMtNi41NjksNS41MzQtOS45NjEsOS41MjFjLTEuMTg1LDEuMDM2LTIuMjkxLDItMy4zMjcsMi44OGMwLjE0My02LjA1MS0xLjAzNi0xMC43MDUtMy41NC0xMy45NTRjLTMuMTA3LTMuOTg3LTguMjcyLTUuNjgzLTE1LjUwOC01LjA5NGMtOC40MTUsMC43MzgtMTYuMDIsNC4wNjUtMjIuODA5LDkuOTY3Yy0yLjk1OCwyLjUxMS01LjU0LDUuNDY5LTcuNzUzLDguODYxYzAuMjkxLTEuMzI3LDAuNDQtMi43MzEsMC40NC00LjIwN2MwLTQuNTc2LTEuMTg1LTguNjAyLTMuNTQ3LTEyLjA3MXMtNS40NjItNS4wNTUtOS4zMDEtNC43NTdjLTIuMjEzLDAuMTQ5LTYuNDIsMy4xMDEtMTIuNjIxLDguODU0Yy04LjU2OSw3Ljk3NC0xMy4yMTYsMTIuMjU5LTEzLjk1NCwxMi44NDFsNS4zMTMsNS45OGM0LjEzNi0yLjk4NCw2LjY0Ny00LjQ3OSw3LjUzNC00LjQ3OWMxLjYxOCwwLDIuMjg1LDEuMzI3LDEuOTk0LDMuOTc1Yy0wLjE0MywzLjgzMS0wLjgyMiw5LjE2NC0yLjAzOSwxNi4wMTJjLTAuNzU0LDQuMjQzLTEuMjk4LDcuOTA0LTEuNjM4LDEwLjk4OGMtMC4wNjYsMC4wNTUtMC4xMjksMC4xMDktMC4xOTYsMC4xNjRjLTUuMzIsNC4zNzUtOS4wMDksNi41NTYtMTEuMDc0LDYuNTU2Yy00LjcyNSwwLTcuMDE2LTMuMTU4LTYuODY3LTkuNDg4YzIuMjEzLTEzLjgyNCw0LjI4NS0yNS4yMjIsNi4yMDctMzQuMTk5YzAuNTgzLTUuMjk0LTAuMjY2LTkuNTkyLTIuNTUtMTIuOTA2Yy0yLjI5MS0zLjMxNC01Ljg3LTQuNzQ0LTEwLjczNy00LjMwNGMtMy4xMDcsMC4yOTgtNy44MzIsMy4yNDktMTQuMTgxLDguODZjLTIuMjA1LDItNC40MSwzLjk5Ni02LjYxNSw1Ljk5M2MtMC40MzctMTAuNDQ3LTUuMjA0LTE1LjgyMi0xNC4zMjktMTYuMDljLTEzLjY2OS0wLjQ0LTIyLjkzMSw3LjI3NS0yNy43NzksMjMuMTU4YzIuNTA0LTEuMDc0LDQuOTM4LTEuNjE4LDcuMzAxLTEuNjE4YzUuMDE2LDAsNy4yMjksMi44MjIsNi42NCw4LjQ1M2MtMC4yOTcsMy40MTEtMi41MTEsOC4zNzUtNi42NCwxNC44OTljLTQuMTM2LDYuNTIzLTcuMjM2LDkuNzg2LTkuMzAxLDkuNzg2Yy0yLjY2LDAtNS4wOTQtNS4wMjMtNy4zMDctMTUuMDgxYy0wLjc0NS0yLjk1MS0yLjA3MS0xMC40OTEtMy45ODctMjIuNjE0Yy0xLjc3My0xMS4yMzYtNi40OTktMTYuNDg1LTE0LjE3NC0xNS43NDdjLTMuMjQ5LDAuMjk4LTguMTIzLDMuMjQ5LTE0LjYxNCw4Ljg2QzkuNjY5LDUzLjMxOCw0Ljg2Nyw1Ny41OTcsMCw2MS44NzVsNC42NDEsNS45OGM0LjQyLTMuMDk0LDcuMDAzLTQuNjQ3LDcuNzQxLTQuNjQ3YzMuMzg1LDAsNi41NSw1LjMxMyw5LjUwMSwxNS45MjljMi42NTMsOS43MzMsNS4zMDcsMTkuNDY4LDcuOTYxLDI5LjIwMmMzLjk3NCwxMC42MjEsOC44NDEsMTUuOTI5LDE0LjU4OCwxNS45MjljOS4yODEsMCwyMC42MjctOC43MTksMzQuMDM4LTI2LjE1NEM4Ny44OTIsODUuOTg3LDkzLjk5LDc1Ljc0LDk2LjgsNjcuMzU0YzMuNzItMi43NDgsNi4wMTgtNC4xNDYsNi44NTMtNC4xNDZjMi42NTMsMCwzLjk4NywxLjkyMiwzLjk4Nyw1Ljc1NGMwLDAuNzM4LTEuNDQzLDYuMi00LjMyNCwxNi4zODFjLTIuODgsMTAuMTgyLTQuMzk1LDE3LjcwOS00LjUzNywyMi41NzVjLTAuMTQ5LDQuNzI2LDAuOTk3LDguNTU3LDMuNDMsMTEuNTA4YzIuNDM0LDIuOTUyLDUuOTQxLDQuNDI4LDEwLjUyNCw0LjQyOGM5Ljg5LDAsMTkuNzc5LTQuMjc4LDI5LjY3NS0xMi44MzVjMC44ODEtMC43NzIsMS43MzgtMS41NTcsMi41NzMtMi4zNTJjMC43ODMsMy4zMTIsMi4xMjQsNi4wNDUsNC4wNyw4LjE1YzQuMjU5LDQuNTY5LDExLjQ1Niw2LjcwNiwyMS41OTIsNi40MDhjLTEuMzUzLTMuMjQ5LTEuODg0LTkuMDAzLTEuNTg2LTE3LjI3NGMwLjQ0LTkuMTUyLDIuODA5LTE3Ljk0MSw3LjA5NC0yNi4zNTVzOC4yNzgtMTIuNjI3LDExLjk4LTEyLjYyN2M0LjI4NSwwLDYuMjg1LDIuNzMxLDUuOTg3LDguMTkzYy0wLjE0OSwzLjY5Ni0wLjg3NCw3LjkwMy0yLjE3NSwxMi42MjhjLTEuMzA3LDQuNzI1LTIuMDMyLDkuNDQ5LTIuMTc0LDE0LjE3NGMtMC4yOTgsNy41MzQsMS4zOTIsMTIuOTE5LDUuMDgxLDE2LjE2OGM0LjExNiwzLjY4OSwxMS4zMzQsNS4zOTIsMjEuNjM4LDUuMDk0Yy0xLjU0MS0zLjM5Mi0yLjE2Mi04LjI2Ni0xLjg2NC0xNC42MjFjMC40NC05LjAwMywzLjQ4Mi0xOC4zMDQsOS4xMTMtMjcuOTAyYzUuMzMzLTkuMTUxLDkuOTIyLTEzLjczMywxMy43NzItMTMuNzMzYzMuNTYsMCw1LjI2MywyLjgwOSw1LjExMyw4LjQxNGMtMC4xNDgsMy42ODgtMS4wNzQsOC44NTQtMi43NzEsMTUuNDk0Yy0xLjY5NSw2LjY0MS0yLjYyMSwxMi4zMTYtMi43NjQsMTcuMDQxYy0wLjI5NywxMC42MjgsNC4zNSwxNS45MzYsMTMuOTU1LDE1LjkzNmM5Ljg4OSwwLDE5Ljc3OS00LjI3OCwyOS42NzUtMTIuODM1YzAuMTY0LTAuMTQ0LDAuMzE2LTAuMjkzLDAuNDc5LTAuNDM4YzAuMzQsMC41ODYsMC42ODgsMS4xNjgsMS4wNjgsMS43MzJjNS4xNjUsNy45NjcsMTMuNzM0LDExLjk1NCwyNS42OTUsMTEuOTU0YzE2LjA5LDAsMzEuOTY2LTQuNDkyLDQ3LjYxNi0xMy40ODhjMS43NTYtMC45OSwzLjQyMi0xLjk3OSw1LjAxNy0yLjk3YzAuOTg2LDEuOTkxLDIuMTM4LDMuODY2LDMuNTAyLDUuNTkxYzYuMDUyLDcuNTIxLDE0LjkxMiwxMS4yODEsMjYuNTc1LDExLjI4MWMxNC4wMjUsMCwyNS43NjctNC45MzgsMzUuMjE2LTE0LjgxNWM5LjQ0OS05Ljg3NiwxNC40NjYtMjEuNTk4LDE1LjA2MS0zNS4xNjNDNDQxLjM4Nyw2NC42ODQsNDM5LjEwMiw1Ni41MDMsNDM0LjA3OSw1MC4xNnogTTMwNS4xMTgsOTAuMDAzYy0wLjA4NC0xLjkwOS0wLjA4NC0yLjg2NywwLTIuODY3YzAuMTQzLTUuNTc5LDIuNTA1LTExLjQxNyw3LjA3NC0xNy41MTRzOS4wNjItOS4xNDYsMTMuNDg4LTkuMTQ2YzMuMzkyLDAsNS4wMSwxLjk4Nyw0Ljg2Nyw1Ljk0OGMtMC4xNDksMi45MzgtMi4zNjIsNi43NjQtNi42MzQsMTEuNDYyQzMxOC42MDYsODMuMzI0LDMxMi4zNDEsODcuMzYyLDMwNS4xMTgsOTAuMDAzeiBNNDE1LjkxOCw3My44NjhjLTAuMjk3LDcuMS0yLjQzNCwxMy45MDItNi40MiwyMC40MTNjLTQuNzI1LDcuODQ1LTEwLjQxNCwxMS43Ni0xNy4wNTUsMTEuNzZjLTIuOTU4LDAtNS4yNDktMS42MjQtNi44NjctNC44OGMtMS40NzYtMi44MDktMi4xNDItNi4wNjQtMS45OTMtOS43NjdjMC4yOTEtNy41NCwyLjUwNS0xNC42NCw2LjY0Ny0yMS4zYzQuODY2LTguMTM2LDExLjA2Ny0xMi4yMDcsMTguNjAxLTEyLjIwN2MyLjM1NiwwLDQuMTY4LDEuNjcsNS40MjQsNC45OTdTNDE2LjA2Nyw2OS44NzUsNDE1LjkxOCw3My44Njh6IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFjdGlvbj0ibWVudS5zZXR0aW5ncy5vcGVuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG0tY2xpY2s9Im1vYmlsZV9uYXZfc2V0dGluZ3NfY2xpY2siCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpzZXR0aW5ncyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZW51X3NldHRpbmdzIHB1bGxfcmlnaHQganMtdG9wbmF2X21vYmlsZV9oZWFkZXJfc2V0dGluZ3MiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgdmVyc2lvbj0iMS4xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4PSIwcHgiIHk9IjBweCIgd2lkdGg9IjE4Ljg2cHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIyMHB4IiB2aWV3Qm94PSIwIDAgMTguODYgMjAiIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE4Ljg2IDIwOyIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgaWQ9ImdlYXJfMV8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIGlkPSJJY29uXzFfIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSg1LjAwMDAwMCwgNS4wMDAwMDApIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBpZD0iR3JvdXAtMTBfMV8iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGlkPSJDb21iaW5lZC1TaGFwZV8xXyIgc3R5bGU9ImZpbGw6bm9uZTtzdHJva2U6I2IxYjFiMTtzdHJva2Utd2lkdGg6MjsiIGQ9Ik0xMiw0LjU4bC0wLjU3LTAuMjdWMS45OWMwLTAuNTQtMC40NS0wLjk5LTEtMC45OWgtMmMtMC41NSwwLTEsMC40NS0xLDAuOTl2Mi4zMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEw2Ljg2LDQuNThjLTAuMjksMC4xNC0wLjU3LDAuMy0wLjg0LDAuNDhMNS41LDUuNDJMMy40OSw0LjI2QzMuMDIsMy45OSwyLjQxLDQuMTYsMi4xNCw0LjYzbC0xLDEuNzQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDMC44Niw2Ljg0LDEuMDIsNy40NiwxLjQ5LDcuNzNMMy41LDguODlMMy40NSw5LjUyQzMuNDQsOS42OCwzLjQzLDkuODQsMy40MywxMHMwLjAxLDAuMzIsMC4wMiwwLjQ4bDAuMDUsMC42M2wtMi4wMSwxLjE2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy0wLjQ3LDAuMjctMC42MywwLjg4LTAuMzYsMS4zNmwxLDEuNzRjMC4yNywwLjQ4LDAuODksMC42NCwxLjM2LDAuMzdsMi4wMS0xLjE2bDAuNTIsMC4zNmMwLjI3LDAuMTgsMC41NSwwLjM1LDAuODQsMC40OAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwwLjU3LDAuMjd2Mi4zMWMwLDAuNTQsMC40NSwwLjk5LDEsMC45OWgyYzAuNTUsMCwxLTAuNDUsMS0wLjk5di0yLjMxTDEyLDE1LjQyYzAuMjktMC4xNCwwLjU3LTAuMywwLjg0LTAuNDhsMC41Mi0wLjM2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbDIuMDEsMS4xNmMwLjQ3LDAuMjcsMS4wOCwwLjExLDEuMzYtMC4zN2wxLTEuNzRjMC4yNy0wLjQ4LDAuMTEtMS4wOS0wLjM2LTEuMzZsLTIuMDEtMS4xNmwwLjA1LTAuNjMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMC4wMS0wLjE2LDAuMDItMC4zMiwwLjAyLTAuNDhzLTAuMDEtMC4zMi0wLjAyLTAuNDhsLTAuMDUtMC42M2wyLjAxLTEuMTZjMC40Ny0wLjI3LDAuNjMtMC44OCwwLjM2LTEuMzZsLTEtMS43NAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMtMC4yNy0wLjQ4LTAuODktMC42NC0xLjM2LTAuMzdsLTIuMDEsMS4xNmwtMC41Mi0wLjM2QzEyLjU3LDQuODgsMTIuMjksNC43MiwxMiw0LjU4eiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBpZD0iT3ZhbF8xXyIgc3R5bGU9ImZpbGw6bm9uZTtzdHJva2U6I2IxYjFiMTtzdHJva2Utd2lkdGg6MjsiIGN4PSI5LjQzIiBjeT0iMTAiIHI9IjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPHVsIGlkPSJtZW51X2xpc3QiIGNsYXNzPSJtZW51X2xpc3RfbG9nZ2VkX291dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1icmVlemUtaWdub3JlIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OmpvaW4iIGRhdGEtZ3RtLWNsaWNrPSJ0b3BfbmF2X2pvaW5fY2xpY2siIGlkPSJqcy1qb2luLWxpbmsiIGhyZWY9Ii8vdmltZW8uY29tL2pvaW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSm9pbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgIGhyZWY9Ii8vdmltZW8uY29tL2xvZ19pbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dpbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd25fbGlzdCI+CiAgICA8YnV0dG9uIGNsYXNzPSJkcm9wZG93bl90b2dnbGVfYnV0dG9uIGpzLXRvcG5hdl9tb2JpbGVfbWVudV90b2dnbGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b25fbGFiZWwiPlByb2R1Y3Q8L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9ImRyb3Bkb3duX2Fycm93IGpzLXRvcF9uYXZfdG9nZ2xlX2Fycm93Ij4KICAgICAgICAgICAgPHN2ZyB3aWR0aD0iMTIiIGhlaWdodD0iOCI+CiAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMTEuNDUuOTE0TDUuOTE0IDYuNDUgNC40NzMgNS4wMDhsLTIuMDMtMi4wM0wuMzc4LjkxNCIgc3Ryb2tlPSIjMUEyRTNBIiBzdHJva2Utd2lkdGg9IjEuMiIKICAgICAgICAgICAgICAgICAgICBmaWxsPSJub25lIiAvPgogICAgICAgICAgICA8L3N2Zz4KICAgICAgICA8L3NwYW4+CiAgICA8L2J1dHRvbj4KICAgIDxkaXYgYXJpYS1oaWRkZW49InRydWUiIGNsYXNzPSJ0b2dnbGVfbGlzdCBqcy10b3BfbmF2X3RvZ2dsZV9saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VibWVudV9oZWFkZXIiPkZFQVRVUkVTPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1icmVlemUtaWdub3JlIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnByb2R1Y3R8a2V5d29yZDp2aWRlb19wbGF5ZXJ8dGFyZ2V0Oi9mZWF0dXJlcy92aWRlby1wbGF5ZXIiIGhyZWY9Ii8vdmltZW8uY29tL2ZlYXR1cmVzL3ZpZGVvLXBsYXllciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlkZW8gUGxheWVyICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWJyZWV6ZS1pZ25vcmUgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOmNyZWF0ZXx0YXJnZXQ6L2NyZWF0ZSIgaHJlZj0iLy92aW1lby5jb20vY3JlYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcmVhdGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYnJlZXplLWlnbm9yZSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpwcm9kdWN0fGtleXdvcmQ6bGl2ZV9zdHJlYW1pbmd8dGFyZ2V0Oi9mZWF0dXJlcy9saXZlc3RyZWFtaW5nIiBocmVmPSIvL3ZpbWVvLmNvbS9mZWF0dXJlcy9saXZlc3RyZWFtaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXZlIFN0cmVhbWluZyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1icmVlemUtaWdub3JlIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnByb2R1Y3R8a2V5d29yZDpzY3JlZW5fcmVjb3JkZXJ8dGFyZ2V0Oi9mZWF0dXJlcy9zY3JlZW4tcmVjb3JkZXIiIGhyZWY9Ii8vdmltZW8uY29tL2ZlYXR1cmVzL3NjcmVlbi1yZWNvcmRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2NyZWVuIFJlY29yZGVyICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWJyZWV6ZS1pZ25vcmUgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOnByaXZhY3l8dGFyZ2V0Oi9mZWF0dXJlcy92aWRlby1wcml2YWN5IiBocmVmPSIvL3ZpbWVvLmNvbS9mZWF0dXJlcy92aWRlby1wcml2YWN5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcml2YWN5ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWJyZWV6ZS1pZ25vcmUgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOmNvbGxhYm9yYXRpb258dGFyZ2V0Oi9mZWF0dXJlcy92aWRlby1jb2xsYWJvcmF0aW9uIiBocmVmPSIvL3ZpbWVvLmNvbS9mZWF0dXJlcy92aWRlby1jb2xsYWJvcmF0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb2xsYWJvcmF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWJyZWV6ZS1pZ25vcmUgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOmRpc3RyaWJ1dGlvbnx0YXJnZXQ6L2ZlYXR1cmVzL3ZpZGVvLW1hcmtldGluZyIgaHJlZj0iLy92aW1lby5jb20vZmVhdHVyZXMvdmlkZW8tbWFya2V0aW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaXN0cmlidXRpb24gJiBNYXJrZXRpbmcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYnJlZXplLWlnbm9yZSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpwcm9kdWN0fGtleXdvcmQ6bW9uZXRpemF0aW9ufHRhcmdldDovZmVhdHVyZXMvdmlkZW8tbW9uZXRpemF0aW9uIiBocmVmPSIvL3ZpbWVvLmNvbS9mZWF0dXJlcy92aWRlby1tb25ldGl6YXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vbmV0aXphdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1icmVlemUtaWdub3JlIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnByb2R1Y3R8a2V5d29yZDphbmFseXRpY3N8dGFyZ2V0Oi9mZWF0dXJlcy92aWRlby1hbmFseXRpY3MiIGhyZWY9Ii8vdmltZW8uY29tL2ZlYXR1cmVzL3ZpZGVvLWFuYWx5dGljcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5hbHl0aWNzICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWJyZWV6ZS1pZ25vcmUgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOmhvc3Rpbmd8dGFyZ2V0Oi9mZWF0dXJlcy9vbmxpbmUtdmlkZW8taG9zdGluZyIgaHJlZj0iLy92aW1lby5jb20vZmVhdHVyZXMvb25saW5lLXZpZGVvLWhvc3RpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvc3RpbmcgJiBNYW5hZ2VtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWJyZWV6ZS1pZ25vcmUgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOnN0b2NrfHRhcmdldDovc3RvY2siIGhyZWY9Ii8vdmltZW8uY29tL3N0b2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdG9jayAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1icmVlemUtaWdub3JlIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnByb2R1Y3R8a2V5d29yZDpmb3JfaGlyZXx0YXJnZXQ6L2Zvci1oaXJlIiBocmVmPSIvL3ZpbWVvLmNvbS9mb3ItaGlyZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9yIEhpcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWJtZW51X2hlYWRlciI+SElHSExJR0hUUzwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYnJlZXplLWlnbm9yZSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpwcm9kdWN0fGtleXdvcmQ6Y3JlYXRlfHRhcmdldDovY3JlYXRlIiBocmVmPSIvL3ZpbWVvLmNvbS9jcmVhdGUiIGNsYXNzPSJ3aXRoX2Rlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+Q3JlYXRlPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5NYWtlIHNvY2lhbCB2aWRlb3MgaW4gYW4gaW5zdGFudDogdXNlIGN1c3RvbSB0ZW1wbGF0ZXMgdG8gdGVsbCB0aGUgcmlnaHQgc3RvcnkgZm9yIHlvdXIgYnVzaW5lc3MuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYnJlZXplLWlnbm9yZSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpwcm9kdWN0fGtleXdvcmQ6bGl2ZV9zdHJlYW1pbmd8dGFyZ2V0Oi9mZWF0dXJlcy9saXZlc3RyZWFtaW5nIiBocmVmPSIvL3ZpbWVvLmNvbS9mZWF0dXJlcy9saXZlc3RyZWFtaW5nIiBjbGFzcz0id2l0aF9kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkxpdmUgU3RyZWFtaW5nPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5Ccm9hZGNhc3QgeW91ciBldmVudHMgd2l0aCByZWxpYWJsZSwgaGlnaC1xdWFsaXR5IGxpdmUgc3RyZWFtaW5nLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWJyZWV6ZS1pZ25vcmUgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6cHJvZHVjdHxrZXl3b3JkOnNjcmVlbl9yZWNvcmRlcnx0YXJnZXQ6L2ZlYXR1cmVzL3NjcmVlbi1yZWNvcmRlciIgaHJlZj0iLy92aW1lby5jb20vZmVhdHVyZXMvc2NyZWVuLXJlY29yZGVyIiBjbGFzcz0id2l0aF9kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlNjcmVlbiBSZWNvcmRlcjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UmVjb3JkIGFuZCBpbnN0YW50bHkgc2hhcmUgdmlkZW8gbWVzc2FnZXMgZnJvbSB5b3VyIGJyb3dzZXIuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYnJlZXplLWlnbm9yZSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpwcm9kdWN0fGtleXdvcmQ6ZW50ZXJwcmlzZSIgaHJlZj0iLy92aW1lby5jb20vZW50ZXJwcmlzZSIgY2xhc3M9IndpdGhfZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5FbnRlcnByaXNlPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5HZXQgeW91ciB0ZWFtIGFsaWduZWQgd2l0aCBhbGwgdGhlIHRvb2xzIHlvdSBuZWVkIG9uIG9uZSBzZWN1cmUsIHJlbGlhYmxlIHZpZGVvIHBsYXRmb3JtLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duX2xpc3QiPgogICAgPGJ1dHRvbiBjbGFzcz0iZHJvcGRvd25fdG9nZ2xlX2J1dHRvbiBqcy10b3BuYXZfbW9iaWxlX21lbnVfdG9nZ2xlIj4KICAgICAgICA8c3BhbiBjbGFzcz0iYnV0dG9uX2xhYmVsIj5Tb2x1dGlvbnM8L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9ImRyb3Bkb3duX2Fycm93IGpzLXRvcF9uYXZfdG9nZ2xlX2Fycm93Ij4KICAgICAgICAgICAgPHN2ZyB3aWR0aD0iMTIiIGhlaWdodD0iOCI+CiAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMTEuNDUuOTE0TDUuOTE0IDYuNDUgNC40NzMgNS4wMDhsLTIuMDMtMi4wM0wuMzc4LjkxNCIgc3Ryb2tlPSIjMUEyRTNBIiBzdHJva2Utd2lkdGg9IjEuMiIKICAgICAgICAgICAgICAgICAgICBmaWxsPSJub25lIiAvPgogICAgICAgICAgICA8L3N2Zz4KICAgICAgICA8L3NwYW4+CiAgICA8L2J1dHRvbj4KICAgIDxkaXYgYXJpYS1oaWRkZW49InRydWUiIGNsYXNzPSJ0b2dnbGVfbGlzdCBqcy10b3BfbmF2X3RvZ2dsZV9saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYnJlZXplLWlnbm9yZSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpzb2x1dGlvbnN8a2V5d29yZDpjcmVhdGl2ZV9wcm9mZXNzaW9uYWxzfHRhcmdldDovc29sdXRpb25zL2NyZWF0aXZlLXByb2Zlc3Npb25hbHMtc29sdXRpb25zIiBocmVmPSIvL3ZpbWVvLmNvbS9zb2x1dGlvbnMvY3JlYXRpdmUtcHJvZmVzc2lvbmFscy1zb2x1dGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENyZWF0aXZlIFByb2Zlc3Npb25hbHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYnJlZXplLWlnbm9yZSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpzb2x1dGlvbnN8a2V5d29yZDpzbWFsbF9idXNpbmVzc3x0YXJnZXQ6L3NvbHV0aW9ucy9zbWFsbC1idXNpbmVzcy1zb2x1dGlvbnMiIGhyZWY9Ii8vdmltZW8uY29tL3NvbHV0aW9ucy9zbWFsbC1idXNpbmVzcy1zb2x1dGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNtYWxsIEJ1c2luZXNzICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWJyZWV6ZS1pZ25vcmUgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6c29sdXRpb25zfGtleXdvcmQ6ZW50ZXJwcmlzZXx0YXJnZXQ6L2VudGVycHJpc2UiIGhyZWY9Ii8vdmltZW8uY29tL2VudGVycHJpc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVudGVycHJpc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYnJlZXplLWlnbm9yZSBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpzb2x1dGlvbnN8a2V5d29yZDplZHVjYXRpb258dGFyZ2V0Oi9zb2x1dGlvbnMvZWR1Y2F0aW9uLXNvbHV0aW9ucyIgaHJlZj0iLy92aW1lby5jb20vc29sdXRpb25zL2VkdWNhdGlvbi1zb2x1dGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVkdWNhdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1icmVlemUtaWdub3JlIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnNvbHV0aW9uc3xrZXl3b3JkOmZpdG5lc3N8dGFyZ2V0Oi9zb2x1dGlvbnMvZml0bmVzcy1zb2x1dGlvbnMiIGhyZWY9Ii8vdmltZW8uY29tL3NvbHV0aW9ucy9maXRuZXNzLXNvbHV0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRml0bmVzcyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1icmVlemUtaWdub3JlIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50OnNvbHV0aW9uc3xrZXl3b3JkOmZhaXRofHRhcmdldDovc29sdXRpb25zL2ZhaXRoLXNvbHV0aW9ucyIgaHJlZj0iLy92aW1lby5jb20vc29sdXRpb25zL2ZhaXRoLXNvbHV0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmFpdGggICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd25fbGlzdCI+CiAgICA8YnV0dG9uIGNsYXNzPSJkcm9wZG93bl90b2dnbGVfYnV0dG9uIGpzLXRvcG5hdl9tb2JpbGVfbWVudV90b2dnbGUiPgogICAgICAgIDxzcGFuIGNsYXNzPSJidXR0b25fbGFiZWwiPkluc3BpcmF0aW9uPC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJkcm9wZG93bl9hcnJvdyBqcy10b3BfbmF2X3RvZ2dsZV9hcnJvdyI+CiAgICAgICAgICAgIDxzdmcgd2lkdGg9IjEyIiBoZWlnaHQ9IjgiPgogICAgICAgICAgICAgICAgPHBhdGggZD0iTTExLjQ1LjkxNEw1LjkxNCA2LjQ1IDQuNDczIDUuMDA4bC0yLjAzLTIuMDNMLjM3OC45MTQiIHN0cm9rZT0iIzFBMkUzQSIgc3Ryb2tlLXdpZHRoPSIxLjIiCiAgICAgICAgICAgICAgICAgICAgZmlsbD0ibm9uZSIgLz4KICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgPC9zcGFuPgogICAgPC9idXR0b24+CiAgICA8ZGl2IGFyaWEtaGlkZGVuPSJ0cnVlIiBjbGFzcz0idG9nZ2xlX2xpc3QganMtdG9wX25hdl90b2dnbGVfbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWJyZWV6ZS1pZ25vcmUgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6aW5zcGlyYXRpb258a2V5d29yZDp3YXRjaHx0YXJnZXQ6L3dhdGNoIiBkYXRhLWd0bS1jbGljaz0idG9wX25hdl9pbnNwaXJhdGlvbl93YXRjaCIgaHJlZj0iLy92aW1lby5jb20vd2F0Y2giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdhdGNoICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWJyZWV6ZS1pZ25vcmUgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxjb21wb25lbnQ6aW5zcGlyYXRpb258a2V5d29yZDpzdGFmZl9waWNrc3x0YXJnZXQ6L2NoYW5uZWxzL3N0YWZmcGlja3MiIGRhdGEtZ3RtLWNsaWNrPSJ0b3BfbmF2X2luc3BpcmF0aW9uX3N0YWZmX3BpY2tzIiBocmVmPSIvL3ZpbWVvLmNvbS9jaGFubmVscy9zdGFmZnBpY2tzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGFmZiBQaWNrcyAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1icmVlemUtaWdub3JlIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50Omluc3BpcmF0aW9ufGtleXdvcmQ6dmlkZW9fc2Nob29sfHRhcmdldDovYmxvZy9jYXRlZ29yeS92aWRlby1zY2hvb2wiIGRhdGEtZ3RtLWNsaWNrPSJ0b3BfbmF2X2luc3BpcmF0aW9uX3ZpZGVvX3NjaG9vbCIgaHJlZj0iLy92aW1lby5jb20vYmxvZy9jYXRlZ29yeS92aWRlby1zY2hvb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZGVvIFNjaG9vbCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1icmVlemUtaWdub3JlIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOnRvcF9uYXZ8Y29tcG9uZW50Omluc3BpcmF0aW9ufGtleXdvcmQ6YmxvZ3x0YXJnZXQ6L2Jsb2cvIiBkYXRhLWd0bS1jbGljaz0idG9wX25hdl9pbnNwaXJhdGlvbl9ibG9nIiBocmVmPSIvL3ZpbWVvLmNvbS9ibG9nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaW1lbyBCbG9nICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYWN0aW9uPSJtZW51LmNsb3NlIiBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpwcmljaW5nIiBkYXRhLWd0bS1jbGljaz0idG9wX25hdl9wcmljaW5nX2NsaWNrIiBpZD0ianMtdXBncmFkZS1saW5rIiBjbGFzcz0iIiBocmVmPSIvL3ZpbWVvLmNvbS91cGdyYWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByaWNpbmcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYWN0aW9uPSJtZW51LmNsb3NlIiBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjp0b3BfbmF2fGNvbXBvbmVudDpzZWFyY2giIGRhdGEtZ3RtLWNsaWNrPSJtb2JpbGVfbmF2X3NlYXJjaF9jbGljayIgaWQ9ImpzLXNlYXJjaC1saW5rIiBjbGFzcz0iIiBocmVmPSIvL3ZpbWVvLmNvbS9zZWFyY2giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9IjE1IiBoZWlnaHQ9IjE2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgZmlsbD0iIzFBMkUzQSIgZmlsbC1ydWxlPSJldmVub2RkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik0xMC44OTIgMTBsNC4wMTQgNC40NTktLjg5MS44MDNMMTAgMTAuODAyeiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik02LjUgMTEuODE3QTUuMzI3IDUuMzI3IDAgMDAxMS44MTcgNi41IDUuMzI3IDUuMzI3IDAgMDA2LjUgMS4xODMgNS4zMjcgNS4zMjcgMCAwMDEuMTgzIDYuNSA1LjMyNyA1LjMyNyAwIDAwNi41IDExLjgxN3pNNi41IDEzQTYuNTEgNi41MSAwIDAxMCA2LjUgNi41MSA2LjUxIDAgMDE2LjUgMCA2LjUxIDYuNTEgMCAwMTEzIDYuNSA2LjUxIDYuNTEgMCAwMTYuNSAxM3oiIGZpbGwtcnVsZT0ibm9uemVybyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWFyY2ggICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBsb2FkX2NvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvdXBsb2FkIiBkYXRhLWJyZWV6ZS1pZ25vcmUgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6dG9wX25hdnxrZXl3b3JkOnVwbG9hZCIgZGF0YS1ndG0tY2xpY2s9InRvcF9uYXZfdXBsb2FkX2NsaWNrIiBpZD0ianMtdXBsb2FkLWxpbmsiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIHdpZHRoPSIyMyIgaGVpZ2h0PSIxNyIgdmlld0JveD0iMCAwIDMwIDIyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik05LjU4MyA0LjkyM0E4LjIgOC4yIDAgMDEyNC43NzggOS4zOSA1LjcgNS43IDAgMDEyMi43IDIwLjRsLTE2LS4wMDFBNS43IDUuNyAwIDExNi43IDloMS42ODJhOC4xNjIgOC4xNjIgMCAwMTEuMi00LjA3N3ptLTMuNjM2IDUuMzRBNC41MDEgNC41MDEgMCAwMDYuNyAxOS4yaDE2YTQuNSA0LjUgMCAwMC43OTktOC45M0E3IDcgMCAxMDkuNjUgMTAuMkg2LjdhNC41MyA0LjUzIDAgMDAtLjc1My4wNjN6bTkuNjMzLjg1OVYxOS4yaC0xdi04LjA5M2wtMy4wNDMgMy4wNDMtLjcwNy0uNzA3TDE1LjA3MyA5LjJsNC4yNDIgNC4yNDMtLjcwNy43MDctMy4wMjgtMy4wMjh6IiBmaWxsPSIjRkZGIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj5VcGxvYWQ8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgICAgIDxzZWN0aW9uIGNsYXNzPSJ0b3BuYXZfbW9iaWxlX21lbnUgdG9wbmF2X21vYmlsZV9tZW51X3NldHRpbmdzIGxvaHBfbW9iaWxlX21lbnVfc2V0dGluZ3MganMtdG9wbmF2X21vYmlsZV9tZW51X3NldHRpbmdzIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BuYXZfbW9iaWxlX2JhciBzdWJtZW51Ij4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0idG9wbmF2X21vYmlsZV9idXR0b24gdG9wbmF2X21vYmlsZV9wdWxsX2xlZnQganMtdG9wbmF2X21vYmlsZV9oZWFkZXJfc2V0dGluc19jbG9zZSB0b3BuYXZfaWNvbl9tb2JpbGVfYXJyb3dsZWZ0X2IiPiA8L2J1dHRvbj4KICAgICAgICAgICAgPGgxIGNsYXNzPSJ0b3BuYXZfbW9iaWxlX2hlYWRlcl90aXRsZSBzdWJtZW51Ij5Nb3JlIHN0dWZmPC9oMT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPHVsIGNsYXNzPSJtZW51X2xpc3Rfc2V0dGluZ3NfbG9nZ2VkX291dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1hY3Rpb249Im1lbnUuY2xvc2UiIGNsYXNzPSIgIiBocmVmPSIvL3ZpbWVvLmNvbS90ZXJtcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXJtcyBvZiBTZXJ2aWNlICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1hY3Rpb249Im1lbnUuY2xvc2UiIGNsYXNzPSIgIiBocmVmPSIvL3ZpbWVvLmNvbS9wcml2YWN5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByaXZhY3kgUG9saWN5ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1hY3Rpb249Im1lbnUuY2xvc2UiIGNsYXNzPSIgIiBocmVmPSIvL3ZpbWVvLmNvbS9kbWNhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvcHlyaWdodCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGRhdGEtYWN0aW9uPSJtZW51LmNsb3NlIiBjbGFzcz0iICIgaHJlZj0iLy92aW1lby5jb20vY29va2llX3BvbGljeSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb29raWVzICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1hY3Rpb249ImRlc2t0b3AiIG9uY2xpY2s9InZpbWVvLm1vYmlsZS5kZXNrdG9wX3NoYXJlZC5fczJkcygpOyByZXR1cm4gZmFsc2UiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXNrdG9wIHNpdGUgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBsYW5ndWFnZSBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhbmd1YWdlICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBvbmNoYW5nZT0idmltZW8ubW9iaWxlLmRlc2t0b3Bfc2hhcmVkLl9zMmwodGhpcykiIHRpdGxlPSJDaG9vc2UgYSBkaWZmZXJlbnQgbGFuZ3VhZ2UiIGNsYXNzPSJ0b3BuYXZfbW9iaWxlX21lbnVfc2V0dGluZ3NfbGFuZ3VhZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBjbGFzcz0ic2VsZWN0ZWQiIHNlbGVjdGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImVuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJzZWxlY3RfbGFuZ3VhZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbmdsaXNoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0ic2VsZWN0X2xhbmd1YWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXNwYcOxb2wgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImRlLURFIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJzZWxlY3RfbGFuZ3VhZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXV0c2NoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmci1GUiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0ic2VsZWN0X2xhbmd1YWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRnJhbsOnYWlzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJqYS1KUCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0ic2VsZWN0X2xhbmd1YWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg5pel5pys6KqeICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJwdC1CUiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0ic2VsZWN0X2xhbmd1YWdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9ydHVndcOqcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0ia28tS1IiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InNlbGVjdF9sYW5ndWFnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIO2VnOq1reyWtCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWFjdGlvbj0ibWVudS5jbG9zZSIgY2xhc3M9IiAiIGhyZWY9Ii8vdmltZW8uY29tL2ZhcSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGQVEgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWFjdGlvbj0ibWVudS5jbG9zZSIgY2xhc3M9IiAiIGhyZWY9Ii8vdmltZW8uY29taGVscC52aW1lby5jb20vaGMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVscCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CgoKICAgICAgICA8ZGl2IGNsYXNzPSJ0b3BuYXZfbW9iaWxlX21lbnVfY29weXJpZ2h0Ij5UTSArIMKpIDIwMjAgVmltZW8sIEluYy48L2Rpdj4KICAgIDwvc2VjdGlvbj4KCgogICAgICAgIDwvbmF2PgoKPHNjcmlwdD4KKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQpewoKICAgIC8vIEdsb2JhbCB2YWx1ZXMKICAgIHdpbmRvdy52aW1lbyA9IHdpbmRvdy52aW1lbyB8fCB7fTsKICAgIHZpbWVvLm1vYmlsZSA9IHZpbWVvLm1vYmlsZSB8fCB7fTsKICAgIFZpbWVvID0gdmltZW8ubW9iaWxlIHx8IHt9OwogICAgVmltZW8uZGVza3RvcF9zaGFyZWQgPSBWaW1lby5kZXNrdG9wX3NoYXJlZCB8fCB7fTsKCiAgICAvLyBERVNLVE9QIEhBTkRMRVJTCgogICAgdmFyIGRlc2t0b3AgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9wbmF2X2Rlc2t0b3AnKTsKCiAgICAvLyBQcmV2ZW50IHRvdWNoIGRldmljZSB0byBoaWd0bGlnaHQgdGhlIGFyZWEgdGFwcGVkCiAgICBkZXNrdG9wLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbihlKXsKICAgICAgICAvLyBUYWtlIGludG8gY29uc2lkZXJhdGlvbiBhdmF0YXIgaW1nCiAgICAgICAgdmFyIHRhcmdldCA9IChlLnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbWcnKSA/IGUudGFyZ2V0LnBhcmVudE5vZGUgOiBlLnRhcmdldDsKCiAgICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3RvcG5hdl9oYXNfZHJvcGRvd24nKSkgewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgfQogICAgfSwgZmFsc2UpOwoKICAgIC8vIEFkZCBsYXN0X3BhZ2UgY29va2llCiAgICB2YXIgbGlzdGVuID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93ID8gJ3RvdWNoc3RhcnQnIDogd2luZG93LlBvaW50ZXJFdmVudCA/ICdwb2ludGVyZG93bicgOiB3aW5kb3cuTVNQb2ludGVyRXZlbnQgPyAnTVNQb2ludGVyRG93bicgOiAnY2xpY2snOwogICAgZGVza3RvcC5hZGRFdmVudExpc3RlbmVyKGxpc3RlbiwgZnVuY3Rpb24oZSl7CiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnanMtdG9wbmF2X21lbnVfYXV0aCcpKSB7CiAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9ICdsYXN0X3BhZ2U9JyArIGVuY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpICsgJztwYXRoPVwnL1wnO21heC1hZ2U9MTgwMDsnOwogICAgICAgIH0KICAgIH0sIGZhbHNlKTsKCiAgICAvLyBNT0JJTEUgSEFORExFUlMKCiAgICAvLyBUcmlnZ2VyIGlPUyBVcGxvYWQgZmxvdwogICAgVmltZW8uZGVza3RvcF9zaGFyZWQuX3VwbG9hZCA9IGZ1bmN0aW9uKGUpIHsKICAgICAgICAvLyBzaG93IGlUdW5lcyBvbmx5IGlmIHdlIGFyZSBpbiBpT1Mgd29ybGQKICAgICAgICBpZiAoL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpewogICAgICAgICAgICB2YXIgZGVlcGxpbmsgPSAndmltZW86Ly9hcHAudmltZW8uY29tL3VwbG9hZD9yZWY9bW9iaWxld2ViJywKICAgICAgICAgICAgICAgIGZhbGxiYWNrID0gJy91cGxvYWQnLAogICAgICAgICAgICAgICAgd2Via2l0SGlkZGVuQ2FsbGJhY2ssCiAgICAgICAgICAgICAgICBoaXRDYWxsYmFjazsKCiAgICAgICAgICAgIC8vIENhbGxiYWNrcwogICAgICAgICAgICB3ZWJraXRIaWRkZW5DYWxsYmFjayA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgLy8gSWYgdGhlIHVzZXIgaXMgc3RpbGwgaGVyZSBvcGVuIHRoZSB1cmwgcGFnZS4KICAgICAgICAgICAgICAgIGlmICghZG9jdW1lbnQud2Via2l0SGlkZGVuKSB7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gZmFsbGJhY2s7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAvLyBUcnkgdG8gb3BlbiB0aGUgVmltZW8gQXBwCiAgICAgICAgICAgIGhpdENhbGxiYWNrID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBkZWVwbGluazsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQod2Via2l0SGlkZGVuQ2FsbGJhY2ssIDI1KTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGhpdENhbGxiYWNrKCk7CgogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBlLmhyZWY7CgogICAgfQoKCi8vIEFGVEVSIE1PQklMRSBOQVYgVEVTVCBSRUNPTkNJTEUgV0lUSCBUSEUgYG1vYmlsZV9tZW51X3NjcmlwdC5waHRtbGAKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gU3dpdGNoIHRvIGRlc2t0b3Agc2l0ZQogICAgVmltZW8uZGVza3RvcF9zaGFyZWQuX3MyZHMgPSBmdW5jdGlvbigpIHsKICAgICAgICBkb2N1bWVudC5jb29raWU9J29wdF9vdXRfbW9iaWxlPTE7ZXhwaXJlcz1GcmksIDMxIERlYyA5OTk5IDIzOjU5OjU5IEdNVDtkb21haW49JyArIHZpbWVvLmRvbWFpbjsKICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CiAgICB9OwoKICAgIC8vIFN3aXRjaCB0byBsYW5ndWFnZQogICAgVmltZW8uZGVza3RvcF9zaGFyZWQuX3MybCA9IGZ1bmN0aW9uKHNlbCkgewogICAgICAgIHZhciBsYW5nID0gc2VsLnZhbHVlLAogICAgICAgICAgICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCiAgICAgICAgeGhyLm9wZW4oJ1BPU1QnLCAnL3NldHRpbmdzL2xvY2FsZScpOwogICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLVJlcXVlc3RlZC1XaXRoJywgJ1hNTEh0dHBSZXF1ZXN0Jyk7CiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTsKICAgICAgICB4aHIuc2VuZCgnbG9jYWxlPScgKyBsYW5nICsgJyZ0b2tlbj0nICsgdmltZW8ueHNyZnQpOwogICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiBwb3N0KCkgewogICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfTsKCiAgICB2YXIgbW9iaWxlTWVudUVsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy10b3BuYXZfbW9iaWxlX2hlYWRlcl9sb2dvJyk7CiAgICBpZiAobW9iaWxlTWVudUVsZSkgewogICAgICAgIG1vYmlsZU1lbnVFbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7CgogICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIC8vIE9wZW4gTWVudQogICAgICAgICAgICB2YXIgbW9iaWxlX21lbnVfbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy10b3BuYXZfbW9iaWxlX21lbnVfbWFpbicpOwogICAgICAgICAgICBtb2JpbGVfbWVudV9tYWluLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwoKICAgICAgICAgICAgLy8gQ2xvc2UgTWVudQogICAgICAgICAgICB2YXIgbW9iaWxlX2hlYWRlcl9jbG9zZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy10b3BuYXZfbW9iaWxlX2hlYWRlcl9jbG9zZScpOwogICAgICAgICAgICBtb2JpbGVfaGVhZGVyX2Nsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIG1vYmlsZV9tZW51X21haW4uc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyBUb2dnbGUgU2V0dGluZ3MKICAgICAgICAgICAgdmFyIG1vYmlsZV9tZW51X3NldHRpbmdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvcG5hdl9tb2JpbGVfbWVudV9zZXR0aW5ncycpOwogICAgICAgICAgICB2YXIgdG9wbmF2MjAxNV9tb2JpbGVfaGVhZGVyX3NldHRpbmdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvcG5hdl9tb2JpbGVfaGVhZGVyX3NldHRpbmdzJyk7CiAgICAgICAgICAgIHRvcG5hdjIwMTVfbW9iaWxlX2hlYWRlcl9zZXR0aW5ncy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICBtb2JpbGVfbWVudV9zZXR0aW5ncy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgIG1vYmlsZV9tZW51X21haW4uc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgIHZhciB0b3BuYXYyMDE1X21vYmlsZV9oZWFkZXJfc2V0dGluZ3NfY2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdG9wbmF2X21vYmlsZV9oZWFkZXJfc2V0dGluc19jbG9zZScpOwogICAgICAgICAgICAgICAgdG9wbmF2MjAxNV9tb2JpbGVfaGVhZGVyX3NldHRpbmdzX2Nsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIG1vYmlsZV9tZW51X3NldHRpbmdzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgbW9iaWxlX21lbnVfbWFpbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vRHJvcGRvd24KICAgICAgICAgICAgdmFyIG1vYmlsZV9kcm9wZG93bl90b2dnbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtdG9wbmF2X21vYmlsZV9tZW51X3RvZ2dsZScpOwogICAgICAgICAgICBtb2JpbGVfZHJvcGRvd25fdG9nZ2xlLmZvckVhY2goZnVuY3Rpb24oYnRuKSB7CiAgICAgICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IGUudGFyZ2V0OwogICAgICAgICAgICAgICAgICAgIHZhciBhcnJvdyA9IGJ1dHRvbi5xdWVyeVNlbGVjdG9yKCcuanMtdG9wX25hdl90b2dnbGVfYXJyb3cnKTsKICAgICAgICAgICAgICAgICAgICBpZihhcnJvdykgewogICAgICAgICAgICAgICAgICAgICAgICBpZihhcnJvdy5jbGFzc0xpc3QuY29udGFpbnMoJ3JvdGF0ZScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJvdy5jbGFzc0xpc3QucmVtb3ZlKCdyb3RhdGUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycm93LmNsYXNzTGlzdC5hZGQoJ3JvdGF0ZScpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBidXR0b24ucGFyZW50RWxlbWVudDsKICAgICAgICAgICAgICAgICAgICBpZihwYXJlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZV9saXN0ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy10b3BfbmF2X3RvZ2dsZV9saXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRvZ2dsZV9saXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0b2dnbGVfbGlzdC5jbGFzc0xpc3QuY29udGFpbnMoJ2V4cGFuZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlX2xpc3Quc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZV9saXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2V4cGFuZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdmYWRlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZV9saXN0LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlX2xpc3QuY2xhc3NMaXN0LmFkZCgnZXhwYW5kJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2ZhZGUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgfTsKCiAgICB2YXIgbW9iaWxlQWxidW1zRWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvcG5hdl9tb2JpbGVfaGVhZGVyX2FsYnVtcycpOwogICAgaWYgKG1vYmlsZUFsYnVtc0VsZSkgewogICAgICAgIG1vYmlsZUFsYnVtc0VsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB2YXIgbW9iaWxlX21lbnVfYWxidW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvcG5hdl9tb2JpbGVfYWxidW1fbGlzdCcpOwogICAgICAgICAgICBtb2JpbGVfbWVudV9hbGJ1bXMuY2xhc3NMaXN0LmFkZCgnb3BlbicpOwoKICAgICAgICAgICAgLy8gQ2xvc2UKICAgICAgICAgICAgdmFyIG1vYmlsZV9hbGJ1bXNfY2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdG9wbmF2X21vYmlsZV9hbGJ1bV9saXN0X2Nsb3NlJyk7CiAgICAgICAgICAgIGlmIChtb2JpbGVfYWxidW1zX2Nsb3NlKSB7CiAgICAgICAgICAgICAgICBtb2JpbGVfYWxidW1zX2Nsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIG1vYmlsZV9tZW51X2FsYnVtcy5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJyk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH0sIGZhbHNlKTsKICAgIH07Cn0pKHdpbmRvdywgZG9jdW1lbnQpOwoKLy8gXl5eXl5eXl5eXl5eXl5eXl5eXl4KLy8gQUZURVIgTU9CSUxFIE5BViBURVNUIFJFQ09OQ0lMRSBXSVRIIFRIRSBgbW9iaWxlX21lbnVfc2NyaXB0LnBodG1sYAovLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cjwvc2NyaXB0PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndyYXBfY29udGVudCB2YXJpYW50LXYyIj4KICAgICAgICAgICAgICAgIAoKCgo8ZGl2IGNsYXNzPSJleGNlcHRpb25fY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9ImV4Y2VwdGlvbl9zZWN0aW9uIGV4Y2VwdGlvbl9zZWN0aW9uLS1pbmZvIj4KICAgICAgICA8aDEgY2xhc3M9ImV4Y2VwdGlvbl90aXRsZSBpcmlzX2hlYWRlciI+U29ycnksIHRoaXMgdmlkZW8gaXMgdW5hdmFpbGFibGU8L2gxPgoKICAgICAgICA8ZGl2IGNsYXNzPSJleGNlcHRpb25fY29udGVudCI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJleGNlcHRpb25fbWVzc2FnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJleGNlcHRpb25fbm90aWZpY2F0aW9uIGlyaXNfbm90aWZpY2F0aW9uIGlyaXNfbm90aWZpY2F0aW9uLS13YXJuaW5nIj4KICAgIDxkaXYgY2xhc3M9ImlyaXNfbm90aWZpY2F0aW9uLS13YXJuaW5nLWljb24iPgogICAgICAgIDxzcGFuIGNsYXNzPSJpcmlzX2ljIGlzLS0xNiI+PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjI5OCAzODkgMTYgMTQiPjxwYXRoIGQ9Ik0zMTMuNyA0MDBsLTYtMTBjLS40LS42LTEtMS0xLjctMXMtMS40LjQtMS43IDFsLTYgMTBjLS4yLjMtLjMuNi0uMyAxIDAgMS4xLjkgMiAyIDJoMTJjMS4xIDAgMi0uOSAyLTIgMC0uNC0uMS0uNy0uMy0xem0tNi43IDFoLTJ2LTJoMnYyem0wLTNoLTJ2LTVoMnY1eiIvPjwvc3ZnPgo8L3NwYW4+CiAgICA8L2Rpdj4KCiAgICA8cD5WaW1lbyBoYXMgcmVtb3ZlZCBvciBkaXNhYmxlZCBhY2Nlc3MgdG8gdGhlIHZpZGVvIDxzdHJvbmc+VGhlIE1lYW4gV29ybGQgU3luZHJvbWUgY3Ugc3ViPC9zdHJvbmc+IGFzIGEgcmVzdWx0IG9mIGEgdGhpcmQtcGFydHkgbm90aWZpY2F0aW9uIGJ5IDxzdHJvbmc+TWVkaWEgRWR1Y2F0aW9uIEZvdW5kYXRpb248L3N0cm9uZz4gdGhhdCBjbGFpbXMgdGhpcyBtYXRlcmlhbCBpcyBpbmZyaW5naW5nIG9uIHRoZWlyIGNvcHlyaWdodC48L3A+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJpcmlzX25vdGlmaWNhdGlvbi1hZGRlbmR1bS0td2FybmluZyI+CiAgICAgICAgVGhpcyB2aWRlbyB3YXMgcmVtb3ZlZCBvbiBXZWRuZXNkYXksIEF1Z3VzdCAxNCwgMjAxMyBBdCAxOjEwIFBNLiAgICAgICAgICAgIDwvZGl2Pgo8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0iZXhjZXB0aW9uX3NlYXJjaCIgYWN0aW9uPSIvc2VhcmNoIiBtZXRob2Q9ImdldCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXhjZXB0aW9uX3NlYXJjaC1pbnB1dC13cmFwcGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJleGNlcHRpb25fc2VhcmNoLWlucHV0IGlyaXNfaW5wdXQgaXJpc19pbnB1dC0tc2VhcmNoIGpzLXNlYXJjaF9hdXRvY29tcGxldGUiIHR5cGU9InRleHQiIG5hbWU9InEiIHBsYWNlaG9sZGVyPSJTZWFyY2ggdmlkZW9zLCBwZW9wbGUsIGFuZCBtb3JlIiBhdXRvY29tcGxldGU9Im9mZiIgLz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJleGNlcHRpb25fc2VhcmNoLWJ1dHRvbiBpcmlzX2J0biBpcmlzX2J0bi0tcHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpcmlzX2J0bi1jb250ZW50Ij5TZWFyY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJleGNlcHRpb25fYXV4aWxpYXJ5Ij48L2Rpdj4KPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8Zm9vdGVyIGNsYXNzPSJmb290ZXJfdjIgZm9vdGVyX3YyLS1yZXNwb25zaXZlIj4KICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz0iZm9vdGVyX3YyX19zaXRlbWFwIj4KICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl92Ml9fbGlua3MiPgogICAgICAgIDxzZWN0aW9uIGNsYXNzPSJmb290ZXJfdjJfX2xpbmsgZm9vdGVyX3YyX2FjY29yZGlvbiI+CiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9vdGVyX3YyX2FjY29yZGlvbl9fY2hlY2siIHR5cGU9ImNoZWNrYm94Ij4KICAgICAgICAgICAgPGg0IGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaGVhZGVyLXRleHQiPlZJTUVPPC9zcGFuPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX3YyX2FjY29yZGlvbl9fcmV2ZWFsIj4KICAgICAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzPSJpcmlzX2ljIGlzLS0xMiIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgOCA4Ij48cGF0aCBkPSJNNy43MDcgMi4yOTNjLS4zOS0uMzktMS4wMjQtLjM5LTEuNDE0IDBMNCA0LjU4NiAxLjcwNyAyLjI5M2MtLjM5LS4zOS0xLjAyNC0uMzktMS40MTQgMC0uMzkuMzktLjM5IDEuMDI0IDAgMS40MTRsMyAzYy4zOS4zOSAxLjAyNC4zOSAxLjQxNCAwbDMtM2MuMzktLjM5LjM5LTEuMDI0IDAtMS40MTR6Ii8+PC9zdmc+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgPHVsIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstbGlzdCBmb290ZXJfdjJfYWNjb3JkaW9uX19tZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii91cGdyYWRlIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfcHJpY2luZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDp2aW1lb3xrZXl3b3JkOnByaWNpbmciCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICBQcmljaW5nICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3VwbG9hZCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG0tY2xpY2s9ImZvb3Rlcl9saW5rX3VwbG9hZF9jbGljayIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDp2aW1lb3xrZXl3b3JkOnVwbG9hZCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIFVwbG9hZCAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9jaGFubmVscy9zdGFmZnBpY2tzIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfc3RhZmZfcGlja3MiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOmZvb3Rlcnxjb21wb25lbnQ6dmltZW98a2V5d29yZDpzdGFmZl9waWNrcyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIFN0YWZmIFBpY2tzICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL29uZGVtYW5kIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfb25fZGVtYW5kX2NsaWNrIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OnZpbWVvfGtleXdvcmQ6b25fZGVtYW5kIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgT24gRGVtYW5kICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly92aW1lby5jb20vb3R0IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfdmltZW9fb3R0IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OnZpbWVvfGtleXdvcmQ6b3R0IgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgVmltZW8gT1RUICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3NpdGVfbWFwIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfc2l0ZV9tYXBfY2xpY2siCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOmZvb3Rlcnxjb21wb25lbnQ6dmltZW98a2V5d29yZDpzaXRlX21hcCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIFNpdGUgbWFwICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvc2VjdGlvbj4KCiAgICAgICAgPHNlY3Rpb24gY2xhc3M9ImZvb3Rlcl92Ml9fbGluayBmb290ZXJfdjJfYWNjb3JkaW9uIj4KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb290ZXJfdjJfYWNjb3JkaW9uX19jaGVjayIgdHlwZT0iY2hlY2tib3giPgogICAgICAgICAgICA8aDQgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1oZWFkZXIiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1oZWFkZXItdGV4dCI+UFJPRFVDVDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl92Ml9hY2NvcmRpb25fX3JldmVhbCI+CiAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz0iaXJpc19pYyBpcy0tMTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDggOCI+PHBhdGggZD0iTTcuNzA3IDIuMjkzYy0uMzktLjM5LTEuMDI0LS4zOS0xLjQxNCAwTDQgNC41ODYgMS43MDcgMi4yOTNjLS4zOS0uMzktMS4wMjQtLjM5LTEuNDE0IDAtLjM5LjM5LS4zOSAxLjAyNCAwIDEuNDE0bDMgM2MuMzkuMzkgMS4wMjQuMzkgMS40MTQgMGwzLTNjLjM5LS4zOS4zOS0xLjAyNCAwLTEuNDE0eiIvPjwvc3ZnPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgIDx1bCBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWxpc3QgZm9vdGVyX3YyX2FjY29yZGlvbl9fbWVudSI+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS0zIGlyaXNfbGluay0tZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvZmVhdHVyZXMvdmlkZW8tcGxheWVyIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfdmlkZW9fcGxheWVyIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OmZlYXR1cmVzfGtleXdvcmQ6dmlkZW9fcGxheWVyIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgVmlkZW8gUGxheWVyICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL2NyZWF0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG0tY2xpY2s9ImZvb3Rlcl9saW5rX2NyZWF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OnNvbHV0aW9uc3xrZXl3b3JkOmNyZWF0ZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIENyZWF0ZSAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9mZWF0dXJlcy92aWRlby1wcml2YWN5IgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfcHJpdmFjeSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDpmZWF0dXJlc3xrZXl3b3JkOnByaXZhY3kiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICBQcml2YWN5ICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL2ZlYXR1cmVzL3ZpZGVvLWNvbGxhYm9yYXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtLWNsaWNrPSJmb290ZXJfbGlua19jb2xsYWJvcmF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OmZlYXR1cmVzfGtleXdvcmQ6Y29sbGFib3JhdGlvbiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbGxhYm9yYXRpb24gICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS0zIGlyaXNfbGluay0tZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvZmVhdHVyZXMvdmlkZW8tbWFya2V0aW5nIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfZGlzdHJpYnV0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OmZlYXR1cmVzfGtleXdvcmQ6ZGlzdHJpYnV0aW9uIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgRGlzdHJpYnV0aW9uICYgbWFya2V0aW5nICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL2ZlYXR1cmVzL3ZpZGVvLW1vbmV0aXphdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG0tY2xpY2s9ImZvb3Rlcl9saW5rX21vbmV0aXphdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDpmZWF0dXJlc3xrZXl3b3JkOm1vbmV0aXphdGlvbiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIE1vbmV0aXphdGlvbiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9saXZlIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfbGl2ZV9zdHJlYW1pbmciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOmZvb3Rlcnxjb21wb25lbnQ6ZmVhdHVyZXN8a2V5d29yZDpsaXZlX3N0cmVhbWluZyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIExpdmUgU3RyZWFtaW5nICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL2ZlYXR1cmVzL3ZpZGVvLWFuYWx5dGljcyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG0tY2xpY2s9ImZvb3Rlcl9saW5rX2FuYWx5dGljcyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDpmZWF0dXJlc3xrZXl3b3JkOmFuYWx5dGljcyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIEFuYWx5dGljcyAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9mZWF0dXJlcy9vbmxpbmUtdmlkZW8taG9zdGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG0tY2xpY2s9ImZvb3Rlcl9saW5rX2hvc3RpbmciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOmZvb3Rlcnxjb21wb25lbnQ6ZmVhdHVyZXN8a2V5d29yZDpob3N0aW5nIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgSG9zdGluZyAmIG1hbmFnZW1lbnQgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS0zIGlyaXNfbGluay0tZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvZW50ZXJwcmlzZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG0tY2xpY2s9ImZvb3Rlcl9saW5rX2VudGVycHJpc2UiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOmZvb3Rlcnxjb21wb25lbnQ6c29sdXRpb25zfGtleXdvcmQ6ZW50ZXJwcmlzZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIEVudGVycHJpc2UgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS0zIGlyaXNfbGluay0tZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvZm9yLWhpcmUiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtLWNsaWNrPSJmb290ZXJfbGlua19mb3JfaGlyZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDpzb2x1dGlvbnN8a2V5d29yZDpmb3JfaGlyZSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIEZvciBIaXJlICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3N0b2NrIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfc3RvY2siCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOmZvb3Rlcnxjb21wb25lbnQ6c29sdXRpb25zfGtleXdvcmQ6c3RvY2siCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICBTdG9jayAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L3NlY3Rpb24+CgogICAgICAgIDxzZWN0aW9uIGNsYXNzPSJmb290ZXJfdjJfX2xpbmsgZm9vdGVyX3YyX2FjY29yZGlvbiI+CiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9vdGVyX3YyX2FjY29yZGlvbl9fY2hlY2siIHR5cGU9ImNoZWNrYm94Ij4KICAgICAgICAgICAgPGg0IGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaGVhZGVyLXRleHQiPkFQUFM8L3NwYW4+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJfdjJfYWNjb3JkaW9uX19yZXZlYWwiPgogICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9ImlyaXNfaWMgaXMtLTEyIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA4IDgiPjxwYXRoIGQ9Ik03LjcwNyAyLjI5M2MtLjM5LS4zOS0xLjAyNC0uMzktMS40MTQgMEw0IDQuNTg2IDEuNzA3IDIuMjkzYy0uMzktLjM5LTEuMDI0LS4zOS0xLjQxNCAwLS4zOS4zOS0uMzkgMS4wMjQgMCAxLjQxNGwzIDNjLjM5LjM5IDEuMDI0LjM5IDEuNDE0IDBsMy0zYy4zOS0uMzkuMzktMS4wMjQgMC0xLjQxNHoiLz48L3N2Zz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2g0PgogICAgICAgICAgICA8dWwgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1saXN0IGZvb3Rlcl92Ml9hY2NvcmRpb25fX21lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL2FwcHMuYXBwbGUuY29tL2FwcC9hcHBsZS1zdG9yZS9pZDEzNTY2ODY3NjM/cHQ9NDE3NzMxJmFtcDtjdD1sb2hwJmFtcDttdD04IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDphcHBzfGtleXdvcmQ6bWFjb3MiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpbWVvIGZvciBtYWNPUyAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL2l0dW5lcy5hcHBsZS5jb20vYXBwL3ZpbWVvL2lkNDI1MTk0NzU5P210PTgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OmFwcHN8a2V5d29yZDppb3MiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpbWVvIGZvciBpT1MgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS0zIGlyaXNfbGluay0tZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS52aW1lby5hbmRyb2lkLnZpZGVvYXBwJmFtcDtyZWZlcnJlcj11dG1fc291cmNlJTNEZm9vdGVyJTI2dXRtX21lZGl1bSUzRGxvaHAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OmFwcHN8a2V5d29yZDphbmRyb2lkIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaW1lbyBmb3IgQW5kcm9pZCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwczovL2FwcHMuYXBwbGUuY29tL3VzL2FwcC92aW1lby1jcmVhdGUvaWQxNDkxNzkxNTEzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDphcHBzfGtleXdvcmQ6Y3JlYXRlX2lvcyIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVmltZW8gQ3JlYXRlIGZvciBpT1MgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS0zIGlyaXNfbGluay0tZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS52aW1lb2NyZWF0ZS52aWRlb2VkaXRvci5tb3ZpZW1ha2VyJmFtcDtyZWZlcnJlcj11dG1fc291cmNlJTNEZm9vdGVyJTI2dXRtX21lZGl1bSUzRGxvaHAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OmFwcHN8a2V5d29yZDpjcmVhdGVfYW5kcm9pZCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVmltZW8gQ3JlYXRlIGZvciBBbmRyb2lkICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vbWFnaXN0by5jb20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OmFwcHN8a2V5d29yZDptYWdpc3RvIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYWdpc3RvICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vYXBwcy5zaG9waWZ5LmNvbS92aWRlb2Z5X21ha2VfcHJvZHVjdF92aWRlb3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OmFwcHN8a2V5d29yZDp2aW1lb19zaG9waWZ5IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaW1lbyBmb3IgU2hvcGlmeSAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICA8L3NlY3Rpb24+CgogICAgICAgIDxzZWN0aW9uIGNsYXNzPSJmb290ZXJfdjJfX2xpbmsgZm9vdGVyX3YyX2FjY29yZGlvbiI+CiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9vdGVyX3YyX2FjY29yZGlvbl9fY2hlY2siIHR5cGU9ImNoZWNrYm94Ij4KICAgICAgICAgICAgPGg0IGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaGVhZGVyLXRleHQiPlJFU09VUkNFUzwvc3Bhbj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl92Ml9hY2NvcmRpb25fX3JldmVhbCI+CiAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz0iaXJpc19pYyBpcy0tMTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDggOCI+PHBhdGggZD0iTTcuNzA3IDIuMjkzYy0uMzktLjM5LTEuMDI0LS4zOS0xLjQxNCAwTDQgNC41ODYgMS43MDcgMi4yOTNjLS4zOS0uMzktMS4wMjQtLjM5LTEuNDE0IDAtLjM5LjM5LS4zOSAxLjAyNCAwIDEuNDE0bDMgM2MuMzkuMzkgMS4wMjQuMzkgMS40MTQgMGwzLTNjLjM5LS4zOS4zOS0xLjAyNCAwLTEuNDE0eiIvPjwvc3ZnPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgIDx1bCBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWxpc3QgZm9vdGVyX3YyX2FjY29yZGlvbl9fbWVudSI+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS0zIGlyaXNfbGluay0tZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL2hlbHAiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtLWNsaWNrPSJmb290ZXJfbGlua19oZWxwX2NlbnRlcl9jbGljayIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDpyZXNvdXJjZXN8a2V5d29yZDpoZWxwX2NlbnRlciIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIEhlbHAgQ2VudGVyICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL2Jsb2ciCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtLWNsaWNrPSJmb290ZXJfbGlua192aW1lb19ibG9nX2NsaWNrIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OnJlc291cmNlc3xrZXl3b3JkOnZpbWVvX2Jsb2ciCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICBCbG9nICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL2Jsb2cvY2F0ZWdvcnkvdmlkZW8tc2Nob29sIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfdmlkZW9fc2Nob29sX2NsaWNrIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OnJlc291cmNlc3xrZXl3b3JkOnZpZGVvX3NjaG9vbCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIFZpZGVvIFNjaG9vbCAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vdmltZW8uY29tL290dC9yZXNvdXJjZXMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtLWNsaWNrPSJmb290ZXJfbGlua19vdHRfcmVzb3VyY2VzIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OnJlc291cmNlc3xrZXl3b3JkOm90dF9yZXNvdXJjZXMiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICBPVFQgUmVzb3VyY2VzICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9kZXZlbG9wZXIudmltZW8uY29tIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfZGV2ZWxvcGVyc19jbGljayIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDpyZXNvdXJjZXN8a2V5d29yZDpkZXZlbG9wZXJzIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgRGV2ZWxvcGVycyAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9zdHVkZW50cyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG0tY2xpY2s9ImZvb3Rlcl9saW5rX3N0dWRlbnRzIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZhdGFsLWF0dHJhY3Rpb249ImNvbnRhaW5lcjpmb290ZXJ8Y29tcG9uZW50OnJlc291cmNlc3xrZXl3b3JkOnN0dWRlbnRzIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgU3R1ZGVudHMgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS0zIGlyaXNfbGluay0tZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvaGVscC9ndWlkZWxpbmVzIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfdmltZW9fZ3VpZGVsaW5lc19jbGljayIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDpyZXNvdXJjZXN8a2V5d29yZDp2aW1lb19ndWlkZWxpbmVzIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgR3VpZGVsaW5lcyAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICA8L3NlY3Rpb24+CgogICAgICAgIDxzZWN0aW9uIGNsYXNzPSJmb290ZXJfdjJfX2xpbmsgZm9vdGVyX3YyX2FjY29yZGlvbiI+CiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9vdGVyX3YyX2FjY29yZGlvbl9fY2hlY2siIHR5cGU9ImNoZWNrYm94Ij4KICAgICAgICAgICAgPGg0IGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaGVhZGVyLXRleHQiPlVQR1JBREU8L3NwYW4+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJfdjJfYWNjb3JkaW9uX19yZXZlYWwiPgogICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9ImlyaXNfaWMgaXMtLTEyIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA4IDgiPjxwYXRoIGQ9Ik03LjcwNyAyLjI5M2MtLjM5LS4zOS0xLjAyNC0uMzktMS40MTQgMEw0IDQuNTg2IDEuNzA3IDIuMjkzYy0uMzktLjM5LTEuMDI0LS4zOS0xLjQxNCAwLS4zOS4zOS0uMzkgMS4wMjQgMCAxLjQxNGwzIDNjLjM5LjM5IDEuMDI0LjM5IDEuNDE0IDBsMy0zYy4zOS0uMzkuMzktMS4wMjQgMC0xLjQxNHoiLz48L3N2Zz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2g0PgogICAgICAgICAgICA8dWwgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1saXN0IGZvb3Rlcl92Ml9hY2NvcmRpb25fX21lbnUiPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3N0b3JlL3BsdXMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtLWNsaWNrPSJmb290ZXJfbGlua191cGdyYWRlX3BsdXMiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOmZvb3Rlcnxjb21wb25lbnQ6dXBncmFkZV9saW5rfGtleXdvcmQ6cGx1cyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIFZpbWVvIFBsdXMgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS0zIGlyaXNfbGluay0tZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvc3RvcmUvcHJvIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfdXBncmFkZV9wcm8iCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOmZvb3Rlcnxjb21wb25lbnQ6dXBncmFkZV9saW5rfGtleXdvcmQ6cHJvIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgVmltZW8gUFJPICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3N0b3JlL2J1c2luZXNzIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfdXBncmFkZV9idXNpbmVzcyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDp1cGdyYWRlX2xpbmt8a2V5d29yZDpidXNpbmVzcyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIFZpbWVvIEJ1c2luZXNzICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xpbmstaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktMyBpcmlzX2xpbmstLWZvb3RlciIKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0iL3N0b3JlL3ByZW1pdW0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtLWNsaWNrPSJmb290ZXJfbGlua191cGdyYWRlX3ByZW1pdW0iCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOmZvb3Rlcnxjb21wb25lbnQ6dXBncmFkZV9saW5rfGtleXdvcmQ6cHJlbWl1bSIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIFZpbWVvIFByZW1pdW0gICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS0zIGlyaXNfbGluay0tZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvZW50ZXJwcmlzZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG0tY2xpY2s9ImZvb3Rlcl9saW5rX3VwZ3JhZGVfZW50ZXJwcmlzZSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDp1cGdyYWRlX2xpbmt8a2V5d29yZDplbnRlcnByaXNlIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgVmltZW8gRW50ZXJwcmlzZSAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHA6Ly92aW1lby5leHRvbGUuY29tL3dlYnNpdGVfZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfdXBncmFkZV9yZWZfZnJpZW5kIgogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDp1cGdyYWRlX2xpbmt8a2V5d29yZDpyZWZlcl9hX2ZyaWVuZCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIFJlZmVyIGEgZnJpZW5kICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvc2VjdGlvbj4KCiAgICAgICAgPHNlY3Rpb24gY2xhc3M9ImZvb3Rlcl92Ml9fbGluayBmb290ZXJfdjJfYWNjb3JkaW9uIj4KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb290ZXJfdjJfYWNjb3JkaW9uX19jaGVjayIgdHlwZT0iY2hlY2tib3giPgogICAgICAgICAgICA8aDQgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1oZWFkZXIiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1oZWFkZXItdGV4dCI+Q09NUEFOWTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl92Ml9hY2NvcmRpb25fX3JldmVhbCI+CiAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz0iaXJpc19pYyBpcy0tMTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDggOCI+PHBhdGggZD0iTTcuNzA3IDIuMjkzYy0uMzktLjM5LTEuMDI0LS4zOS0xLjQxNCAwTDQgNC41ODYgMS43MDcgMi4yOTNjLS4zOS0uMzktMS4wMjQtLjM5LTEuNDE0IDAtLjM5LjM5LS4zOSAxLjAyNCAwIDEuNDE0bDMgM2MuMzkuMzkgMS4wMjQuMzkgMS40MTQgMGwzLTNjLjM5LS4zOS4zOS0xLjAyNCAwLTEuNDE0eiIvPjwvc3ZnPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgIDx1bCBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWxpc3QgZm9vdGVyX3YyX2FjY29yZGlvbl9fbWVudSI+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGluay1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS0zIGlyaXNfbGluay0tZm9vdGVyIgogICAgICAgICAgICAgICAgICAgICAgICBocmVmPSIvYWJvdXQiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtLWNsaWNrPSJmb290ZXJfbGlua19hYm91dF9jbGljayIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDpjb21wYW55fGtleXdvcmQ6YWJvdXRfdmltZW8iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICBBYm91dCAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZm9vdGVyX3YyX19saW5rLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTMgaXJpc19saW5rLS1mb290ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9qb2JzIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bS1jbGljaz0iZm9vdGVyX2xpbmtfam9icyIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6Zm9vdGVyfGNvbXBvbmVudDpjb21wYW55fGtleXdvcmQ6am9icyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIEpvYnMgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9zZWN0aW9uPgogICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGFzaWRlIGlkPSJmb290ZXJfdGlwIiBjbGFzcz0iZm9vdGVyX3YyX190aXAiIGFyaWEtbGl2ZT0icG9saXRlIj4KICAgICAgICAgICAgPGg0IGNsYXNzPSJmb290ZXJfdjJfX3RpcC1oZWFkZXIiPkRpZCB5b3Uga25vdz88L2g0PgogICAgICAgICAgICA8cCBjbGFzcz0iYWN0aXZlIGZvb3Rlcl92Ml9fdGlwLWNvbnRlbnQiPllvdSBjYW4gd2luIGEgZnJlZSA8YSBocmVmPSIvcGx1cyIgIGRhdGEtZmF0YWwtYXR0cmFjdGlvbj0iY29udGFpbmVyOmRpZF95b3Vfa25vd19ib3h8Y29tcG9uZW50OnByb2R1Y3QiPlZpbWVvIFBsdXM8L2E+IG1lbWJlcnNoaXAgYnkgc3RyZXRjaGluZyB5b3VyIGZpbG1tYWtpbmcgbXVzY2xlcyBpbiBvbmUgb2Ygb3VyIDxhIGhyZWY9Imh0dHBzOi8vdmltZW8uY29tL2dyb3Vwcy93ZWVrZW5kY2hhbGxlbmdlIiAgZGF0YS1mYXRhbC1hdHRyYWN0aW9uPSJjb250YWluZXI6ZGlkX3lvdV9rbm93X2JveHxjb21wb25lbnQ6cHJvZHVjdCI+V2Vla2VuZCBDaGFsbGVuZ2VzPC9hPjwvcD4KICAgICAgICA8L2FzaWRlPgogICAgPC9zZWN0aW9uPgogICAgCiAgICAgICAgPHNlY3Rpb24gY2xhc3M9ImZvb3Rlcl92Ml9fYXV4aWxpYXJ5ICI+CgogICAgPGRpdiBjbGFzcz0iZm9vdGVyX3YyX19sZWdhbCI+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX3YyX19hdXhpbGlhcnktY29udGVudCI+CiAgICAgICAgICAgIDxwPlRNICsgJmNvcHk7IDIwMjAgVmltZW8sIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC48L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPHVsIGNsYXNzPSJmb290ZXJfdjJfX2xlZ2FsLWxpc3QiPgogICAgICAgICAgICA8bGkgY2xhc3M9ImZvb3Rlcl92Ml9fbGVnYWwtbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTQiIGhyZWY9Ii90ZXJtcyIgdGl0bGU9IlRlcm1zICZhbXA7IENvbmRpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgIFRlcm1zICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xlZ2FsLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS00IiBocmVmPSIvcHJpdmFjeSIgdGl0bGU9IlByaXZhY3kgUG9saWN5Ij4KICAgICAgICAgICAgICAgICAgICBQcml2YWN5ICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xlZ2FsLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS00IiBocmVmPSIvcHJpdmFjeS9jYWxpZm9ybmlhLXByaXZhY3kiIHRpdGxlPSJDQSBQcml2YWN5Ij4KICAgICAgICAgICAgICAgICAgICBDQSBQcml2YWN5ICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xlZ2FsLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS00IiBocmVmPSIvZG1jYSIgdGl0bGU9IkNvcHlyaWdodCBJbmZvcm1hdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgQ29weXJpZ2h0ICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJmb290ZXJfdjJfX2xlZ2FsLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaXJpc19saW5rIGlyaXNfbGluay0tZ3JheS00IiBocmVmPSIvY29va2llX3BvbGljeSIgdGl0bGU9IkxlYXJuIG1vcmUgYWJvdXQgaG93IFZpbWVvIHVzZXMgY29va2llcyI+CiAgICAgICAgICAgICAgICAgICAgQ29va2llcyAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgPC91bD4KICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJfdjJfX2F1eGlsaWFyeS1jb250ZW50IGZvb3Rlcl92Ml9fd2l0aGxvdmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFkZSB3aXRoIDxzdmcgY2xhc3M9ImlyaXNfaWMgaXMtLTEyIGZvb3Rlcl92Ml9fbG92ZWhlYXJ0IGZvb3Rlcl92Ml9fYXV4aWxpYXJ5LWljb24iIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDEyIDEyIj48cGF0aCBkPSJNOSAyQzcuMzEyIDIgNiAzLjUgNiAzLjVTNC42ODcgMiAzIDJDMS4zMTIgMiAwIDMuMzEyIDAgNWMwIDMuMTg4IDMuNzUgMy4wMTIgNiA2IDIuMjUtMi45ODggNi0yLjgxMiA2LTYgMC0xLjY4OC0xLjMxMy0zLTMtM3oiLz48L3N2Zz4gaW4gTllDLiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJmb290ZXJfdjJfX2ZpbHRlcnMgZm9vdGVyX3YyX19hdXhpbGlhcnktY29udGVudCI+CiAgICAgICAgPHNwYW4gY2xhc3M9Imxhbmd1YWdlIj4KICAgICAgICAgICAgTGFuZ3VhZ2U6CiAgICAgICAgICAgIDxhIGNsYXNzPSJpcmlzX2xpbmsgaXJpc19saW5rLS1ncmF5LTQiIGhyZWY9IiNsYW5ndWFnZSIgb25jbGljaz0idmltZW8uTW9kYWwuY3JlYXRlKHtjb250ZW50OiAnL3NldHRpbmdzL2xvY2FsZScsIHNpemU6ICdzbWFsbCd9KTsgcmV0dXJuIGZhbHNlOyIgdGl0bGU9IkNob29zZSBhIGRpZmZlcmVudCBsYW5ndWFnZSI+RW5nbGlzaDwvYT4KICAgICAgICA8L3NwYW4+CgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb290ZXJfdjJfX2ZpbHRlciI+TWF0dXJlIGNvbnRlbnQgZmlsdGVyOiA8L3NwYW4+PGEgY2xhc3M9ImlyaXNfbGluayBpcmlzX2xpbmstLWdyYXktNCBmb290ZXJfdjJfX2ZpbHRlcnNfX2xhbmcgY29udGVudGZpbHRlciBqcy1mb290ZXJfY29udGVudGZpbHRlcl9saW5rIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIG9uY2xpY2s9InZpbWVvLk1vZGFsLmNyZWF0ZSh7Y29udGVudDogJy9zZXR0aW5ncy9jb250ZW50cmF0aW5nJ30pIiB0aXRsZT0iQ2hhbmdlIHlvdXIgbWF0dXJlIGNvbnRlbnQgZmlsdGVyIj5Ob25lPC9hPgogICAgICAgICAgICA8L2Rpdj4KCjwvc2VjdGlvbj4KPC9mb290ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKPHNjcmlwdD4KICAgIHZhciBfX2ZhID0gX19mYSB8fCBbXTsKICAgIC8qKgogICAgICogQmVjYXVzZSBzaW5nbGUgcGFnZSBhcHBsaWNhdGlvbnMgc3VjaCBhcyB0aGUgYXBwIHNoZWxsIHdpbGwgYmUgdHJhY2tpbmcKICAgICAqIEZhdGFsIEF0dHJhY3Rpb24gcGFnZSB2aWV3cyBvbiBSZWFjdCBsaWZlY3ljbGUgaG9va3MgKGNvbXBvbmVudERpZE1vdW50KQogICAgICogd2Ugd2FudCB0byBhdm9pZCBkaXNwYXRjaGluZyB0aGUgcGFnZXZpZXcgZXZlbnQgZnJvbSB0aGUgUEhQIHRlbXBsYXRlCiAgICAgKiBhbmQgZGVmZXIgdGhpcyBzb3J0IG9mIHRyYWNraW5nIGxvZ2ljIHRvIHRoZSBmcm9udCBlbmQuCiAgICAgKgogICAgICogVGhpcyBjaGVjayBhbGxvd3MgdXMgdG8gZGVjbGFyZSBpbiBhIGNvbnRyb2xsZXIgd2hldGhlciBvciBub3Qgd2UKICAgICAqIHdhbnQgdG8gZGlzcGF0Y2ggdGhhdCBwcmVsaW1pbmFyeSBwYWdldmlldy4KICAgICAqCiAgICAgKiBUaGUgcHJvcGVydHkgaXMgYWRkaXRpdmUgb25seSwgYXMgdG8gbm90IGFmZmVjdCBleGlzdGluZyBwYWdldmlld3MuCiAgICAgKi8KICAgICAgICAgICAgX19mYS5wdXNoKFsndHJhY2tQYWdldmlldyddKTsKICAgIAogICAgLyoqCiAgICAgKiBBZGQgc2VydmVyIHNpZGUgQUJMaW5jb2xuIGV4cGVyaW1lbnRzIHRvIEdUTSBkYXRhIGxheWVyLgogICAgICovCiAgICAKICAgICAgICB2YXIgX2V4dGVuZCA9IGZ1bmN0aW9uKCl7Zm9yKHZhciByPWFyZ3VtZW50c1swXSxuPTEsZT1hcmd1bWVudHMubGVuZ3RoO2U+bjtuKyspe3ZhciB0PWFyZ3VtZW50c1tuXTtmb3IodmFyIGEgaW4gdCl0Lmhhc093blByb3BlcnR5KGEpJiYoclthXT10W2FdKX1yZXR1cm4gcn07CgogICAgICAgIHZhciBDU1NfRElSID0gJ2h0dHBzOi8vZi52aW1lb2Nkbi5jb20vc3R5bGVzL2Nzc19vcHQvJywKICAgICAgICBKU19ESVIgPSAnaHR0cHM6Ly9mLnZpbWVvY2RuLmNvbS9qc19vcHQvJywKICAgICAgICBJTUFHRV9ESVIgPSAnaHR0cHM6Ly9mLnZpbWVvY2RuLmNvbS9pbWFnZXNfdjYvJywKICAgICAgICBGT05UX0RJUiA9ICdodHRwczovL2YudmltZW9jZG4uY29tL2ZvbnRzLycsCiAgICAgICAgU1ZHX0RJUiA9ICdodHRwczovL2YudmltZW9jZG4uY29tL3N2Zy8nLAogICAgICAgICAgICAgICAgQlVJTERfSEFTSCA9ICc5NjI1Zic7CgogICAgCiAgICAgICAgdmFyIHZpbWVvID0gX2V4dGVuZCgod2luZG93LnZpbWVvIHx8IHt9KSwgeyJhcHBfdmVyc2lvbiI6InY2IiwiZG9tYWluIjoidmltZW8uY29tIiwidXJsIjoidmltZW8uY29tIiwiY3VyX3VzZXIiOmZhbHNlLCJvcmlnaW5fdXNlcl9pZCI6bnVsbCwib3JpZ2luX3VzZXIiOmZhbHNlLCJpc19tb2JpbGUiOmZhbHNlfSk7CiAgICB2aW1lby5jb25maWcgPSBfZXh0ZW5kKCh2aW1lby5jb25maWcgfHwge30pLCB7InN0aWNreV90b3BuYXYiOnsiZXhjbHVkZWRfcGFnZXMiOlsiVmltZW9cXENvbnRyb2xsZXJcXEFib3V0Q29udHJvbGxlcjptYWluIiwiVmltZW9cXENvbnRyb2xsZXJcXEFib3V0Q29udHJvbGxlcjpwcm9mZXNzaW9uYWxzIiwiVmltZW9cXENvbnRyb2xsZXJcXEFib3V0Q29udHJvbGxlcjpldmVyeW9uZSIsIlZpbWVvXFxDb250cm9sbGVyXFxIb21lQ29udHJvbGxlcjp1cGdyYWRlIiwiVmltZW9cXENvbnRyb2xsZXJcXFN0b3JlQ29udHJvbGxlcjptYWluIiwiVmltZW9cXENvbnRyb2xsZXJcXFVzZXJcXFNldHRpbmdzMkNvbnRyb2xsZXI6bWFpbiIsIlZpbWVvXFxDb250cm9sbGVyXFxVc2VyXFxTZXR0aW5nczJDb250cm9sbGVyOnRlYW1fbWVtYmVycyIsIlZpbWVvXFxDb250cm9sbGVyXFxVc2VyXFxTZXR0aW5nczJDb250cm9sbGVyOnBhc3N3b3JkIiwiVmltZW9cXENvbnRyb2xsZXJcXFByb2ZpbGVDb250cm9sbGVyOm1haW4iLCJWaW1lb1xcQ29udHJvbGxlclxcQ2xpcFN0YXRzQ29udHJvbGxlcjptYWluIiwiVmltZW9cXENvbnRyb2xsZXJcXENsaXBcXFNldHRpbmdzXFxFbWJlZENvbnRyb2xsZXI6ZW1iZWQiLCJWaW1lb1xcQ29udHJvbGxlclxcVmlkZW9NYW5hZ2VyQ29udHJvbGxlciIsIlZpbWVvXFxDb250cm9sbGVyXFxWaWRlb1Jldmlld0NvbnRyb2xsZXIiLCJWaW1lb1xcQ29udHJvbGxlclxcTWVzc2FnZXNDb250cm9sbGVyIiwiVmltZW9cXENvbnRyb2xsZXJcXFN0YXRzQ29udHJvbGxlciIsIlZpbWVvXFxDb250cm9sbGVyXFxVcGxvYWRDb250cm9sbGVyIiwiVmltZW9cXENvbnRyb2xsZXJcXE9uRGVtYW5kXFxTZXR0aW5nc0NvbnRyb2xsZXIiLCJWaW1lb1xcQ29udHJvbGxlclxcQ2xpcFxcU2V0dGluZ3NDb250cm9sbGVyIl0sInN0aWNreV9pbmNsdWRlZF9wYWdlcyI6WyJWaW1lb1xcQ29udHJvbGxlclxcU3RvY2tcXFN0b2NrSG9tZVBhZ2VDb250cm9sbGVyIiwiVmltZW9cXENvbnRyb2xsZXJcXFN0b2NrXFxTdG9ja0Zvb3RhZ2VDb250cm9sbGVyIiwiVmltZW9cXENvbnRyb2xsZXJcXFN0b2NrXFxTdG9ja1NlYXJjaENvbnRyb2xsZXIiLCJWaW1lb1xcQ29udHJvbGxlclxcU3RvY2tcXFN0b2NrQ29sbGVjdGlvbnNDb250cm9sbGVyIiwiVmltZW9cXENvbnRyb2xsZXJcXEFsYnVtQ29udHJvbGxlciJdLCJ0b3BuYXZfd3JhcF9zZWxlY3RvciI6IiN0b3BuYXZfb3V0ZXJfd3JhcCIsImNvbnRlbnRfd3JhcF9zZWxlY3RvciI6Ii53cmFwX2NvbnRlbnQifSwibG9jYWxlIjoiZW4iLCJvbW5pc2VhcmNoX2Rpc2FibGVkIjpudWxsLCJvbW5pc2VhcmNoX2p3dCI6ImV5SjBlWEFpT2lKS1YxUWlMQ0poYkdjaU9pSklVekkxTmlKOS5leUpsZUhBaU9qRTJNRGM0TmpVNE5EQXNJblZ6WlhKZmFXUWlPbTUxYkd3c0ltRndjRjlwWkNJNk5UZzBOemtzSW5OamIzQmxjeUk2SW5CMVlteHBZeUJ3Y21sMllYUmxJR1JsYkdWMFpTSXNJblJsWVcxZmRYTmxjbDlwWkNJNmJuVnNiSDAuLWxNYmdOWGZDenYxUVQxcEQ1aUJET18tTGtJOGZkUzlrNFBPSmc3bnkyVSIsIm9tbmlzZWFyY2hfdXNlciI6bnVsbCwiYXBpX3VybCI6ImFwaS52aW1lby5jb20iLCJzaG93X29tbmlzZWFyY2hfdGlwIjpmYWxzZX0pOwoKICAgICAgICB2YXIgX19pMThuTG9jYWxlID0gJ2VuJzsKICAgIHZhciBsb2NhbGVDb25maWcgPSB7CiAgICAgICAgbGFuZzogJ2VuJywKICAgICAgICAnRGF0ZSc6IHsKICAgICAgICAgICAgbW9udGhzOiBbIkphbnVhcnkiLCJGZWJydWFyeSIsIk1hcmNoIiwiQXByaWwiLCJNYXkiLCJKdW5lIiwiSnVseSIsIkF1Z3VzdCIsIlNlcHRlbWJlciIsIk9jdG9iZXIiLCJOb3ZlbWJlciIsIkRlY2VtYmVyIl0sCiAgICAgICAgICAgIG1vbnRoc19hYmJyOiBbIkphbiIsIkZlYiIsIk1hciIsIkFwciIsIk1heSIsIkp1biIsIkp1bCIsIkF1ZyIsIlNlcCIsIk9jdCIsIk5vdiIsIkRlYyJdLAogICAgICAgICAgICBkYXlzOiBbIlN1bmRheSIsIk1vbmRheSIsIlR1ZXNkYXkiLCJXZWRuZXNkYXkiLCJUaHVyc2RheSIsIkZyaWRheSIsIlNhdHVyZGF5Il0sCiAgICAgICAgICAgIGRheXNfYWJicjogWyJTdW4iLCJNb24iLCJUdWUiLCJXZWQiLCJUaHUiLCJGcmkiLCJTYXQiXSwKCiAgICAgICAgICAgIC8vIEN1bHR1cmUncyBkYXRlIG9yZGVyOiBNTS9ERC9ZWVlZCiAgICAgICAgICAgIGRhdGVPcmRlcjogWydkYXRlJywgJ21vbnRoJywgJ3llYXInXSwKICAgICAgICAgICAgc2hvcnREYXRlOiAnJWQvJW0vJVknLAogICAgICAgICAgICBzaG9ydFRpbWU6ICclSTolTSVwJywKICAgICAgICAgICAgQU06ICdBTScsCiAgICAgICAgICAgIFBNOiAnUE0nLAogICAgICAgICAgICBmaXJzdERheU9mV2VlazogMCwKCiAgICAgICAgICAgIC8vIERhdGUuRXh0cmFzCiAgICAgICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uKGRheU9mTW9udGgpewogICAgICAgICAgICAgICAgcmV0dXJuIGRheU9mTW9udGg7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICdEYXRlUGlja2VyJzogewogICAgICAgICAgICBzZWxlY3RfYV90aW1lOiAiU2VsZWN0IGEgdGltZSIsCiAgICAgICAgICAgIHVzZV9tb3VzZV93aGVlbDogIlVzZSB0aGUgbW91c2Ugd2hlZWwgdG8gcXVpY2tseSBjaGFuZ2UgdmFsdWUiLAogICAgICAgICAgICB0aW1lX2NvbmZpcm1fYnV0dG9uOiAiT0siLAogICAgICAgICAgICBhcHBseV9yYW5nZTogIkFwcGx5IiwKICAgICAgICAgICAgY2FuY2VsOiAiQ2FuY2VsIiwKICAgICAgICAgICAgd2VlazogIldrIiAgICAgICAgfSwKICAgICAgICAgICAgICAgICdOdW1iZXInOiB7CiAgICAgICAgICAgIGRlY2ltYWw6ICcuJywKICAgICAgICAgICAgZ3JvdXA6ICcsJywKICAgICAgICAgICAgY3VycmVuY3k6IHsKICAgICAgICAgICAgICAgIHByZWZpeDogJyQnCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICdGb3JtVmFsaWRhdG9yJzogeyJyZXF1aXJlZCI6IlRoaXMgZmllbGQgaXMgcmVxdWlyZWQuIiwicmVxdWlyZWRDaGsiOiJUaGlzIGZpZWxkIGlzIHJlcXVpcmVkLiJ9ICAgIH07CgogICAgdmFyIGZ1bGxMb2NhbGUgPSAnJzsKCiAgICAKICAgICAgICB2YXIgQ29weSA9IHt0cmFuc2xhdGU6ZnVuY3Rpb24odCxpLHUpe3ZhciBlPSdvYmplY3QnIT10eXBlb2YgdGhpcy5kaWN0W3RdP3RoaXMuZGljdFt0XTppP3RoaXMuZGljdFt0XS5wbHVyYWw6dGhpcy5kaWN0W3RdLnNpbmd1bGFyO3JldHVybidvYmplY3QnPT10eXBlb2YgdSYmKGU9dGhpcy5zdWJzdGl0dXRlKGUsdSkpLGV9LHN1YnN0aXR1dGU6ZnVuY3Rpb24odCxpKXtyZXR1cm4gdm9pZCAwIT09dC5zdWJzdGl0dXRlP3Quc3Vic3RpdHV0ZShpKTp0LnJlcGxhY2UoL1xcP1x7KFtee31dKylcfS9nLGZ1bmN0aW9uKHQsdSl7cmV0dXJuJ1xcJz09dC5jaGFyQXQoMCk/dC5zbGljZSgxKTpudWxsIT1pW3VdP2lbdV06Jyd9KX0sZGljdDp7fX07CiAgICBDb3B5LmRpY3QgPSB7ImRpZF95b3VfbWVhbl9lbWFpbCI6IkRpZCB5b3UgbWVhbiA8ZW0+e1NVR0dFU1R9PFwvZW0+PyIsImVtYWlsX3Bhc3N3b3JkX21pc21hdGNoIjoiRW1haWwgYW5kIHBhc3N3b3JkIGRvIG5vdCBtYXRjaCIsIm9vcHNfdHJ5X2FnYWluIjoiT29wcyEgU29tZXRoaW5nIHdlbnQgd3JvbmcuIFBsZWFzZSB0cnkgYWdhaW4uIiwianVzdF9ub3ciOiJqdXN0IG5vdyIsInNlY29uZHNfYWdvIjp7InNpbmd1bGFyIjoie0NPVU5UfSBzZWNvbmQgYWdvIiwicGx1cmFsIjoie0NPVU5UfSBzZWNvbmRzIGFnbyJ9LCJtaW51dGVzX2FnbyI6eyJzaW5ndWxhciI6IntDT1VOVH0gbWludXRlIGFnbyIsInBsdXJhbCI6IntDT1VOVH0gbWludXRlcyBhZ28ifSwiaG91cnNfYWdvIjp7InNpbmd1bGFyIjoie0NPVU5UfSBob3VyIGFnbyIsInBsdXJhbCI6IntDT1VOVH0gaG91cnMgYWdvIn0sIm9wZW5fY29tbWVudF9ib3giOiJBZGQgbmV3IGNvbW1lbnQgaW5zdGVhZCAmcmFxdW87IiwidXJsX3VuYXZhaWxhYmxlIjoiU29ycnksIHRoaXMgdXJsIGlzIHVuYXZhaWxhYmxlLiIsInVuc2F2ZWRfY2hhbmdlc19nZW5lcmljIjoiWW91IGhhdmUgdW5zYXZlZCBjaGFuZ2VzLCBhcmUgeW91IHN1cmUgeW91IHdpc2ggdG8gbGVhdmU/IiwiYWRkIjoiQWRkIiwicmVtb3ZlIjoiUmVtb3ZlIiwic2VsZWN0IjoiU2VsZWN0Iiwibm9fZm9sbG93ZXJzX2Zvcl9sZXR0ZXIiOiJZb3UgZG9uJnJzcXVvO3QgZm9sbG93IGFueW9uZSB0aGF0IGJlZ2luIHdpdGggdGhlIGxldHRlciAmbGRxdW87e1BBR0VfTEVUVEVSfSZyZHF1bzsiLCJzaGFyZV9saW1pdF9yZWFjaGVkIjoiWW91IGhhdmUgcmVhY2hlZCB0aGUgbWF4aW11bSBudW1iZXIgb2YgdXNlcnMgdG8gc2hhcmUgd2l0aC4iLCJhdF9sZWFzdF9vbmUiOiJUaGVyZSBtdXN0IGJlIGF0IGxlYXN0IG9uZSB1c2VyLiIsImF2YWlsYWJsZSI6IkF2YWlsYWJsZSIsInVuYXZhaWxhYmxlIjoiVW5hdmFpbGFibGUiLCJicm93c2VfZXJyb3JfZ2VuZXJpYyI6IlNvcnJ5LCB0aGVyZSB3YXMgYW4gZXJyb3IiLCJicm93c2VfZXJyb3Jfbm9fdmlkZW9zIjoiU29ycnksIG5vIHZpZGVvcyBmb3VuZCIsImZvbGxvdyI6IkZvbGxvdyIsImZvbGxvd2luZyI6IkZvbGxvd2luZyIsInVuZm9sbG93IjoiVW5mb2xsb3ciLCJ1bmZvbGxvd2luZyI6IlVuZm9sbG93aW5nIiwiY291bnRfY29tbWVudHMiOnsic2luZ3VsYXIiOiJ7Q09VTlR9IGNvbW1lbnQiLCJwbHVyYWwiOiJ7Q09VTlR9IGNvbW1lbnRzIn0sImZpcnN0X2NvbW1lbnQiOiJCZSB0aGUgZmlyc3QgdG8gY29tbWVudFx1MjAyNiIsIm5vX2NvbW1lbnRzX2Zvcl95b3UiOiJGb3JiaWRkZW4uIFlvdSBjYW5ub3QgcG9zdCBjb21tZW50cyBvbiB0aGlzIHBhZ2UuIiwib29wcyI6Ik9vcHMhIiwicGxheWVyX3RyeV9hZ2FpbiI6IlRoYXQgd2Fzbid0IHN1cHBvc2VkIHRvIGhhcHBlbi4gUGxlYXNlIHRyeSBhZ2FpbiBpbiBhIGZldyBtaW51dGVzLiIsImR1cmF0aW9uX2lucHV0X21pbl9kdXJhdGlvbiI6IlRoZSBkdXJhdGlvbiBjYW5ub3QgYmUgbGVzcyB0aGFuIHtNSU5fRFVSQVRJT059LiIsImR1cmF0aW9uX2lucHV0X21heF9kdXJhdGlvbiI6IlRoZSBkdXJhdGlvbiBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuIHtNQVhfRFVSQVRJT059LiIsImR1cmF0aW9uX2lucHV0X2ludmFsaWRfY2hhcmFjdGVycyI6IjAtOSBhbmQgOiBhcmUgdGhlIG9ubHkgYWNjZXB0YWJsZSBpbnB1dHMuIiwiY2xvc2UiOiJDbG9zZSIsImV4cGFuZCI6IkV4cGFuZCIsImxvYWRpbmciOiJMb2FkaW5nLi4uIiwidG9wIjoidG9wIiwiYWR2YW5jZWRfc2VhcmNoIjoiQWR2YW5jZWQgU2VhcmNoIiwibm9fc3VnZ2VzdGlvbnMiOiJObyBzdWdnZXN0aW9ucyIsInJlY2VudF9zZWFyY2hlcyI6IlJlY2VudCBTZWFyY2hlcyIsInNlYXJjaF9hbGwiOiJTZWFyY2ggQWxsIG9mIFZpbWVvIiwiZW1haWxfYW5kX3Bhc3N3b3JkIjoiUGxlYXNlIGVudGVyIHlvdXIgZW1haWwgYW5kIHBhc3N3b3JkIiwiZW1haWxfYWRkcmVzcyI6IlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MiLCJuYW1lX2VtYWlsX2FuZF9wYXNzd29yZCI6IlBsZWFzZSBlbnRlciB5b3VyIG5hbWUsIGVtYWlsLCBhbmQgcGFzc3dvcmQifTsKPC9zY3JpcHQ+CgoKICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2YudmltZW9jZG4uY29tL2pzX29wdC9zdGlja3lfdG9wbmF2X2NvbWJpbmVkLm1pbi5qcz81ZmZkNmQ0ZSI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9mLnZpbWVvY2RuLmNvbS9qc19vcHQvcmVhY3RfcHJvZF9jb21iaW5lZC5taW4uanM/MDMxNzc1YTQiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vZi52aW1lb2Nkbi5jb20vanNfb3B0L2V4Y2VwdGlvbl9jb21iaW5lZC5taW4uanM/Mjg5NjE5YTYiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vZi52aW1lb2Nkbi5jb20vanNfb3B0L3RvcG5hdl9jYXJ0X2J1dHRvbl9jb21iaW5lZC5taW4uanM/NDQ4OGMwOTIiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgYXN5bmMgc3JjPSJodHRwczovL2YudmltZW9jZG4uY29tL2pzX29wdC9fYnVuZGxlcy9jcmVhdGVfZmFjZWJvb2tfaGVhZGVyLmJ1bmRsZS5taW4uanM/MzZiNzU4ZWUiPjwvc2NyaXB0PgogICAgPHNjcmlwdD4KICAgICAgICBmdW5jdGlvbiBvblZpbWVvRG9tUmVhZHkoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgd2luZG93LnZpbWVvID0gd2luZG93LnZpbWVvIHx8IHt9OwogICAgICB3aW5kb3cudmltZW8uZXhjZXB0aW9uX2RhdGEgPSB7InRpdGxlIjoiU29ycnksIHRoaXMgdmlkZW8gaXMgdW5hdmFpbGFibGUiLCJtZXNzYWdlIjoiIiwibm90aWZpY2F0aW9uIjoiPGRpdiBjbGFzcz1cImV4Y2VwdGlvbl9ub3RpZmljYXRpb24gaXJpc19ub3RpZmljYXRpb24gaXJpc19ub3RpZmljYXRpb24tLXdhcm5pbmdcIj5cbiAgICA8ZGl2IGNsYXNzPVwiaXJpc19ub3RpZmljYXRpb24tLXdhcm5pbmctaWNvblwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImlyaXNfaWMgaXMtLTE2XCI+PHN2ZyB4bWxucz1cImh0dHA6XC9cL3d3dy53My5vcmdcLzIwMDBcL3N2Z1wiIHZpZXdCb3g9XCIyOTggMzg5IDE2IDE0XCI+PHBhdGggZD1cIk0zMTMuNyA0MDBsLTYtMTBjLS40LS42LTEtMS0xLjctMXMtMS40LjQtMS43IDFsLTYgMTBjLS4yLjMtLjMuNi0uMyAxIDAgMS4xLjkgMiAyIDJoMTJjMS4xIDAgMi0uOSAyLTIgMC0uNC0uMS0uNy0uMy0xem0tNi43IDFoLTJ2LTJoMnYyem0wLTNoLTJ2LTVoMnY1elwiXC8+PFwvc3ZnPlxuPFwvc3Bhbj5cbiAgICA8XC9kaXY+XG5cbiAgICA8cD5WaW1lbyBoYXMgcmVtb3ZlZCBvciBkaXNhYmxlZCBhY2Nlc3MgdG8gdGhlIHZpZGVvIDxzdHJvbmc+VGhlIE1lYW4gV29ybGQgU3luZHJvbWUgY3Ugc3ViPFwvc3Ryb25nPiBhcyBhIHJlc3VsdCBvZiBhIHRoaXJkLXBhcnR5IG5vdGlmaWNhdGlvbiBieSA8c3Ryb25nPk1lZGlhIEVkdWNhdGlvbiBGb3VuZGF0aW9uPFwvc3Ryb25nPiB0aGF0IGNsYWltcyB0aGlzIG1hdGVyaWFsIGlzIGluZnJpbmdpbmcgb24gdGhlaXIgY29weXJpZ2h0LjxcL3A+XG5cbiAgICBcbiAgICA8ZGl2IGNsYXNzPVwiaXJpc19ub3RpZmljYXRpb24tYWRkZW5kdW0tLXdhcm5pbmdcIj5cbiAgICAgICAgVGhpcyB2aWRlbyB3YXMgcmVtb3ZlZCBvbiBXZWRuZXNkYXksIEF1Z3VzdCAxNCwgMjAxMyBBdCAxOjEwIFBNLiAgICAgICAgICAgIDxcL2Rpdj5cbjxcL2Rpdj5cbiIsInNlYXJjaCI6dHJ1ZSwidmlkZW9zIjpudWxsLCJhZF9jb25maWciOnsiaG91c2VfYWRzX2VuYWJsZWQiOmZhbHNlfSwicGFnZV90eXBlIjoiZXhjZXB0aW9uIiwibW9kdWxlX3R5cGUiOiJzdGFuZGFyZF9tdWx0aSJ9OwoKICAgICAgbmV3IHdpbmRvdy5FeGNlcHRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KG9uVmltZW9Eb21SZWFkeSk7CiAgICAgICAgICAgIDwvc2NyaXB0PgoKCiAgICA8L2JvZHk+CjwvaHRtbD4K
    http_version:
  recorded_at: Sun, 13 Dec 2020 13:08:11 GMT
recorded_with: VCR 3.0.3
