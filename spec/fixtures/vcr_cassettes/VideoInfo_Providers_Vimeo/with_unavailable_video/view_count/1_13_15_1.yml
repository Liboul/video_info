---
http_interactions:
- request:
    method: head
    uri: https://vimeo.com/0812455
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - VideoInfo/2.8.0
      Accept:
      - "*/*"
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '143204'
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Sun, 27 Sep 2020 08:06:58 GMT
      X-Frame-Options:
      - sameorigin
      X-Bapp-Server:
      - pweb-v3487-f8gv9
      Via:
      - 1.1 varnish
      - 1.1 varnish
      - 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-a-3
      X-Vimeo-Dc:
      - ge
      Accept-Ranges:
      - bytes
      Date:
      - Sun, 27 Sep 2020 20:06:58 GMT
      Age:
      - '0'
      X-Served-By:
      - cache-bwi5127-BWI, cache-gru17125-GRU
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1601237218.429971,VS0,VE244
      Vary:
      - Accept-Encoding
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Sun, 27 Sep 2020 20:06:58 GMT
- request:
    method: get
    uri: https://vimeo.com/0812455
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '34265'
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Sun, 27 Sep 2020 08:06:58 GMT
      X-Frame-Options:
      - sameorigin
      X-Bapp-Server:
      - pweb-v3486-s5jnl
      Via:
      - 1.1 varnish
      - 1.1 varnish
      - 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-a-3
      X-Vimeo-Dc:
      - ge
      Accept-Ranges:
      - bytes
      Date:
      - Sun, 27 Sep 2020 20:06:59 GMT
      Age:
      - '0'
      X-Served-By:
      - cache-bwi5130-BWI, cache-gru17121-GRU
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1601237219.834926,VS0,VE244
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sun, 27 Sep 2020 20:06:58 GMT
recorded_with: VCR 3.0.3
