---
http_interactions:
- request:
    method: head
    uri: https://vimeo.com/141349194
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - VideoInfo/2.8.0
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '162033'
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Sun, 27 Sep 2020 20:16:41 GMT
      Set-Cookie:
      - vuid=2066077057.620073818; expires=Wed, 25-Sep-2030 20:06:41 GMT; Max-Age=315360000;
        path=/; domain=.vimeo.com; secure; SameSite=None
      X-Ua-Compatible:
      - IE=edge
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - sameorigin
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Security-Policy-Report-Only:
      - 'default-src https: data: blob: wss: ''unsafe-inline'' ''unsafe-eval''; report-uri
        /_csp'
      X-Bapp-Server:
      - pweb-v3485-5wcwz
      Via:
      - 1.1 varnish
      - 1.1 varnish
      - 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-a-7
      X-Vimeo-Dc:
      - ge
      Accept-Ranges:
      - bytes
      Date:
      - Sun, 27 Sep 2020 20:06:41 GMT
      Age:
      - '0'
      X-Served-By:
      - cache-bwi5149-BWI, cache-gru17150-GRU
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1601237201.046472,VS0,VE348
      Vary:
      - User-Agent,Accept-Encoding
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Sun, 27 Sep 2020 20:06:41 GMT
- request:
    method: get
    uri: https://vimeo.com/141349194
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '38943'
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Sun, 27 Sep 2020 20:16:41 GMT
      Set-Cookie:
      - vuid=2086010721.1561901739; expires=Wed, 25-Sep-2030 20:06:41 GMT; Max-Age=315360000;
        path=/; domain=.vimeo.com; secure; SameSite=None
      X-Ua-Compatible:
      - IE=edge
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - sameorigin
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Security-Policy-Report-Only:
      - 'default-src https: data: blob: wss: ''unsafe-inline'' ''unsafe-eval''; report-uri
        /_csp'
      X-Bapp-Server:
      - pweb-v3487-lt7dj
      Via:
      - 1.1 varnish
      - 1.1 varnish
      - 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-a-7
      X-Vimeo-Dc:
      - ge
      Accept-Ranges:
      - bytes
      Date:
      - Sun, 27 Sep 2020 20:06:41 GMT
      Age:
      - '0'
      X-Served-By:
      - cache-bwi5140-BWI, cache-gru17136-GRU
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1601237202.557950,VS0,VE364
      Vary:
      - User-Agent,Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sun, 27 Sep 2020 20:06:41 GMT
- request:
    method: head
    uri: https://vimeo.com/141349194
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - VideoInfo/2.8.0
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '162129'
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Sun, 27 Sep 2020 20:16:42 GMT
      Set-Cookie:
      - vuid=305282343.452945875; expires=Wed, 25-Sep-2030 20:06:42 GMT; Max-Age=315360000;
        path=/; domain=.vimeo.com; secure; SameSite=None
      X-Ua-Compatible:
      - IE=edge
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - sameorigin
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Security-Policy-Report-Only:
      - 'default-src https: data: blob: wss: ''unsafe-inline'' ''unsafe-eval''; report-uri
        /_csp'
      X-Bapp-Server:
      - pweb-v3486-l7rt8
      Via:
      - 1.1 varnish
      - 1.1 varnish
      - 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-a-7
      X-Vimeo-Dc:
      - ge
      Accept-Ranges:
      - bytes
      Date:
      - Sun, 27 Sep 2020 20:06:42 GMT
      Age:
      - '0'
      X-Served-By:
      - cache-bwi5145-BWI, cache-gru17125-GRU
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1601237202.124564,VS0,VE341
      Vary:
      - User-Agent,Accept-Encoding
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Sun, 27 Sep 2020 20:06:42 GMT
recorded_with: VCR 3.0.3
